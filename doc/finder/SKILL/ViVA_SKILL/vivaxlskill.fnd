;SKILL Language Functions
("awvAddSubwindow"
"awvAddSubwindow( 
w_windowId 
) 
=> x_subwindow | nil"
"Adds a subwindow to the Waveform window.")
("awvAnalog2Digital"
"awvAnalog2Digital( 
o_wave
n_vhi 
n_vlo 
n_vc 
n_timex 
t_thresholdType 
) 
=> o_digWave / n_digval / nil"
"Returns the digital form of the analog input, which can be a waveform, list or family of waveforms, or a string representation of expression(s).")
("awvAppendExpression"
"awvAppendExpression(
w_windowId
t_expr
l_context
[ ?index			l_waveIndexList ]
[ ?color			l_colorList ]
[ ?lineType			l_styleList ]
[ ?dataSymbol			l_symbolList ]
[ ?subwindow			x_subwindow ]
[ ?showSymbols			l_showList ]
[ ?lineStyle			l_styleList ]
[ ?lineThickness l_thicknessList ]
)
=> t / nil"
"Evaluates the t_expr expression and adds the resulting waveforms to a subwindow.")
("awvAppendList"
"awvAppendList(
w_windowId
l_YListList
l_XList
[ ?index			l_waveIndexList ]
[ ?color			l_colorList ]
[ ?lineType			l_styleList ]
[ ?dataSymbol			l_symbolList ]
[ ?subwindow			x_subwindow ]
)
=> t | nil"
"Plots the Y values in l_YListList against the X values in l_XList and adds the resulting waveforms to a subwindow.")
("awvAppendWaveform"
"awvAppendWaveform(
w_windowId
l_waveform
[ ?expr			l_exprList ]
[ ?index			l_waveIndexList ]
[ ?color			l_colorList ]
[ ?lineType			l_styleList ]
[ ?dataSymbol			l_symbolList ]
[ ?subwindow			x_subwindow ]
[ ?stripNumber			l_stripNumberList ]
[ ?showSymbols			l_showList ]
[ ?lineStyle			l_styleList ]
[ ?lineThickness 		l_thicknessList ]
)
=> t / nil"
"Adds the waveforms in the l_waveform list to a subwindow.")
("awvClearPlotWindow"
"awvClearPlotWindow(
w_windowId
) 
=> t / nil"
"Clears the graphics shown in the waveform window. The History for the window and subwindows are maintained.")
("awvClearSubwindowHistory"
"awvClearSubwindowHistory(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Erases the contents of a particular subwindow. This function deletes the waveforms, title, date stamp, and labels stored in internal memory. The other subwindows are not affected.")
("awvClearWindowHistory"
"awvClearWindowHistory(
w_windowId
[ ?force		g_force ]
)
=> t / nil"
"Erases the contents of a Waveform window and deletes the waveforms, title, date stamp, and labels stored in internal memory. This function operates on subwindows whose update statuses are on. To force this function to operate on all subwindows, set g_force to t.")
("awvCloseCalculator"
"awvCloseCalculator(
adesession
adexlSession
)
=> t / nil"
"Closes calculator window of the current session or the session specified (optional).")
("awvCloseWindow"
"awvCloseWindow(
w_windowID
)
=> t / nil"
"Closes the specified Waveform window.")
("awvCloseWindowMenuCB"
"awvCloseWindowMenuCB() 
=> t / nil"
"Closes the current window.")
("awvCreateBus"
"awvCreateBus(
w_bus
l_wavelist
r_radix
)
=> o_bus / nil"
"Creates a bus with the given digital signals and radix type.")
("awvCreateBusFromWaveList"
"awvCreateBusFromWaveList(
l_waveList
)
=> o_bus | nil"
"Creates a digital bus from a list of digital waves provided as input.")
("awvCreatePlotWindow"
"awvCreatePlotWindow(
[ ?parentWindow				w_windowId ]
)
=> w_windowId | nil"
"Creates a Waveform window and returns the window ID.")
("awvLoadCustomCalcFunction"
"awvLoadCustomCalcFunction(
[ ?fileName t_fileName ]
[ ?funcName t_funcName ]
[ ?templateFileName t_templateFileName ]
[ @rest args ]
)
=> t / nil"
"Loads the specified custom function template to the Function Panel of Calculator. This function template contains the UI definitions corresponding to the given SKILL function. These UI definitions can be obtained from the specified SKILL file or from a separate .ocn file.")
("awvLoadSharedCustomFunctionsFile"
"awvLoadSharedCustomFunctionsFile(
t_fileName
)
=> t / nil"
"This function is used to share custom functions template among multiple users from a central file location.")
("awvDeleteAllWaveforms"
"awvDeleteAllWaveforms(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Deletes all the waveforms in the specified subwindow.")
("awvDeleteMarker"
"awvDeleteMarker(
w_windowId
t_bookmarkId | l_bookmarkIds
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Deletes the specified bookmark(s) from the given window.")
("awvDeleteSubwindow"
"awvDeleteSubwindow(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Deletes a subwindow from a Waveform window.")
("awvDeleteWaveform"
"awvDeleteWaveform(
w_windowId
x_index
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Deletes a waveform curve from a subwindow.")
("awvDigital2Analog"
"awvDigital2Analog( 
o_waveform 
n_vhi 
n_vlo 
s_VX 
[ ?mode s_mode ]
[ ?outWaveType s_outWaveType ]
[ ?vprevSTART s_vprevSTART ]
) 
=> o_waveform | nil"
"Computes the analog output of the provided digital waveform o_waveform.")
("awvDisableRedraw"
"awvDisableRedraw(
w_windowId 
g_disable
)
=> t / nil"
"Disables or enables redraw of the Waveform window based on the value of the g_disable flag. You might use this function to freeze the Waveform window display, send several plots to the window, then unfreeze the window to display all the plots at once.")
("awvDisplayDate"
"awvDisplayDate(
w_windowId
) 
=> t / nil"
"Displays the current date and time in the Waveform windowwindow.")
("awvDisplayGrid"
"awvDisplayGrid(
w_windowId 
g_on 
[ ?subwindow x_subwindow ]
) 
=> t / nil"
"Sets the display status for a grid on the indicated waveform subwindow.")
("awvDisplaySubwindowTitle"
"awvDisplaySubwindowTitle(
w_windowId
t_title
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Displays a title in a subwindow.")
("awvDisplayTitle"
"awvDisplayTitle( 
w_windowId 
t_title 
) 
=> t / nil"
"Displays a title on a Waveform window.")
("awvEraseWindowMenuCB"
"awvEraseWindowMenuCB()
=> t / nil"
"Deletes all the objects (e.g. waveforms, markers) from the waveform subwindow.")
("awvEval"
"awvEval( 
expr 
l_expr
) 
=> expr / nil"
"Returns the expression")
("awvExitWindowFunctionAdd"
"awvExitWindowFunctionAdd(
u_func
)
=> t / nil"
"Adds a function to the list of functions that are called when you close a Waveform window or exit the Cadence software while a Waveform Window is open.")
("awvExitWindowFunctionDel"
"awvExitWindowFunctionDel(
u_func
) 
=> t | nil"
"Deletes a function from the list of functions that are called when you close a Waveform window or exit the Cadence software while a Waveform window is open.")
("awvExitWindowFunctionGet"
"awvExitWindowFunctionGet() 
=> l_initFunctionList | nil"
"Gets the list of functions that are called when you close a Waveform window or exit the Cadence software while a Waveform window is open.")
("awvGetAssertName"
"awvGetAssertName(
o_waveform
)
=> t_assertName / nil"
"Returns the name of assert defined in violation data.")
("awvEyeCross"
"awvEyeCross(
w_waveform
n_start
n_stop
n_period
n_threshold
[ x_edgeType ]
[ x_ignoreStart ]
[ x_ignoreEnd ]
)
=> o_waveform / nil"
"Returns an output waveform showing X-axis values where the given eye diagram crosses the specified threshold on Y-axis.")
("awvGetCurrentSubwindow"
"awvGetCurrentSubwindow(
w_windowId
)
=> x_subwindow / nil"
"Returns the current subwindow.")
("awvGetCurrentWindow"
"awvGetCurrentWindow() 
=> w_windowId | nil"
"Returns the window ID for the current Waveform window. ")
("awvGetDisplayMode"
"awvGetDisplayMode(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t_mode | nil"
"Returns the display mode of a subwindow.")
("awvGetDrawStatus"
"awvGetDrawStatus(
w_windowId
)
=> t / nil"
"Returns the draw status of the waveform display window.")
("awvGetHiWindow"
"awvGetHiWindow(
w_windowId
)
=> w_HIWindowId/nil"
"Returns the ID of the waveform HI window corresponding to the specified waveform window ID. This function is primarily used to support menu customization using HI calls.")
("awvGetInitializationTimeout"
"awvGetInitializationTimeout()
=> x_timeOut"
"Retrieves the time-out period (in seconds) set for ADE to establish connection with Virtuoso Visualization and Analysis XL.")
("awvGetOnSubwindowList"
"awvGetOnSubwindowList(
w_windowId
[ ?all		g_all ]
)
=> l_onSubwindows | nil"
"Returns the list of subwindows that are being used in the specified Waveform window. This list includes only subwindows whose display and update statuses are turned on. To get a list of all subwindows whose displays are on, regardless of update status, set g_all to t.")
("awvGetPlotStyle"
"awvGetPlotStyle(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> s_style"
"Gets the plotting style for the waveforms in a subwindow.")
("awvGetScalarFromWave"
"awvGetScalarFromWave(
o_waveform
)
=> n_yValue / o_waveform"
"Returns the Y-axis value of the point when the input waveform is single point. If the waveform has multiple points, this function returns back the input waveform.")
("awvGetSelectedTraceWaveforms"
"awvGetSelectedTraceWaveforms(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_waveformList / nil"
"Returns a list of waveforms corresponding to the traces that are selected in the specified or current subwindow of the given window.")
("awvGetSmithModeType"
"awvGetSmithModeType(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t_type / nil"
"Returns the Smith display type of a subwindow.")
("awvGetStripNumberOfSelectedTrace"
"awvGetStripNumberOfSelectedTrace( 
w_windowId 
)
=> n_stripNumber / nil"
"Returns the strip number of the selected trace plotted in the specified window.")
("awvGetStripNumbersList"
"awvGetStripNumbersList(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> l_stripNumberList | nil"
"Returns the list of strip numbers in the specified subwindow of the given window.")
("awvGetSubwindowStripCount"
"awvGetSubwindowStripCount(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> n_stripNumberCount | nil"
"Returns the total number of strips displayed in the specified subwindow of the given window.")
("awvGetSubwindowList"
"awvGetSubwindowList(
w_windowId
[ ?all		g_all ]
)
=> l_subwindows | nil"
"Returns a list of all the subwindows whose update statuses are turned on, regardless of whether their displays are on or off. To get a list of all subwindows, including subwindows whose update statuses are off, set g_all to t.")
("awvGetUnusedEntityList"
"awvGetUnusedEntityList(
w_windowId
[ ?subwindow			x_subwindow ]
[ ?total		x_total ]
)
=> l_waveformEntityIndices | nil"
"Returns a list of integers that have not already been used to identify curves in a subwindow. You can specify the total number of integers to include in the return value with x_total.")
("awvGetWaveNameList"
"awvGetWaveNameList(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> l_infoList"
"Returns a list that contains two elements. The first element is a list of numbers for the curves and the second is a list of the corresponding names.")
("awvGetWindowList"
"awvGetWindowList() 
=> l_windows"
"Returns a list of all the Waveform Windows associated with the current process.")
("awvGetXAxisLabel"
"awvGetXAxisLabel(
w_windowId
[ ?subwindow			x_subwindow ]
[ ?computed			g_computed ]
)
=> t_label | nil"
"Returns the user-specified X axis label if you set computed to nil. Returns the system-computed X axis label otherwise.")
("awvGetXMarkerNames"
"awvGetXMarkerNames(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> l_markerNames | nil"
"Returns the names of all the X markers in a subwindow.")
("awvGetYAxisLabel"
"awvGetYAxisLabel(
w_windowId
x_yNumber
[ ?subwindow			x_subwindow ]
[ ?computed			g_computed ]
[ ?stripNumber			x_stripNumber ]
)
=> t_label | nil"
"Returns the user-specified Y axis label if you set computed to nil. Returns the system-computed Y axis label otherwise.")
("awvGetYMarkerNames"
"awvGetYMarkerNames(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> l_markerNames | nil"
"Returns the names of all the Y markers in a subwindow.")
("awvInitWindowFunctionAdd"
"awvInitWindowFunctionAdd(
u_func
) 
=> t / nil"
"Adds a function to the list of functions that are called when a new Waveform window is opened. The list of functions is empty by default. For example, you can use this function to add menus to every new Waveform window that is opened. ")
("awvInitWindowFunctionDel"
"awvInitWindowFunctionDel(
u_func
) 
=> t / nil"
"Deletes a function from the list of functions that are called when a new Waveform window is opened.")
("awvInitWindowFunctionGet"
"awvInitWindowFunctionGet() 
=> l_initFunctionList"
"Returns the current list of functions that are called when a new Waveform window is opened. This list is empty by default.")
("awvIsPlotWindow"
"awvIsPlotWindow(
w_windowId
) 
=> t / nil"
"Returns t if the specified window is a Waveform window.")
("awvLoadEyeMask"
"awvLoadEyeMask(
[ ?fileName t_fileName ]
)
=> t / nil"
"Loads the eye mask saved in a VCSV file and adds it to the eye mask list in the Eye Diagram assistant. The loaded eye mask is displayed in the Mask drop-down list of the Eye Mask tab.")
("awvLoadMenuCB"
"awvLoadMenuCB() 
=> t / nil"
"Displays the Load Menu (Windows -> Load ...).")
("awvLoadWindow"
"awvLoadWindow( 
w_windowId 
t_fileName 
[ ?resultsDir t_resultsDir ]
) 
=> t / nil"
"Initializes the state of a Waveform window from information saved in a file.")
("awvLogYAxis"
"awvLogYAxis(
w_windowId
x_yNumber
g_state
[ ?stripNumber			x_stripNumber ]
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the Y axis for a strip in a subwindow to display logarithmically if the g_state flag is set to t. If g_state is not set to t, the display is set to linear. If you do not specify a strip, the limits are applied when the Waveform window is in the composite mode.")
("awvLogXAxis"
"awvLogXAxis(
w_windowId
g_state
[ ?subwindow x_subwindowID ]
)
=> t / nil"
"Sets the X axis for a strip in a subwindow to display logarithmically if the g_state flag is set to t. If g_state is not set to t, the display is set to linear.")
("awvPlaceAMarker"
"awvPlaceAMarker(
w_window 
x_traceIndex
n_xLoc
n_yLoc
[ ?subwindow x_subwindow ]
[ ?positionMode t_positionMode ]
)
=> t_markerId / nil"
"Places marker of type A on the specified trace.")
("awvPlaceBMarker"
"awvPlaceBMarker(
w_window 
x_traceIndex
n_xLoc
n_yLoc
[ ?subwindow x_subwindow ]
[ ?positionMode t_positionMode ]
)
=> t_markerId / nil"
"Places marker of type B on the specified trace.")
("awvPlaceBookmark"
"awvPlaceBookmark(
w_windowId
t_bmType
l_location
[ ?waveIndex x_waveIndex ]
[ ?parent t_parentGroup ]
[ ?description t_description ]
[ ?visible g_visible ]
[ ?subwindow x_subwindow ]
[ ?properties l_proplist ]
)
=> l_bookmarkId / nil"
"Adds a bookmark in the specified window. You can create bookmarks on the graph for the regions that you are interested in. The bookmarks can be organized into groups, where a bookmark group can contain other groups.")
("awvPlaceWaveformLabel"
"awvPlaceWaveformLabel(
w_windowId
x_waveIndex
l_location
t_label
t_expr
[ ?textOffset			g_textOffset ]
[ ?color			t_color ]
[ ?justify			t_justify ]
[ ?fontStyle			t_fontStyle ]
[ ?height			t_height ]
[ ?orient			t_orient ]
[ ?subwindow			x_subwindow ]
)
=> s_labelId | nil"
"Attaches a label to the specified waveform curve in a subwindow. ")
("awvPlaceWindowLabel"
"awvPlaceWindowLabel(
w_windowId
l_location
t_label
t_expr
[ ?color			t_color ]
[ ?justify			t_justify ]
[ ?fontStyle			t_fontStyle ]
[ ?height			t_height ]
[ ?orient			t_orient ]
[ ?subwindow			x_subwindow ]
)
=> s_labelId | nil"
"Displays a label in a subwindow.")
("awvPlaceXMarker"
"awvPlaceXMarker(
w_windowId
n_xLoc
[ ?label t_label ]
[ ?subwindow	 		x_subwindowId ]
) 
=> t_xLoc / t / nil"
"Places a vertical marker at a specific x-coordinate in the optionally specified subwindow of the specified window.")
("awvPlaceYMarker"
"awvPlaceYMarker(
w_windowId
n_yLoc
[ ?label t_label ]
[ ?subwindow x_subwindowId ]
[ ?stripNum x_stripNumber ]
) 
=> t_yLoc / t / nil"
"Places a horizontal marker at a specific y-coordinate in the optionally specified subwindow of the specified window.")
("awvPlotExpression"
"awvPlotExpression(
w_windowId
t_expr
l_context
[ ?expr		l_dispExprList ]
[ ?index		l_waveIndexList ]
[ ?color		l_colorList ]
[ ?lineType			l_styleList ]
[ ?dataSymbol			l_symbolList ]
[ ?subwindow			x_subwindow ]
[ ?yNumber			l_yNumberList ]
[ ?stripNumber			l_stripNumberList ]
[ ?showSymbols			l_showList ]
[ ?lineStyle			l_styleList ]
[ ?lineThickness 		l_thicknessList ]
)
=> t / nil"
"Evaluates the t_expr expression and assigns the numbers specified in l_waveIndexList to the waveforms resulting from the evaluation.")
("awvPrintWaveform"
"awvPrintWaveform( 
[ ?output		t_filename | p_port ] 
[ ?numSigDigits			 x_sigDigits ] 
[ ?format		 	s_format ] 
[ ?numSpaces			x_numSpaces ] 
[ ?width			x_width ] 
[ ?from			x_from ] 
[ ?to			x_to ] 
[ ?step			x_step ] 
o_waveform1			[o_waveform2 ...] 
) 
=> t / nil"
"Prints the text data of the waveforms specified in the list of waveforms in a result display window.")
("awvPlotList"
"awvPlotList(
w_windowId
l_YListList
l_XList
[ ?expr			l_exprList ]
[ ?index			l_waveIndexList ]
[ ?color			l_colorList ]
[ ?lineType			l_typeList ]
[ ?lineStyle			l_styleList ]
[ ?lineThickness l_thicknessList ]
[ ?showSymbols			l_showList ]
[ ?dataSymbol			l_symbolList ]
[ ?barBase			t_barBase ]
[ ?barWidth			t_barWidth ]
[ ?barShift			t_barShift ]
[ ?subwindow			x_subwindow ]
[ ?yNumber			l_yNumberList ]
[ ?stripNumber			l_stripNumberList ]
)
=> t / nil"
"Plots the Y-axis values in l_YListList against the X-axis values in l_XList and displays the resulting waveforms in a subwindow. If you do not specify numbers for the waveforms in l_waveIndexList, the lowest unused numbers for the subwindow are assigned.")
("awvPlotSignals"
"awvPlotSignals(
l_sigList
[ ?plotStyle t_style ]
[ ?graphType t_type ]
[ ?graphModifier l_modifier ] 
[ ?wavetype g_waveType ]
)
=> o_waveform / nil"
"Displays a signal in the graph window.")
("awvPlotSimpleExpression"
"awvPlotSimpleExpression(
t_expression 
[ ?plotStyle t_plotStyle ]
[ ?graphType t_graphType ]
[ ?graphModifier t_graphModifier ]
)
=> o_waveform / nil"
"Evaluates an expression and plots the resulting waveform.")
("awvPlotWaveform"
"awvPlotWaveform(
w_windowId
l_waveform
[ ?subwindow			x_subwindow ]
[ ?yNumber			l_yNumberList ]
[ ?stripNumber			l_stripNumberList ]
[ ?expr			l_exprList ]
[ ?index			l_waveIndexList ]
[ ?component			t_component ]
[ ?color			l_colorList ]
[ ?lineType			l_typeList ]
[ ?lineStyle			l_styleList ] 
[ ?lineThickness l_thicknessList ]
[ ?dataSymbol			l_symbolList ]
[ ?showSymbols			l_showList ]
[ ?barBase			t_barBase ]
[ ?barWidth			t_barWidth ]
[ ?barShift			t_barShift ]
[ ?yAxisUnit			t_yAxisUnit ]
[ ?yAxisLabel			t_yAxisLabel ]
[ ?label			t_label ]
[ ?modifierType				t_modifierType ]
[ ?graphType			t_graphType ]
)
=> t / nil"
"Plots the waveforms in the l_waveform list in a subwindow. If you do not specify numbers for the waveforms in l_waveIndexList, the lowest unused numbers for the subwindow are assigned.")
("awvPlotWaveformOption"
"awvPlotWaveformOption(
w_windowId
x_waveIndex
t_component
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the plot option for a particular waveform in a subwindow.")
("awvRedisplaySubwindow"
"awvRedisplaySubwindow(
w_windowId
[ ?subwindow			x_subwindow ]
g_readData
)
=> t / nil"
"Refreshes the display for a subwindow.")
("awvRedrawWindowMenuCB"
"awvRedisplaySubwindow()
=> t / nil"
"Redraws all the objects (e.g. waveforms, markers) in the waveform window.")
("awvRedisplayWindow"
"awvRedisplayWindow(
w_windowId 
) 
=> t / nil"
"Refreshes the display for a Waveform window.")
("awvRemoveDate"
"awvRemoveDate(
w_windowId
) 
=> t / nil"
"Removes the date and time from the Waveform window.")
("awvResumeViVA"
"awvResumeViVA()"
"This function, when called from CIW, resumes ViVA (if suspended) provided all the licensing requirements are met.")
("awvRemoveLabel"
"awvRemoveLabel(
w_windowId
s_id | l_id 
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Removes the label, or all the labels identified in a list, from a subwindow.")
("awvRemoveSubwindowTitle"
"awvRemoveSubwindowTitle(
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Removes the title from a subwindow.")
("awvRemoveTitle"
"awvRemoveTitle(
w_windowId
) 
=> t / nil"
"Removes the title from a Waveform window.")
("awvResetAllWindows"
"awvResetAllWindows(
[ ?force		g_force ] 
)
=> t"
"Resets all the windows returned by awvGetWindowList. The contents of the windows are erased, and any subwindows whose update statuses are on are deleted. To delete all subwindows, regardless of update status, set g_force to t.")
("awvResetWindow"
"awvResetWindow(
w_windowId
[ ?force		g_force ]
)
=> t / nil"
"Resets a Waveform window to the state of a new window. The contents of the window are erased, and any subwindows whose update statuses are on are deleted. To delete all subwindows, regardless of update status, set g_force to t.")
("awvRfLoadPull"
"awvRfLoadPull(
w_wave
[ ?maxValue			x_maxValue ]
[ ?minValue 			x_minValue ]
[ ?numCont			x_numCont ]
[ ?closeCont			g_closeCont ]
[ ?name 			t_name ]
)
=> t / nil"
"Draws load pull contour for the given waveform of PSS analysis. This function works only for two-dimensional sweep PSS results. The inner sweep should be phase and the outer sweep should be mag.")
("awvSaveWindow"
"awvSaveWindow(
w_windowId
t_fileName 
) 
=> t / nil"
"Saves the state of a Waveform window to a file. You can specify a path name, or you can specify only the file name. If you provide only a file name, the file is placed in the directory in which you started the software.")
("awvSaveWindowImage"
"awvSaveWindowImage( 
w_window
t_path 
t_filePrefix 
g_cardLayout
)
=> l_files"
"Saves the image of a plot window in .png format.")
("awvSaveMenuCB"
"awvSaveMenuCB() 
=> t / nil"
"Displays the Save (window -> Save...) Option Menu.")
("awvSaveToCSV"
"awvSaveToCSV(
l_waveform 
t_fileName
[ ?from x_from ]
[ ?to x_to ]
[ ?precision x_precision ]
[ ?step x_step ]
[ ?linLog g_linLog ]
[ ?exprList l_expressionList ]
)
=> t / nil"
"Saves the waveform data to the specified CSV file.")
("awvSetCurrentSubwindow"
"awvSetCurrentSubwindow(
w_windowId 
x_subwindow 
) 
=> t / nil"
"Specifies x_subwindow as the current subwindow.")
("awvSetCurrentWindow"
"awvSetCurrentWindow( 
w_windowId 
) 
=> t / nil"
"Specifies w_windowId as the current Waveform window. ")
("awvSetCursorPrompts"
"awvSetCursorPrompts(
w_windowId
x_yNumber
t_xPrompt
t_yPrompt
[ ?stripNumber			x_stripNumber ]
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the tracking cursor prompts for the waveforms around a particular Y axis and a particular strip in a subwindow. If you specify nil for the prompts, the default prompts are used.")
("awvSetDisplayMode"
"awvSetDisplayMode(
w_windowId
t_mode
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the display mode of a subwindow.")
("awvSetDisplayStatus"
"awvSetDisplayStatus(
w_windowId
g_enable
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Turns the display of a subwindow on or off based on the value of the g_enable flag. You can use this function to hide a subwindow without deleting it.")
("awvSetInitializationTimeout"
"awvSetInitializationTimeout( 
x_timeOut
)
=> x_timeOut"
"Sets the time-out period (in seconds) for ADE to establish connection with Virtuoso Visualization and Analysis XL and returns the same value. The default value of the time-out period is 120 seconds.")
("awvSetLegendWidth"
"awvSetLegendWidth(
w_windowId
x_width
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the width of the legend in the specified subwindow or window. If no subwindow is specified, the currently selected subwindow is used. This works only when the legend is displayed in the left position.")
("awvSetOptionDefault"
"awvSetOptionDefault( 
S_name
) 
=> t / nil"
"Restores a Waveform window option to its default value. The option takes effect for any Waveform Windows or subwindows that are opened after the option is set.")
("awvSetOptionValue"
"awvSetOptionValue( 
S_name 
g_value 
) 
=> g_value | nil"
"Sets a Waveform window option. The option takes effect for any Waveform Windows or subwindows that are opened after the option is set.")
("awvSetOrigin"
"awvSetOrigin(
w_windowId
l_origin
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the axis origin of a subwindow to a new location. This function takes effect only when the waveform display is in the composite mode with only one Y axis displayed.")
("awvSetPlotStyle"
"awvSetPlotStyle(
w_windowId
S_style
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the plotting style for all the waveforms in a subwindow. If the plotting style is bar and the display mode is smith, then the plotting style is ignored until the display mode is set to strip or composite.")
("awvSetSmithModeType"
"awvSetSmithModeType(
w_windowId
t_type
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the Smith display mode type for a subwindow. The display mode type takes effect only when the subwindow is set to fs.")
("awvSetSmithXLimit"
"awvSetSmithXLimit(
w_windowId
l_minMax
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Set the X axis display limits for a subwindow with a Smith display mode. This command does not take effect if the display mode is set to strip or composite.")
("awvSetSmithYLimit"
"awvSetSmithYLimit(
w_windowId
l_minMax
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Set the Y axis display limits for a subwindow with a Smith display mode. This command does not take effect if the display mode is set to strip or composite.")
("awvSmithAxisMenuCB"
"awvSmithAxisMenuCB() 
=> t / nil"
"Displays the Axes (Smith Plot) Option Menu.")
("awvSetUpdateStatus"
"awvSetUpdateStatus(
w_windowId
g_enable
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Turns the update status of a subwindow on or off. If the update status is off, the subwindow display does not change when you tell the Waveform window to update the results.")
("awvSetWaveformDisplayStatus"
"awvSetWaveformDisplayStatus(
w_windowId
x_waveIndex
g_enable
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Turns the display of a curve on or off based on the value of the g_enable flag. You can use this function to hide a curve without deleting it.")
("awvSetWaveNameList"
"awvSetWaveNameList( 
list( list(trace_id1 trace_id2 ...) 
list(name1 name2 ...)
)
=> t / nil"
"Sets the names of the list of waveform curves returned by the awvGetWaveNameList function.")
("awvSetXAxisLabel"
"awvSetXAxisLabel(
w_windowId
g_label
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Lets you specify an X axis label to replace the automatically computed label.")
("awvSetXLimit"
"awvSetXLimit(
w_windowId
l_minMax
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the X axis display limits for a subwindow. This command does not take effect if the display mode is set to Smith.")
("awvSetXScale"
"awvSetXScale(
w_windowId
t_scale
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the display mode of the X axis in a subwindow. This command does not take effect if the display mode is set to Smith.")
("awvSetYAxisLabel"
"awvSetYAxisLabel(
w_windowId
x_yNumber
g_label
[ ?subwindow			x_subwindow ]
[ ?stripNumber			x_stripNumber ]
)
=> t / nil"
"Lets you specify a Y axis label to replace the automatically computed label.")
("awvSetYLimit"
"awvSetYLimit(
w_windowId
x_yNumber
l_minMax
[ ?stripNumber			x_stripNumber ]
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Sets the Y axis display limits for the waveforms associated with a particular Y axis and strip in a subwindow. If you do not specify x_stripNumber, the limits are applied when the subwindow is in composite mode.")
("awvSetYRange"
"awvSetYRange(
w_windowId
x_yNumber
n_range
[ ?subwindow			x_subwindow ]
[ ?stripNumber			x_stripNumber ]
)
=> t / nil"
"Sets the range for the Y axis.")
("awvSimplePlotExpression"
"awvSimplePlotExpression(
w_windowId
t_expr
l_context
g_replace
[ ?expr			l_dispExprList ]
[ ?subwindow			x_subwindow ]
[ ?yNumber			l_yNumberList ]
[ ?stripNumber			l_stripNumberList ]
[ ?showSymbols			l_showList ]
[ ?lineStyle			l_styleList ] 
[ ?color			l_colorlist ] 
[ ?lineThickness 	l_thicknessList ]
)
=> t / nil"
"If g_replace is set to t, this function evaluates the t_expr expression and gives the resulting waveforms the lowest numbers already assigned to existing curves.")
("awvTableSignals"
"awvTableSignals(
l_siglist
[ ?plotStyle t_plotStyle ]
[ ?graphModifier t_graphModifier ])
=> t / nil"
"Displays a signal in the table window.")
("awvUpdateAllWindows"
"awvUpdateAllWindows() 
=> t / nil"
"Updates the display of all the Waveform Windows.")
("awvUpdateWindow"
"awvUpdateWindow( 
w_windowId 
) 
=> t / nil"
"Updates the display of all subwindows whose update-statuses are turned on.")
("awvZoomFit"
"awvZoomFit( 
w_windowId
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Returns the traces to its original size to fit in the window.")
("awvZoomGraphX"
"awvZoomGraphX( 
w_windowId
l_minMax
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Zooms in or out the graph according to the specified X-axis (independent axis) coordinates.")
("awvZoomGraphY"
"awvZoomGraphY( 
w_windowId
l_minMax
[ ?stripNumber x_stripNumber ]
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Zooms in or out the graph according to the specified Y-axis (dependent axis) coordinates.")
("awvZoomGraphXY"
"awvZoomGraphXY( 
w_windowId
l_xminMax
l_yminMax
[ ?stripNumber			x_stripNumber] 
[ ?subwindow			x_subwindow ]
)
=> t / nil"
"Zooms in or out the graph according to the specified X- and Y-axis coordinates.")
("awvGetSubwindowTitle"
"awvGetSubwindowTitle( 
w_windowId 
[ ?subwindow w_subwindow ]
) 
=> t_subwindow / nil"
"Returns the title of the subwindow.")
("awvGetWindowTitle"
"awvGetWindowTitle( 
w_windowId 
) 
=> t_window / nil"
"Returns the title of the waveform window.")
("awvGetXAxisMajorDivisions"
"awvGetXAxisMajorDivisions(
w_windowId 
[ ?subwindow w_subwindow ]
) 
=> x_majdivs / nil"
"Returns the number of major divisions that are set on the X-axis of a given graph.")
("awvGetXAxisMinorDivisions"
"awvGetXAxisMinorDivisions(
w_windowId 
[ ?subwindow w_subwindow ]
) 
=> x_mindivs / nil"
"Returns the number of minor divisions on the X-axis of a given graph.")
("awvGetXAxisStepValue"
"awvGetXAxisStepValue(
w_windowId 
[ ?subwindow w_subwindow ]
) 
=> x_stepSize / nil"
"Returns the step size value for the X-axis for a given graph.")
("awvGetXAxisUseStepValue"
"awvGetXAxisUseStepValue(
w_windowId 
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Determines whether the X-axis scale uses the step value.")
("awvSetXAxisMajorDivisions"
"awvSetXAxisMajorDivisions
w_windowId 
x_numMajDiv
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the number of major divisions on the X-axis for the specified graph.")
("awvSetXAxisMinorDivisions"
"awvSetXAxisMinorDivisions(
w_windowId 
x_numMinDiv
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the number of major divisions on the X-axis for the specified graph.")
("awvSetXAxisStepValue"
"awvSetXAxisStepValue(
w_windowId 
x_stepValue
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the step value for a X-axis for the specified graph.")
("awvSetXAxisUseStepValue"
"awvSetXAxisUseStepValue(
w_windowId 
g_value
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Specifies whether the step size value is to be used on the X-axis scale.")
("awvGetYAxisMajorDivisions"
"awvGetYAxisMajorDivisions(
w_windowId
x_yNumber
[ ?subwindow w_subwindow ]
) 
=> x_majdivs / nil"
"Returns the number of major divisions that are set on the Y-axis of a given graph.")
("awvGetYAxisMinorDivisions"
"awvGetYAxisMinorDivisions(
w_windowId 
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> x_mindivs / nil"
"Returns the number of minor divisions on the specified Y-axis of a given graph.")
("awvGetYAxisStepValue"
"awvGetYAxisStepValue(
w_windowId 
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> x_stepSize / nil"
"Returns the step size value for the specified Y-axis for a given graph.")
("awvGetYAxisUseStepValue"
"awvGetYAxisUseStepValue(
w_windowId 
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Determines whether the Y-axis scale use the step value for the specified strip in a given graph.")
("awvSetYAxisMajorDivisions"
"awvSetYAxisMajorDivisions(
w_windowId 
x_yNumber
x_numMajDiv
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the number of major divisions on the X-axis for the specified graph.")
("awvSetYAxisMinorDivisions"
"awvSetYAxisMinorDivisions(
w_windowId 
x_yNumber
x_numMajDiv
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the number of major divisions on the specified Y-axis for the specified graph.")
("awvSetYAxisStepValue"
"awvSetYAxisStepValue(
w_windowId 
x_yNumber
x_stepValue
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Sets the step value for the specified Y-axis for the specified graph.")
("awvSetYAxisUseStepValue"
"awvSetYAxisUseStepValue(
w_windowId 
x_yNumber
g_value
[ ?stripNumber x_stripNumber ]
[ ?subwindow w_subwindow ]
) 
=> t / nil"
"Specifies whether the step size value is to be used on the Y-axis scale.")
("OT"
"OT (
t_instName
t_paramName
)
=>o_waveform / nil"
"Returns the specified device parameter of the given instance from the transient analysis data.")
("OS"
"OS (
t_instName
t_paramName
)
=>o_waveform / nil"
"Returns the specified device parameter of the given instance from the DC analysis data.")
("pvrfreq"
"pvrfreq(
s_ana
t_pos
t_neg
t_res
[ freq x_freq ]
)
=> o_waveform / nil"
"Returns the spectral power at a specified frequency or at all frequencies with the resistor and voltage on the given positive and negative nodes.")
("pvifreq"
"pvifreq(
s_ana
t_pos
t_neg
t_branch1
t_branch2
[ freq x_freq ]
)
=> o_waveform / nil"
"Returns the spectral power from voltage and current for a specified frequency list or at all frequencies.")
("firstVal"
"firstVal(
o_waveform
)
=> n_value / nil"
"Returns the first value from where the waveform starts on the X-axis.")
("lastVal"
"lastVal(
o_waveform
)
=> n_value / nil"
"Returns the last value at which the waveform ends on the X-axis.")
("valueAt"
"valueAt(
o_waveform
n_xValue
[ ?extrapolate g_extrapolate ]
)
=> n_yValue / nil"
"Returns the Y-axis value of a given waveform at the specified X-axis value.")
("eyeMask"
"eyeMask(
o_waveform
t_xUnit
[ @rest l_vertices ]
)
=> o_waveform / nil"
"Creates a custom eye mask on the given eye diagram at the specified units and vertices.")
("eyeMaskViolationPeriodCount"
"eyeMaskViolationPeriodCount(
o_eyeMaskWf
)
=> n_periods / nil"
"Returns the number of periods that contains an eye mask violation.")
("eyeBERLeft"
"eyeBERLeft(
o_waveform
n_start
n_end
n_period
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Calculates the left-side bit-error rate curve for the specified eye diagram.")
("eyeBERRight"
"eyeBERRight(
o_waveform
n_start
n_end
n_period
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Calculates the right-side bit-error rate curve for the specified eye diagram.")
("eyeBERLeftApprox"
"eyeBERLeftApprox(
o_waveform
n_start
n_end
n_period
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Estimates the left-side bit-error rate curve for the input eye diagram beyond the output of eyeBERLeft by tail-fitting the left-side cross distribution.")
("eyeBERRightApprox"
"eyeBERRightApprox(
o_waveform
n_start
n_end
n_period
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Estimates the right-side bit-error rate curve for the input eye diagram beyond the output of eyeBERRight by tail-fitting the right-side cross distribution.")
("rdbLoadResults"
"rdbLoadResults(
t_sessionName
t_resultsDir
) => t / nil"
"Loads the simulation results located at resultsDir into the browser associated with the specified sessionName.")
("rdbReloadResults"
"rdbReloadResults(
t_sessionName 
t_resultsDir) 
=> t / nil"
"Re-loads the simulation results located at resultsDir into the browser associated with the specified sessionName. It is desirable to reload results during the successive simulation runs.")
("rdbUnloadResults"
"rdbUnloadResults(
t_sessionName 
t_resultsDir
) 
=> t / nil"
"Unloads the simulation results located at resultsDir from the browser associated with the specified sessionName. It is desirable to unload results during the successive simulation runs to reduce resource consumption and remove clutter from the browser.")
("rdbSetCurrentDirectory"
"rdbSetCurrentDirectory(
t_sessionName 
t_path
) 
=> t / nil"
"The Results Browser associated with the specified sessionName navigates to the directory specified by path.")
("rdbWriteToFormat"
"rdbWriteToFormat(
t_sessionName 
t_path
t_format 
l_signals
) 
=> t / nil"
"Outputs the specified signals from the browser associated with the specified sessionName.")
("rdbShowDialog"
"rdbShowDialog(
t_sessionName 
t_path 
t_format 
signals
) 
=> t / nil"
"Display and hides dialog boxes associated with the browser.")
("vvDisplayBrowser"
"vvDisplayBrowser()
=> t / nil"
"Invokes the Results Browser within a window.")
("vivaInitBindkeys"
"vivaInitBindkeys()"
"Initializes the Virtuoso Visualization and Analysis XL bindkeys called from viva.ini context initialization file.")
("awviEditMenuCB"
"awviEditMenuCB() 
=> t / nil"
"Callback for the Expressions->Edit menu in the Results Display window. It brings up the Expressions Edit form.")
("awviMakeActiveMenuCB"
"awviMakeActiveMenuCB()
=> t / nil"
"Callback for the menu Window->Make Active in the Results Display window. It makes current window the active print window.")
("awviPLoadMenuCB"
"awviPLoadMenuCB()
=> t / nil"
"Callback for the menu Window->Load State in the Results Display window. It loads a saved state of print window.")
("awviPSaveMenuCB"
"awviPSaveMenuCB()
=> t / nil"
"Callback for the menu Window->Save State in the Results Display window. It saves the current state of print window.")
("awviPUpdateMenuCB"
"awviPUpdateMenuCB()
=> t / nil"
"Callback for the Window->Update Results menu in the Results Display window. It updates the data using the current window setup.")
("awviShowOutputMenuCB "
"awviShowOutputMenuCB()
=> t / nil"
"Callback for the menu Info->Show Output in the Results Display window. It displays the expressions printed in the print window.")
("appendWaves"
"appendWaves( 
o_wave1 
o_wave2 
[ o_waveN ] 
) 
=> o_waveform / nil"
"Appends a series of input waveforms in the X vector direction into a single output waveform.It is the users responsibility to insure that the input waveforms X vectors are in the proper sequence.")
("waveVsWave"
"waveVsWave(
[ ?x o_wavex ]
[ ?y o_wavey ]
[ ?xName t_xName ]
[ ?xUnits g_xUnits ]
[ ?yName t_yName ]
[ ?yUnits g_yUnits ]
) 
=> o_waveform / nil"
"Creates an output waveform where its Y vector values are the Y vector values of the ?y input waveform and its X vector values are the Yvector values of the ?x input waveform. When the specified input waveforms have different X-axes, this function performs the interpolation. You can also use this function to compare the Y-axis of a family of waveforms with the Y-axis of a single-leaf waveform.")
("armSetCalc"
"armSetCalc( 
s_name 
g_value ) 
=> g_value"
"Sets the calculator resource of the specified property to the specified value.")
("calCalculatorFormCB"
"calCalculatorFormCB(
[ ?bBoxSpec t_bBoxSpec ]
[ ?iconPosition t_iconPosition ]
) 
=> t / nil"
"Opens a new calculator window, if not already open. If the window is open, it activates the window and brings it in the focus.")
("calCalcInput"
"calCalcInput(
isl_keyword 
[ t_expression ]
)"
"The calCalcInput function manipulates the buffer and stack contents and enters arbitrary expressions into the buffer. The syntax of this function and a brief description of the arguments and valid keywords is given below.")
("calCreateSpecialFunction"
"calCreateSpecialFunction( 
[ ?formSym s_formSym ]
[ ?formInitProc s_formInitProc ]
[ ?formTitle t_formTitle ]
[ ?formCallback t_formCallback ]
[ ?envGetVal t_envGetVal ]
) 
=> t / nil"
"Encapsulates the initialization and display of forms required for a special function.")
("calCreateSpecialFunctionsForm"
"calCreateSpecialFunctionsForm( 
s_formSym 
l_fieldList 
) 
=> t"
"Registers the form and calls an hiCreateForm to create the form. The form title and callback are specified through the call to calCreateSpecialFunction.")
("calGetBuffer"
"calGetBuffer() 
=> t_buffer"
"Gets the expression constructed in the calculator buffer.")
("calSetBuffer"
"calSetBuffer(
t_buffer
) 
=> nil"
"Sets the contents of the calculator buffer.")
("calSetCurrentTest"
"calSetCurrentTest(
t_testName
) 
=> t / nil"
"Informs the calculator of the current test. When an access function (such as vt) is used from the calculator, it will display the schematic associated with the current test.")
("caliModeToggle"
"caliModeToggle() 
=> t / nil"
"Toggles the algebraic or RPN specific buttons on the calculator form based on the current value of the `calculator mode'.")
("caliRestoreDefaultWindowSize"
"caliRestoreDefaultWindowSize() 
=> t / nil"
"Restores the original size of the calculator form window while maintaining the same upper left coordinate of the current window position.")
("calRegisterSpecialFunction"
"calRegisterSpecialFunction( 
l_sfinfo 
t_sfname
s_sfcallback
) 
=> l_sfinfo / nil"
"Registers the specified special function information if it is not already registered.")
("calSpecialFunctionInput"
"calSpecialFunctionInput( 
t_sfname 
l_fields 
) 
=> t_expression / nil"
"Checks the buffer and stack and processes the arguments defined under l_fields into the buffer expression.")
("expr"
"expr( 
var 
expr 
l_values 
) 
=> o_waveform / nil"
"Evaluates the expression by setting each of the values in the `l_values' list to the `var' variable in the `expr'.")
("famEval"
"famEval( 
l_expression 
[ t_va1 ]
[ s_value1 ]
) 
=> o_result"
"Evaluates the expression with the sweep variables set as specified. A waveform or a number is returned.")
("vvDisplayCalculator"
"vvDisplayCalculator(
[ t_expr ]
)
=> t / nil"
"Invokes the calculator within a window. If an expression is specified, the expression is displayed in the buffer.")
("adtFFT"
"adtFFT(
l_list
)
=> l_result / nil"
"Calculates the fast Fourier transform (FFT) of the input list.")
("adtIFFT"
"adtIFFT(
l_list
)
=> l_result / nil"
"Calculates the inverse discrete Fourier transform of the input list.")
("topLine"
"topLine(
o_waveform
)
=> n_value / nil"
"Returns the topline value of the specified transient waveform.")
("baseLine"
"baseLine(
o_waveform
)
=> n_value / nil"
"Returns the baseline value of the specified transient waveform.")
("topBaseLine"
"topBaseLine(
o_waveform
)
=> l_list / nil"
"Returns the topline and baseline values of a given transient waveform.")
("leafValue"
"leafValue(
o_waveform
)
=> n_value / nil"
"This function is used as a wrapper function around the value function, which simplifies the value function syntax and also removes errors that may occur when you send an expression from Calculator to ADE outputs.")
("swapSweep"
"swapSweep(
o_waveform
t_sweepVar
[ ?xValue n_xValue ]
)
=> o_waveform / nil"
"Swaps the X-axis value with the specified sweep variable.")
("rfEdgePhaseNoise"
"rfEdgePhaseNoise(
[ ?result t_result ]
[ ?eventList l_eventList ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform | nil"
"Plots the instantaneous phase noise, conversion of jitter to phase noise, spectrum plots related to jitter. It is a direct plot function.")
("rfInputNoise"
"rfInputNoise(
t_unit 
[ ?result t_noiseResultName ]
)
=> o_waveform / nil"
"Returns the input noise waveform. This command is run on the results of the Spectre pss-pnoise and hb-hbnoise analyses.")
("rfOutputNoise"
"rfOutputNoise(
t_unit 
t_noiseResultName
[ ?noiseConvention t_noiseConventionType ]
)
=> o_waveform / nil"
"Returns the input noise waveform. This command is run on the results of the Spectre pss-pnoise and hb-hbnoise analyses.")
("rfTransferFunction"
"rfTransferFunction(
t_unit 
[ ?result t_noiseResultName ]
) 
=> o_waveform / nil"
"Returns the transfer function waveform. This function is run on the results of the Spectre pss-pnoise and hb-hbnoise analysis.")
("numConv"
"numConv(
t_inNum
t_format
g_needPrefix
)
=> t_outNum / nil"
"Description")
("busTransition"
"busTransition(
o_waveform
t_yFrom
t_yTo
[ n_nth ]
[ t_xName ]
)
=> t_nth / t_lastNth / t_allXvalue / nil"
"Return the time when a bus value is changed from one specified value to another specified value.")
("aaSP"
"aaSP(
n_portOrder1
n_portOrder2
[ dataDirectory t_dataDirectory ]
)
=> o_waveform / nil"
"Returns the S-parameter waveform for a two-port network for the specified portorder values. The S-parameters describe the response of an N-port network to voltage signals at each port.")
("rfJitter"
"rfJitter(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?signalLevel t_signalLevel ]
)
=> value / o_waveform / nil"
"Calculates jitter from the result of Pnoise sample (jitter) analysis. It is used to calculate Jee, JDelay, and RMS Phase Noise.")
("rfJc"
"rfJc(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
)
=> value / o_waveform / nil"
"Calculates cycle jitter from the result of Pnoise sample (jitter) analysis.")
("rfJcc"
"rfJcc(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
)
=> value / o_waveform / nil"
"Calculates cycle-to-cycle jitter from the result of Pnoise sample (jitter) analysis.")
("rfThresholdXing"
"rfThresholdXing(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Calculates the threshold crossing value according to the jitter event time from the result of Pnoise or Hbnoise sample (jitter) analysis.")
("rfWrlsCim3Value"
"rfWrlsCim3Value(s_probe) 
=> f_cim3 / nil"
"Returns the value of third-order counter-intermodulation (CIM3).")
("rfWrlsCim5Value"
"rfWrlsCim5Value(s_probe) 
=> f_cim5 / nil"
"Returns the value of fifth-order counter-intermodulation (CIM5).")
("rfWrlsMeasContour"
"rfWrlsMeasContour(
t_sig 
[ ?maxValue n_maxValue ]
[ ?minValue n_minValue ]
[ ?numCont n_numCont ]
[ ?closeCont g_closeCont ]
[ ?modifier t_modifier ]
)
=> n_family / nil"
"Returns the contours for the measurements of simulation results.")
("rfWrlsCcdfValues"
"rfWrlsCcdfValues( 
t_sig 
)
=> o_waveform / f_avgPower / f_peakPower / nil"
"Plots the CCDF curve or returns the average or peak power from the results of an ENVLP wireless simulation.")
("rfCimMcpValue"
"rfCimMcpValue(s_probe) 
=> f_power / nil"
"Returns the main channel power value when counter-intermodulation (CIM) is selected in LTE symbol.")
("rfGetMinDampFactor"
"rfGetMinDampFactor() 
=> n_result / nil"
"Returns the lowest damping ratio for the loops identified in the Loop Finder (LF) analysis.")
("rfGetEventtimeIndex"
"rfGetEventtimeIndex(
t_signal
t_resultName
t_index
)
=> x_number / nil"
"Returns the event time of a signal for the specified index value.")
("eyeHeightAtXY"
"eyeHeightAtXY( 
o_eyeDiagram 
f_x
f_y
)
=> f_eyeHeight / nil"
"Calculates the eye height at the specified point (x,y) inside the eye diagram. Eye height is the difference of two intercepts made with the innermost traces of the eye in the Y-axis direction.")
("eyeWidthAtXY"
"eyeWidthAtXY( 
o_eyeDiagram 
f_x
f_y
)
=> f_eyeWidth / nil"
"Calculates the eye width at the specified point (x,y) inside the eye diagram. Eye width is the difference of two intercepts made with the innermost traces of the eye in the X-axis direction.")
("triggeredDelay"
"triggeredDelay(
o_signal1
o_signal2
n_thresh1
s_edgeType1
n_thresh2
s_edgeType2
[ ?multiple g_multiple]
[ ?nth x_nth]
[ ?periodicity x_periodicity]
[ ?tol1 n_tol1]
[ ?tol2 n_tol2]
[ ?xName s_xName]
)
=> o_waveform / n_value / nil"
"Calculates the delay from the trigger point on the edge of a triggering signal to the next edge of the target signal.")
("mu"
"mu(
o_s11
o_s12
o_s21
o_s22
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the origin of the unit Smith chart and the load unstable region.")
("muC"
"Mu(
t_dataDir
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the origin of the unit Smith chart and the load unstable region.")
("muprime"
"mu_prime(
o_s11
o_s12
o_s21
o_s22
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the center of the unit Smith chart and the source unstable region.")
("muprimeC"
"Mu_prime(
t_dataDir
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the center of the unit Smith chart and the source unstable region.")