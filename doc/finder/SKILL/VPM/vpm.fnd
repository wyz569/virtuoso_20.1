;SKILL Language Functions
("vpmDefinePowerSwitchInstance"
"vpmDefinePowerSwitchInstance(
t_cellName
t_instName
g_type 
g_stage1Enable 
[ ?stage2Enable g_stage2Enable ]
[ ?stage1Output g_stage1Output ]
[ ?stage2Output g_stage2Output ]
[ ?power g_power ]
[ ?powerSwitchable g_powerSwitchable ]
[ ?ground g_ground ]
[ ?groundSwitchable g_groundSwitchable ]
)
=> t / nil"
"Registers transistor instances as power or ground switches.")
("vpmExportDotLib"
"vpmExportDotLib(
x_session_id
t_file_dot_lib
)
=> t / nil"
"Exports the extracted power intent in the .lib file format.")
("vpmExportPowerIntent"
"vpmExportPowerIntent(
x_session_id
t_file_1801
)
=> t / nil"
"Exports the 1801 Design Model for a design. Ensure that the design has been extracted by using vpmExtractPowerIntent or the GUI options in Virtuoso Schematic Editor. This function requires a session ID, which is generated upon successful power intent extraction for the design.")
("vpmExportPowerModel"
"vpmExportPowerModel(
x_sessionID
t_output_file_name
)
=> t"
"Exports the 1801 power model for a design. Ensure that the design has been extracted by using vpmExtractPowerIntent, or using the GUI options in Virtuoso Schematic Editor. This function requires a session ID, which is generated upon successful power intent extraction for the design.")
("vpmExportPowerIntentSetup"
"vpmExportPowerIntentSetup(
t_setup_file_name
[ ?overwriteExisting g_overwriteExisting ]
[ ?filter g_filter ]
[ ?lpDBLibName g_lpDBLibName ]
[ ?lpDBCellName g_lpDBCellName ]
[ ?lpDBViewName g_lpDBViewName ]
)
=> t / nil"
"Exports the loaded setup to a specified file. This file can be verified for the setup options that the Power Manager has used during import/export of power intent.")
("vpmExtractPowerIntent"
"vpmExtractPowerIntent(
t_lib
t_cellName
t_viewName
)
=> session_id / nil"
"Extracts the power intent from the given design. It also identifies sub-hierarchical blocks in the top-level design, which need macro model extraction or are associated with a 1801 file.")
("vpmGenerateSigInfo"
"vpmGenerateSigInfo(
t_libName
t_cellName
t_viewName
t_sigInfoFilePath
)
=> session_id / nil"
"Adds the signal type and voltage values for all the canonical nets in the design. If a design net spans across multiple levels in the hierarchy, the net at the highest level of the hierarchy is considered as canonical.")
("vpmImportPowerIntent"
"vpmImportPowerIntent(
t_libname
t_cellname 
t_viewname
t_viewlist
t_file1801Path
[ ? resolveTopNets g_resolveTopNets ]
)
=> t / nil"
"Imports the power intent for any cellview. Apart from this, in the design hierarchy, the SKILL function creates the netSet properties and resolves tie connections. It also creates supply pins corresponding to the power domain nets and global nets.")
("vpmImportPowerIntentSetup"
"vpmImportPowerIntentSetup(
t_libname
t_cellname 
t_viewname
t_setup_file_name
[ ? lpDBLibName g_lpDBLibName ]
[ ? lpDBCellName g_lpDBCellName ]
[ ? lpDBViewName g_lpDBViewName ]
)
=> t / nil"
"Imports a SKILL file that contains the user-defined setup. This has the attributes required to extract the desired information from the design cellview for importing or exporting the power intent.")
("vpmLoadInDesignViolations"
"vpmLoadInDesignViolations(
t_libname
t_cellname 
t_viewname
t_vdbFilePath
)
=> t / nil"
"Loads the specified violation database file that contains the violation details for a previous check on a design. As the SKILL function processes each violation from the violations file, it creates markers on relevant design objects. For details, refer to Loading the Violations Database.")
("vpmRemoveImportedPowerIntent"
"vpmRemoveImportedPowerIntent(
t_libName
t_cellName
t_viewName
)
=> t_viewlist/ nil"
"Removes the entire power intent information that was imported for a cellview. This function also removes the netSet properties, tie connections, supply pins, and so on.")
("vpmRemovePowerSwitchInstance"
"vpmRemovePowerSwitchInstance(
t_cellName
t_instName
)
=> t / nil"
"Removes registered transistor instances as power or ground switches.")
("vpmRunInDesignChecks"
"vpmRunInDesignChecks(
t_libName
t_cellName
t_viewName
[ ?lprcFilePath t_lprcFilePath ]
[ ?vdbFilePath g_vdbFilePath ]
)
=> t / nil"
"Runs the In-Design Checks on a design specified by library, cell, and view.")
("vpmSetInDesignBrowserOptions"
"vpmSetInDesignBrowserOptions(
w_window
t_openMode
t_openLocation
x_hierarchyDepth
[ ?hierarchicalScope b_hierarchicalScope ]
=> t / nil"
"Sets the Annotation Browser options for viewing the design violations.")