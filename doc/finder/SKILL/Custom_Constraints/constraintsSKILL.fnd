;SKILL Language Functions
("ciAddHierarchicalNotes"
"ciAddHierarchicalNotes( 
t_libName
t_cellName
t_viewName
[ g_hierarchical ]
)
=> t / nil"
"Adds notes to the templates and constraints for a single cellview or all along the hierarchy beginning from the given cellview.")
("ciAddLeadingSlash"
"ciAddLeadingSlash( 
t_name
[ ?skipEmpty g_skipEmpty ]
)
=> t_name"
"Adds a forward slash (/) to the beginning of the passed string if it does not already have one.")
("ciAddProcessRules"
"ciAddProcessRules( 
d_Id
l_rules
[ t_parameterType ]
)
=> t / nil"
"Adds the specified process rules to the front of the rules associated with the given object.")
("ciAddRuleGroup"
"ciAddRuleGroup( 
[ d_techID | d_cellViewID ]
t_name
)
=> t / nil"
"Creates an oaConstraint group, with a given name, for technology or design files.")
("ciAddTrailingSlash"
"ciAddTrailingSlash( 
t_name
[ ?skipEmpty g_skipEmpty ]
)
=> t_name"
"Adds a forward slash (/) to the end of the passed string if it does not already have one.")
("ciAllCellViewsInHierarchy"
"ciAllCellViewsInHierarchy( 
d_cellViewDBId
[ t_pathToCurrentCellView ]
[ t_pathFilter ]
[ t_depth ]
[ s_predicate ]
)
=> list / nil"
"Returns a list of disembodied property lists containing the path and database ID of each cellview in the hierarchy, or to a specific depth starting from a given cellview and path to that cellview.")
("ciAxisCreate"
"ciAxisCreate( 
u_cache
t_axisName
[ l_parameterList ]
)
=> t / nil"
"Creates a new axis.")
("ciAxisDelete"
"ciAxisDelete( 
u_cache
t_axisName
[ g_forceDelete ]
)
=> t / nil"
"Deletes an axis from the specified cache.")
("ciAxisExists"
"ciAxisExists( 
u_cache
t_axisName
)
=> t / nil"
"Returns t (true) if the named axis exists in the cache. Access to axes is only provided through the axis name. No direct reference to an axis object is provided.")
("ciAxisListCon"
"ciAxisListCon( 
u_cache
t_axisName
)
=> u_constraint / nil"
"Lists all the constraints that are attached to a given axis.")
("ciAxisListParams"
"ciAxisListParams( 
u_cache
t_axisName
[ g_includeDefaults ]
)
=> parameterList / nil"
"Lists the parameters associated with an axis.")
("ciAxisReplaceParams"
"ciAxisReplaceParams( 
u_cache
t_axisName
l_parameterList
)
=> t / nil"
"Replaces all axis constraint parameters with a new set of parameters.")
("ciCacheCallbackRegister"
"ciCacheCallbackRegister( 
l_callbackPropList
)
=> t / nil"
"Registers a callback.")
("ciCacheCallbackUnregister"
"ciCacheCallbackUnregister( 
l_callbackPropList
)
=> t / nil"
"Unregisters a previously registered callback.")
("ciCacheCallbackUpdate"
"ciCacheCallbackUpdate( 
l_callbackPropList
)
=> t / nil"
"Updates a registered callback.")
("ciCacheCellName"
"ciCacheCellName( 
u_cache
)
=> t_cellName"
"Returns the cell name of the specified constraint cache. The cache library, cell, and view refers to the schematic, configuration, physical configuration, or layout view that the constraint cache is associated with.")
("ciCacheConstraintCellName"
"ciCacheConstraintCellName( 
u_cache
)
=> t_cellName"
"Returns the constraint cell name of the specified constraint cache. The constraint library, cell, and view refers to the storage location of the constraints, which might be a constraint view or layout.")
("ciCacheConstraintLibName"
"ciCacheConstraintLibName( 
u_cache
)
=> t_libName"
"Returns the constraint library name of the specified constraint cache. The constraint library, cell, and view refers to the storage location of the constraints, which might be a constraint view or layout.")
("ciCacheConstraintViewName"
"ciCacheConstraintViewName( 
u_cache
)
=> t_viewName"
"Returns the constraint view name of the specified constraint cache. The constraint library, cell, and view refers to the storage location of the constraints, which might be a constraint view or layout.")
("ciCacheDiscardEdits"
"ciCacheDiscardEdits( 
u_cache
)
=> u_cache / nil"
"Discards changes made to the constraint cache in the memory and returns a new constraint cache ID. This function does not apply to layout constraint caches.")
("ciCacheFind"
"ciCacheFind( 
d_dbCellViewId | t_libName t_cellName t_viewName
)
=> u_cache / nil"
"Finds an existing constraint cache for a given design specified using library, cell, and view names. Alternatively, pass the dbCellViewId of the required design.")
("ciCacheGet"
"ciCacheGet( 
d_dbCellViewId | t_libName t_cellName t_viewName
)
=> u_cache / nil"
"Finds an existing constraint cache. If it cannot find an existing cache, it creates and populates a cache for the given design, using library, cell, and view names. Alternatively, pass the dbCellViewId of the required design.")
("ciCacheGetAllNetNames"
"ciCacheGetAllNetNames( 
g_cache
[ ?expandNames g_expandNames ]
)
=> l_result"
"Returns a sorted list of all the net names in the cellview associated with the constraints cache. By default, the iterated net names are expanded.")
("ciCacheGetCellView"
"ciCacheGetCellView( 
g_cache
)
=> d_cellviewID / nil"
"Returns the cellview associated to the specified cache.")
("ciCacheGetEnabledNotifications"
"ciCacheGetEnabledNotifications( 
)
=> t_listNotifications / nil"
"Returns a list of cache notifications that ciCacheNotifications enabled.")
("ciCacheIsLayout"
"ciCacheIsLayout( 
g_cache
)
=> t / nil"
"Returns t if the passed cache is a layout cache.")
("ciCacheIsModified"
"ciCacheIsModified( 
u_cache
)
=> t / nil"
"Checks whether a constraint cache has been modified.")
("ciCacheIsWritable"
"ciCacheIsWritable( 
u_cache
)
=> t / nil"
"Checks whether a constraint cache is writable.")
("ciCacheLCV"
"ciCacheLCV( 
u_cache
)
=> l_libCellViewNames"
"Returns a list containing the library, cell, and view names of the specified constraint cache. The cache library, cell, and view refers to the schematic, configuration, physical configuration, or layout view that the constraint cache is associated with.")
("ciCacheLibName"
"ciCacheLibName( 
u_cache
)
=> t_libName"
"Returns the library name of the specified constraint cache. The cache library, cell, and view refers to the schematic, configuration, physical configuration, or layout view that the constraint cache is associated with.")
("ciCacheListAxesNames"
"ciCacheListAxesNames( 
u_cache
)
=> t_axesNames / nil"
"Lists all axes names in a cache. Access to axes is only provided through the axis name, no direct reference to an axis object is provided.")
("ciCacheListCon"
"ciCacheListCon( 
u_cache
[ g_includeOutOfContext ]
)
=> l_constraintList / nil"
"Lists all the constraints from a given cache.")
("ciCacheListConstrainedObjects"
"ciCacheListConstrainedObjects( 
u_cache
[ g_includeOutOfContext ]
)
=> l_designObjectList / nil"
"Lists the name and type of all constrained objects.")
("ciCacheListConstrainedObjectNames"
"ciCacheListConstrainedObjectNames( 
u_cache
[ g_includeOutOfContext ]
)
=> l_objectNameList / nil"
"Lists the names of the constrained objects (without the type of object).")
("ciCacheListTemplates"
"ciCacheListTemplates( 
u_cache
[ t_templateType ]
)
=> l_templateIdList / nil"
"Lists all templates, of an optional given type, from a cache.")
("ciCacheListTypeNames"
"ciCacheListTypeNames( 
u_cache
)
=> l_constraintTypeList / nil"
"Lists all the names of the constraint types that are legal for the given cache.")
("ciCacheListTypes"
"ciCacheListTypes( 
u_cache
)
=> l_constraintTypeList / nil"
"Lists all constraint types in a cache.")
("ciCacheMakeEditable"
"ciCacheMakeEditable( 
u_cache
)
=> u_cache / nil"
"Reopens the constraint cache for edit and returns a new constraint cache ID. This function does not apply to layout constraint caches.")
("ciCacheMakeReadOnly"
"ciCacheMakeReadOnly( 
u_cache
)
=> u_cache / nil"
"Reopens the constraint cache in read-only mode and returns a new constraint cache ID. Any in modifications to the memory are discarded. This function does not apply to layout constraint caches.")
("ciCacheNeedRefresh"
"ciCacheNeedRefresh( 
u_cache
)
=> t / nil"
"Checks if the constraint cache has changed on the disk and needs to be refreshed.")
("ciCacheNotifications"
"ciCacheNotifications( 
s_enable
l_notifications
)
=> t / nil"
"Enables or disables notifications related to the constraint cache. This function helps CAD teams in debugging.")
("ciCachep"
"ciCachep( 
g_value
)
=> t / nil"
"Checks if an object is a valid constraint cache ID.")
("ciCachePurge"
"ciCachePurge( 
u_cache
)
=> t / nil"
"Purges a constraint cellview from virtual memory.")
("ciCacheSave"
"ciCacheSave( 
u_cache
)
=> t / nil"
"Saves a constraint cellview.")
("ciCacheTopCellName"
"ciCacheConstraintCellName( 
u_cache
)
=> t_cellName"
"Returns the top cell name of the specified constraint cache. The top library, cell, and view refers to the schematic or layout cellview. If the cache is associated with a configuration or physical configuration, it is the top cell specified by the configuration.")
("ciCacheTopLibName"
"ciCacheTopLibName( 
u_cache
)
=> t_libName"
"Returns the top library name of the specified constraint cache. The top library, cell, and view refers to the schematic or layout cellview. If the cache is associated with a configuration or physical configuration, it is the top cell specified by the configuration.")
("ciCacheTopViewName"
"ciCacheTopViewName( 
u_cache
)
=> t_viewName"
"Returns the top view name of the specified constraint cache. The top library, cell, and view refers to the schematic or layout cellview. If the cache is associated with a configuration or physical configuration, it is the top cell specified by the configuration.")
("ciCacheTransfer"
"ciCacheTransfer(
u_fromCache
u_toCache
?conTypes s_conTypes
)
=> t / nil"
"Transfers constraints from the source cache to the specified target cache. The transfer can be restricted to constraints of a specified type. It cannot be used to transfer constraints between two schematics or two layouts.

Note: Before you run ciCacheTransfer, ensure that the schematic and layout windows are open in XL or a higher tier.")
("ciCacheTransferSelection"
"ciCacheTransferSelection( 
u_fromCache
u_toCache
)
=> t / nil"
"Transfers the selected constraints and templates from the source cache to the target cache in a session run in XL or above tier. If there are no selected constraints in the source cache, all the constraints and templates from the source cache are transferred to an editable target cache. When a constraint is transferred, the template within which it exists is also transferred along with all the other constraints inside the template.

Note: Before you run ciCacheTransferSelection, ensure that the schematic and layout windows are open in XL or above tier. The Constraint Manager assistant should also be open in the window from where the constraints need to be transferred.")
("ciCacheViewName"
"ciCacheViewName( 
u_cache
)
=> t_viewName"
"Returns the view name of the specified constraint cache. The cache library, cell, and view refers to the schematic, configuration, physical configuration, or layout view that the constraint cache is associated with.")
("ciCheckConstraints"
"ciCheckConstraints( 
d_cellViewID
)
=> t / nil"
"Runs the constraint checker on the passed schematic or layout cellview if the cellview contains constraints.")
("ciCombineInstNetsPins"
"ciCombineInstNetsPins( 
l_instsNetsPins
)
=> l_result"
"This function is used within Circuit Prospector constraint generator expressions to turn a list of sub-lists into a single simple list. When the instsNetsPins information is represented as a list of sub-lists there is one sub-list each for instances, nets, pins, and instTerms. In addition, this function effectively flattens the sub-lists to leave a combined list of all the instances, nets, pins, and instTerms without sub-lists. The flattened list is in a form suitable to be used as the member list for ciConCreate.")
("ciConAppendOneMember"
"ciConAppendOneMember( 
u_constraint
l_member
)
=> t / nil"
"Appends one constraint member to the given contstraint. The new member is added in the last position in the member list.")
("ciConBaseName"
"ciConBaseName( 
t_constraintName
)
=> baseName"
"Extracts and returns the basename from the specified constraint name. A constraint name consists of the basename and the counter added as a suffix. For example, in the constraint name, myConstraint_2, the basename is myConstraint and the counter is _2.")
("ciConCallbackIsRegistered"
"ciConCallbackIsRegistered( 
?name t_name
?type t_type
)
=> t / nil"
"Checks whether a constraint callback has been registered.

See also ciConRegisterCallback, ciConUnregisterCallback, and ciConUpdateCallback.")
("ciConCreate"
"ciConCreate( 
u_cache
d_constraintType
[ ?members l_memberList ]
[ ?params l_parameterList ]
[ ?name g_constraintName ]
[ ?axis g_axisName ]
[ ?note g_constraintNote ]
[ ?verbose g_verbose ]
)
=> u_constraint / nil"
"Creates a new constraint.")
("ciConCreateExpanded"
"ciConCreateExpanded( 
u_cache
d_constraintType
[ ?members l_memberList]
[ ?params l_parameterList ]
[ ?name t_constraintName ]
[ ?axis t_axisName ]
[ ?note g_constraintNote ]
[ ?verbose g_verbose ]
)
=> l_constraints / nil"
"Expands vector names into groups of vector bit names in a constraint specific manner (when a constraint's member list contains vector names). Constraints are then created for each vector bit name grouping.")
("ciConDelete"
"ciConDelete( 
u_constraint
)
=> t / nil"
"Deletes a constraint. After deleting the constraint, the u_constraint will be invalid.")
("ciConFind"
"ciConFind( 
u_cache
t_constraintName
)
=> u_constraint / nil"
"Finds a constraint in a given cache.")
("ciConGetAxisName"
"ciConGetAxisName( 
u_constraint
)
=> t_axisName / nil"
"Returns, for a given constraint, the axis name if one is associated with the given constraint.")
("ciConGetCache"
"ciConGetCache( 
u_constraint
)
=> cache_ID"
"Returns the constraint cache that contains the given constraint.")
("ciConGetComment"
"ciConGetComment( 
u_constraint
)
=> t_comment / nil"
"Returns the comment parameter of a constraint.")
("ciConGetCreatedTime"
"ciConGetCreatedTime( 
u_constraint
)
=> constraint_created_time / nil"
"Returns the created time of a constraint.")
("ciConGetMembersOfType"
"ciConGetMembersOfType( 
g_con
s_type
)
=> l_filteredList"
"Returns the constraint member list filtered by the passed member type.")
("ciConGetName"
"ciConGetName( 
u_constraint
)
=> t_constraintName"
"Returns the name of a constraint.")
("ciConGetNote"
"ciConGetNote( 
u_constraint
)
=> t_note / nil"
"Returns the note parameter of a constraint.")
("ciConGetOwner"
"ciConGetOwner( 
u_constraint
)
=> l_lcv / nil"
"Returns the library name, cell name, and view name of the cell where the passed constraint was created.")
("ciConGetPriority"
"ciConGetPriority( 
u_constraint
)
=> x_priority"
"Returns the priority value of a constraint.")
("ciConGetStatus"
"ciConGetStatus( 
u_constraint
)
=> symbol / nil"
"Returns the status of a constraint.")
("ciConGetType"
"ciConGetType( 
u_constraint
)
=> s_constraintTypeName"
"Returns the constraint type symbol.")
("ciConIsInContext"
"ciConIsInContext( 
u_constraint
)
=> t / nil"
"Returns the current context status of a constraint.")
("ciConIsOutOfContext"
"ciConIsOutOfContext( 
u_constraint
)
=> t / nil"
"Returns the current of context status of a constraint.")
("ciConIsOverridden"
"ciConIsOverridden( 
u_constraint
)
=> t / nil"
"Returns whether a constraint has been overridden.")
("ciConIsWritable"
"ciConIsWritable( 
u_constraint
)
=> t / nil"
"Returns whether the constraint is writable.")
("ciConListMembers"
"ciConListMembers( 
u_constraint
[ g_includeParameters ]
[ g_includeDefaults ]
)
=> l_memberList / nil"
"Returns a list of constraint members and their member parameters, if any.")
("ciConListMemberNames"
"ciConListMemberNames( 
u_constraint
)
=> l_memberList / nil"
"Returns a list of strings where each string is a constraint member name. This function will only return member names as opposed to ciConListMembers which returns tuples containing member names and types.")
("ciConListParams"
"ciConListParams( 
u_constraint
[ g_includeDefaults ]
)
=> l_parameterList / nil"
"Returns all parameters for a constraint.")
("ciConListParamNames"
"ciConListParamNames( 
u_constraint
)
=> l_parameterNames / nil"
"Returns the legal parameter names for a given constraint.")
("ciConListTemplates"
"ciConListTemplates( 
u_constraint
)
=> l_templateList / nil"
"Returns the list of templates of which the given constraint is a member.")
("ciConp"
"ciConp( 
g_value
)
=> t / nil"
"Checks if an object is a valid constraint ID.")
("ciConRegisterCallback"
"ciConRegisterCallback( 
?name t_name
?type t_type
)
=> t / nil"
"Registers a constraint callback.

See also ciConCallbackIsRegistered, ciConUnregisterCallback, and ciConUpdateCallback.")
("ciConRemoveMembers"
"ciConRemoveMembers( 
u_constraint
l_memberList
)
=> l_memberList / nil"
"Removes a list of members from a constraint.")
("ciConResetAllParams"
"ciConResetAllParams( 
u_constraint
)
=> t / nil"
"Resets all parameters on a constraint to their default values. Parameters can only be reset if the constraint view is currently writable.")
("ciConResetParams"
"ciConResetParams( 
u_constraint
[ l_parameterNameList ]
)
=> t / nil"
"Resets a list of parameters to their default values.")
("ciConSetAxis"
"ciConSetAxis( 
u_constraint
t_axisName
)
=> t / nil"
"Associates a given constraint with the named axis. If the constraint does not accept an axis, nil is returned, and if the axis does not exist it will be created.")
("ciConSetNote"
"ciConSetNote( 
u_constraint
t_note
)
=> t / nil"
"Replaces the note parameter of a constraint.")
("ciConSetPriority"
"ciConSetPriority( 
u_constraint
x_priorityValue
)
=> t / nil"
"Sets the priority for a constraint.")
("ciConSetStatus"
"ciConSetStatus( 
u_constraint
t_statusSymbol
g_statusValue
)
=> t / nil"
"Sets a given status flag for a constraint.")
("ciConstraintsForType"
"ciConstraintsForType( 
l_constraints
s_conType
)
=> l_filteredConstraints / nil"
"Filters the list of constraints and returns the constraints of the specified type.")
("ciConstraintLCV"
"ciConstraintLCV( 
u_cache
)
=> l_libCellViewNames"
"Returns a list containing the library, cell, and view names of the specified constraint cache. The constraint library, cell, and view refers to the storage location of the constraints, which may be a constraint view or layout.")
("ciConstraintViewLessp"
"ciConstraintViewLessp( 
u_cache1 u_cache2 ...
)
=> t / nil"
"Specifies a predicate function for sorting the constraint caches based on their library, cell, and view names.")
("ciConTypeHasNamedParameter"
"ciConTypeHasNamedParameter( 
t_conType
t_paramName
)
=> t / nil"
"Returns t if the passed constraint type has a parameter with a name matching the passed parameter name.")
("ciConUnregisterCallback"
"ciConUnregisterCallback( 
?name t_name
?type t_type
)
=> t / nil"
"Unregisters a constraint callback.

See also ciConCallbackIsRegistered, ciConRegisterCallback, and ciConUpdateCallback.")
("ciConUpdateCallback"
"ciConUpdateCallback( 
?name t_name
?type t_type
[ ?enabled g_enabled ]
)
=> t / nil"
"Enables or disables a constraint callback.

See also ciConCallbackIsRegistered, ciConRegisterCallback, and ciConUnregisterCallback.")
("ciConUpdateMemberParams"
"ciConUpdateMemberParams(
g_conId
l_memberParams
)
=> t / nil"
"Updates the specified constraint member parameters with the given values without impacting other member parameters.")
("ciConUpdateMembers"
"ciConUpdateMembers( 
u_constraint
l_memberList
)
=> t / nil"
"Used to update members and their parameters by replacing the members with the list contained in l_memberList.")
("ciConUpdateParams"
"ciConUpdateParams( 
u_constraint
[ l_parameterList ]
)
=> t / nil"
"Updates parameter values with those values listed in l_parameterList.")
("ciConUprevCellBoundary"
"ciConUprevCellBoundary( 
d_cellView
)
=> t / nil"
"Converts deprecated boundaryArea and areaUtilization constraints to cellBoundary constraints.")
("ciConVerify"
"ciConVerify( 
{ u_cache [ d_constraintType ] } | { u_constraint }
)
=> t / nil"
"Runs the consistency checker on demand. The behavior of the consistency checker is based on the values provided for each argument.")
("ciConvertNestedNetClassToNetClassHierGroup"
"ciConvertNestedNetClassToNetClassHierGroup( 
g_cacheId
[ S_constraintName ]
)
=> t / nil"
"Converts one or all nested Net Class constraints in a cache to corresponding Net Class Hier Group constraints. The name, members, and parameters of the original nested Net Class constraint remain the same after the conversion.")
("ciCreateFilter"
"ciCreateFilter( 
t_filterName
l_data
)
=> t / nil"
"Defines a filter to show/hide constraints in the Constraint Manager.")
("ciCurrentPathIterator"
"ciCurrentPathIterator( 
d_cellview
t_matchExpr
)"
"Finds the current path structure in Circuit Prospector. It is an iterator function that does not support hierarchy.")
("ciDefaultParamToMatchFilter"
"ciDefaultParamToMatchFilter( 
d_insts
[ t_simulator ]
)
=> l_param2DList / nil"
"The function for the default filter in the Match Subset Editor.")
("ciDeleteModgenTopologies"
"ciDeleteModgenTopologies( 
g_modgen
)
=> t / nil"
"Deletes the database topology objects associated with the specified modgen along with the constraints on those topology objects.

See also ciSetModgenTopology for an example of how to create database topology objects for a modgen.")
("ciDeleteRuleGroup"
"ciDeleteRuleGroup( 
g_constraintGroupPointer
)
=> t / nil"
"Deletes a constraint group.")
("ciDeleteUnreferencedObjects"
"ciDeleteUnreferencedObjects( 
g_constraintGroupPointer
)
=> t / nil"
"Deletes the unreferenced objects.

When a design contains unreferenced objects and you try to create contraints in it, the constraints might be out-of-context. In such a scenario, use this function before you start to create the constraints.")
("ciDesignLCV"
"ciDesignLCV( 
u_cache
)
=> l_libCellViewNames"
"Returns a list containing the library, cell, and view names of the specified constraint cache. The design library, cell, and view refers to the schematic or layout cellview. If the cache is associated with a configuration or physical configuration, it is the top cell specified by the configuration.")
("ciEnableAutoConstraintNotes"
"ciEnableAutoConstraintNotes( 
g_enable
)
=> t / nil"
"Provides an API alternative that allows you to enable or disable auto constraint notes.")
("ciExpandMembers"
"ciExpandMembers( 
l_designObjectList
[ ?compress g_compress ]
)
=> l_designObjectList"
"Expands any iterated or repeated member in the passed member list. For example, MN1<0:2> gets expanded to MN1<0>, MN1<1>, and MN1<2>. 

In the case of net repetitions, such as <*3>inp, by default these get expanded N times as inp, inp, inp. However, if the optional compress argument is set to t, then <*3>inp will be expanded to just inp. The same applies to net bundles that contain repetitions, such as <*3>inp, a, b, c, inp, inp will by default be expanded to inp, inp, inp, a, b, c, inp, inp but with compress set to t will be expanded to inp, a, b, c.")
("ciExpandName"
"ciExpandName( 
t_iteratedRepeatedBundledName
g_compress
s_type
)
=> l_bitNames"
"This function is used within constraint generators to expand iterated, repeated, and bundled names for instances, nets, and pins into a list of individual bit names. This is necessary if these names are to be used in calls to ciConCreate(). 

As an alternative to calling ciExpandName() and prior to calling ciConCreate(), call ciConCreateExpanded(), which does a default expansion of the iterated, repeated, and bundled names.")
("ciFindOpenCellView"
"ciFindOpenCellView( 
t_libName
t_cellName
t_viewName
t_constraintViewName
)
=> u_cache / nil"
"Returns the open constraint cache for the library, cell, view, and constraint view. If the constraint cache is not already open, this SKILL function returns nil.

See also ciCacheFind that finds the constraint cache based on the constraint viewNameList.

See also ciFindOpenCellViews that allows a wider range of criteria to be matched.")
("ciFindOpenCellViews"
"ciFindOpenCellViews( 
[ ?cacheLib t_cacheLib ]
[ ?cacheCell t_cacheCell ]
[ ?cacheView t_cacheView ]
[ ?designLib t_designLib ]
[ ?designCell t_designCell ]
[ ?designView t_designView ]
[ ?constraintLib t_constraintLib ]
[ ?constraintCell t_constraintCell ]
[ ?constraintView t_constraintView ]
)
=> l_cacheIds / nil"
"Returns a list of open constraint caches that match the criteria specified by the optional keyed arguments. A constraint cache can be associated with the following three views:

1. The cache library, cell, and view refers to the schematic, configuration, physical configuration, or layout view that the constraint cache is associated with.

2. The design library, cell, and view refers to the schematic or layout cellview. If the cache is associated with a configuration or physical configuration, it is the top cell specified by the configuration.

3. The constraint library, cell, and view refers to the storage location of the constraints, which can be a constraint view or layout.")
("ciGetCellTermDefaultNetName"
"ciGetCellTermDefaultNetName( 
t_cellName
t_termName
)
=> t_netName / nil"
"Returns the default net name registered with a terminal for the cell name and terminal name that is passed.")
("ciGetCellView"
"ciGetCellView( 
[ ?window d_window ]
[ ?findOnly g_findOnly ]
[ @rest rest ])
=> u_cache / nil"
"Returns the constraint cellview associated with a schematic or layout window.")
("ciGetCellViewForObjectPath"
"ciGetObjectCellViewObjectPath( 
t_objectFullPathName
t_currentHierPath 
)
=> d_cellviewID / nil"
"Retrieves the cellview ID from the specified path to an object. This function is used within constraint generators.")
("ciGetConnectedInsts"
"ciGetConnectedInsts( 
d_cvID
l_nets
u_constraint
)
=> l_instsNets / nil"
"Finds the instances to which all the nets in a constraint are connected and the corresponding connecting nets on which the constraint can be propagated.")
("ciGetCustomFilterNames"
"ciGetCustomFilterNames( 
)
=> l_filterList / nil"
"Returns a list of registered custom filters (including the Default filter) for the Match Subset Editor.")
("ciGetDefaultNetName"
"ciGetDefaultNetName( 
d_inst
t_termName
)
=> t_netName / nil"
"Returns the default net name registered with a terminal by specifying and an instance ID and a terminal name.")
("ciGetFoundryRules"
"ciGetFoundryRules( 
d_techfile
)
=> oaConstraintGroup / nil"
"Returns the foundry constraint group for the given technology file.")
("ciGetMatchParam2DList"
"ciGetMatchParam2DList( 
d_insts
t_holdername
)
=> l_param2DList / nil"
"Returns a 2D list (name-value pair) of CDF parameters present on the given instances as well as in the given holder list.")
("ciGetMembersOfType"
"ciGetMembersOfType( 
l_instsNetsPins
s_type
[ ?includeType g_includeType ]
[ ?removeLeadingSlash g_removeLeadingSlash ]
[ ?expand g_expand ]
)
=> l_filteredList"
"Filters the instsNetsPins list used by constraint generators to only include members of a specified type. See also, ciConGetMembersOfType.")
("ciGetObjectCellView"
"ciGetObjectCellView( 
t_objectPathAndName
l_cache
)
=> cvID / nil"
"Used within constraint generators to retrieve the cellview associated with a particular object path. This SKILL function is similar to ciGetCellViewForObjectPath, but uses the cellview information associated with the cache if the object path does not contain a hierarchical path.")
("ciGetOpenCellViews"
"ciGetOpenCellViews( 
[ ?includeLayout g_includeLayout ]
)
=> l_cacheIds / nil"
"Returns a list of open constraint caches in the virtual memory.")
("ciGetRuleGroupByName"
"ciGetRuleGroupByName( 
[ d_techfile | d_cellView ]
t_name
)
=> oaConstraintGroup / nil"
"Returns the constraint group from the specified design or technology database with the specified name.")
("ciGetRuleGroupName"
"ciGetRuleGroupName( 
g_constraintGroupPointer
)
=> oaConstraintGroup / nil"
"Returns the string name of a constraint group from a given constraint group pointer.")
("ciGetRuleGroups"
"ciGetRuleGroups( 
[ d_techID | d_cellViewID ]
)
=> oaConstraintGroupList / nil"
"Returns a list of oaConstraintGroup pointers for a given technology or design file.")
("ciGetWidgetProperties"
"ciGetWidgetProperties( 
l_genArgs
)
=> l_widgetProp / nil"
"Returns the widget properties set on the constraint generator arguments, genArgs.")
("ciHasCellAnyRegTerm"
"ciHasCellAnyRegTerm( 
t_cellName
)
=> t / nil"
"Returns information on whether or not the given cell has at least one terminal registered with a default net.")
("ciHaveSameBulkNets"
"ciHaveSameBulkNets(
l_dbId
)
=> t / nil"
"Returns t if the passed list of devices have the same bulk connection.")
("ciHierCompareConstraint"
"ciHierCompareConstraint( 
u_sourceCons
u_targetCache
[ ?paths l_occurrencePaths ]
[ ?recursive g_recursive ]
)
=> constraintComparisons / nil"
"Copies and compares applicable pushed or pulled constraints in the layout hierarchy. The copied constraint members, such as nets, terminals, instance terminals, and so on correspond to the original constraint members as they are physically connected.")
("ciHierCompareConstraints"
"ciHierCompareConstraints( 
u_sourceCache
u_targetCache
[ ?paths l_occurrencePaths ]
[ ?recursive g_recursive ]
)
=> constraintComparisons / nil"
"Compares applicable pushed or pulled constraints in the layout hierarchy. The copied constraint members (nets, terminals, instance terminals, and so on) correspond to the original constraint members because they are physically connected.")
("ciHierUpdateConstraints"
"ciHierUpdateConstraints( 
u_sourceCache
u_targetCache
[ ?paths l_occurrencePaths ]
[ ?recursive g_recursive ]
)
=> t / nil"
"Used in sync with the pushed and pulled constraints with their source constraints. After push or pull the constraint parameters have been modified, you can use this SKILL function to update the pushed or pulled constraints.")
("ciIsNetSuperType"
"ciIsNetSuperType(
t_netType
) 
=> t / nil"
"Tests whether or not the given net type is a super-type.")
("ciLoadConfigXML"
"ciLoadConfigXML( 
t_directoryPathToConfigXML
)
=> g_result"
"Loads the specified constraint config.xml file. In the process, the new entries get merged into the existing config.xml files that have already been loaded and the existing entries are overwritten.

When you start Virtuoso, all config.xml files found in the Cadence Search Path are loaded and merged based on the order in which they are found in the setup.loc file. By using this function, you can load a config.xml on demand after Virtuoso has been started, such as when a design library or PDK is loaded.

See also ciLoadDotCadenceFiles, ciLoadIcon, and ciLoadIcons.")
("ciLoadConfigXMLFromString"
"ciLoadConfigXMLFromString( 
t_configXMLString
)
=> g_result"
"Loads the string representation of a config.xml file. If a new entry does not match an existing entry, the new entry gets added into the config.xml files that have already been loaded. However, if the new entry matches an existing entry, the new entry overwrites the old one.

When you start Virtuoso, all config.xml files found in the Cadence Search Path are loaded and merged based on the order in which they are found in the setup.loc file. By using this function, you can load a config.xml on demand after Virtuoso has been started, such as when a design library or PDK is loaded.

See also ciLoadConfigXML, ciLoadDotCadenceFiles, ciLoadIcon, and ciLoadIcons.")
("ciLoadConstrFrom"
"ciLoadConstrFrom( 
t_sourceCache
t_targetCache
t_mode
)
=> t / nil"
"Loads the constraints from the source cache to the target cache of the same type.")
("ciLoadDotCadenceFiles"
"ciLoadDotCadenceFiles( 
t_pathToDotCadenceDir
[ g_verbose ]
)
=> g_result"
"Loads all constraint-related files within the hierarchy of the specified .cadence directory.")
("ciLoadIcon"
"ciLoadIcon( 
t_iconFilePath
[ g_verbose ]
)
=> g_result"
"Loads a specific PNG format icon file from the specified directory so that it can be used by the Constraint Manager. The file should have a .png extension.")
("ciLoadIcons"
"ciLoadIcons( 
t_iconDirectoryPath
[ g_verbose ]
)
=> g_result"
"Loads all PNG format icon files from the specified directory so that these can be used by the Constraint Manager. The file should have a .png extension.")
("ciListEditors"
"ciListEditors( 
)
=> l_editors / nil"
"Generates a list of the current constraint editors that are available from the Constraint Manager's Constraint Generator toolbar option.")
("ciListTypes"
"ciListTypes( 
)
=> l_types"
"Generates a list of the current definitions for each constraint type in the config.xml files, the name of the constraint, and a list of legal constraint parameters and their default values.")
("ciListProcessRules"
"ciListProcessRules( 
d_Id
[ t_parameterType ]
)
=> process_rules / nil"
"Lists all process rules associated with the given object.")
("ciLxComparisonReport"
"ciLxComparisonReport( 
[ ?layoutCV g_layoutCV ]
[ ?showReport g_showReport ]
[ ?useViewNames g_useViewNames ]
[ ?useTimeStamp g_useTimeStamp ]
[ ?path g_path ]
[ ?filename g_filename ]
)
=> t / nil"
"Prints a comparison report between a layout and its corresponding VLS XL schematic and/or top configuration.")
("ciModgenMergeLayersFromArgs"
"ciModgenMergeLayersFromArgs( 
l_args 
[ ?layersPresetArgName t_layersPresetArgName ]
[ ?mergeLayersArgName t_mergeLayersArgName ]
)
=> t_modgenLayers / null_string"
"Returns a string with the list of layers from a property list, where each layer is separated by a comma.")
("ciModgenListFingerSplitCons"
"ciModgenListFingerSplitCons( 
g_modgen
)
=> l_fingerSplitCons / nil"
"Returns a list of fingerSplit constraints that exist on the passed modgen members. This SKILL function can be used in a template create or check callback function to include the fingerSplit constraints within a template.
Note: The fingerSplit constraints are not visible in the Constraint Manager assistant.")
("ciModgenRefreshStorage"
"ciModgenRefreshStorage( 
g_modgen
)
=> t / nil"
"Reinitializes the internal modgen storage. When the ci SKILL functions are used to update a modgen constraint in layout or the modgen previewer, the internal modgen storage needs to be reinitialized to ensure it is in a consistent state. Modgen constraint updates include adding/removing members, updating parameters, and adding/removing guard rings.")
("ciModgenSplitFingers"
"ciModgenSplitFingers( 
g_cache
g_modgen
l_instsNetsPins
g_split
)
=> l_instsNetsPins"
"Splits or unsplits the device fingers for the instances specified in the instsNetsPins list associated with the passed modgen. When called in a layout view, the physical device instances are split or unsplit and the modgen figGroups are updated accordingly. When called in a schematic view, the finger split information is stored in the schematic constraints cache. This information is used while transferring the schematic constraints to layout, and splitting or unsplitting the instances in layout.")
("ciModgenTemplateFingerSplitPreDestroy"
"ciModgenTemplateFingerSplitPreDestroy( 
g_template
)
=> t / nil"
"Ensures that the split device instance fingers are unsplit and that the modgen figGroup is updated before the specified template is deleted. This high-level function should be used where modgens are contained within templates that control finger splitting on those modgens. To call this function before the template is deleted, it should be registered as the preDestroySymbolName of the template when the template is defined by using ciTemplateCreateDefinition.")
("ciObjectIsInContext"
"ciObjectIsInContext( 
u_cache
t_designObjectName
t_designObjectType
)
=> t / nil"
"Returns the in/out of context status of an object (Boolean value).")
("ciObjectListCon"
"ciObjectListCon( 
u_cache
t_designObjectName
t_designObjectType
)
=> constraintIdList / nil"
"Lists all constraints that refer to a given design object as a member.")
("ciObjectPathAndName"
"ciObjectPathAndName( 
t_objectPathAndName
)
=> l_disembodied_objectPath_objectName"
"This function is used in constraint generators to separate the object path and name from a string. The result is returned as a disembodied property list with properties, such as objectPath and objectName. The objectPath property is a list of strings that represent the full hierarchical path to the object including the objects name.")
("ciOpenCellView"
"ciOpenCellView(
t_libName
t_cellName
t_viewName
t_constraintViewName
t_mode
)
=> u_cache / nil"
"Opens the constraint cache for the library, cell, view, and constraint view in read or edit mode as specified, and returns the constraint cache ID or returns nil if the constraint cache could not be opened. 

ciOpenCellView allows the mode to be specified. However, it does not downgrade the mode to read if the constraint cache is already open in edit mode. In this case, ciReopenCellView can be used to change the mode, if required. 

See also ciCacheGet that finds or opens the constraint cache based on the current constraint viewNameList instead of specifying a particular constraint view.")
("ciOpenPanicCellView"
"ciOpenPanicCellView( 
t_libName
t_cellName
t_viewName
t_constraintViewName
)
=> u_cache / nil"
"Restores the constraint cellview (associated with a schematic cellview) that was saved in panic state, which is when Virtuoso exited unexpectedly, in the hierDesign.oa- file. The restored constraint cellview opens in append mode. You can use the Constraint Manager to view this constraint cellview. This SKILL function returns a cache pointer of the restored constraint cellview. Use this cache pointer as an argument with the ciCacheSave SKILL function to save the restored constraint cellview. You can then open the recovered constraint cellview in the Constraint Manager.")
("ciPrintReport"
"ciPrintReport( 
d_sourceCache
d_targetCache
[ t_fileName ]
[ g_includeDefaultParam ]
)
=> t / nil"
"Generates an HTML report containing constraint differences between two designs.")
("ciPullConstraint"
"ciPullConstraint( 
u_cons
u_targetCache
[ ?paths l_paths ]
[ ?autoTag g_autoTag ]
[ ?recursive g_recursive ]
[ ?update g_update ]
)
=> constraintIdList / nil"
"Copies a single constraint up the layout hierarchy.")
("ciPullConstraints"
"ciPullConstraints( 
u_sourceCache
u_targetCache
[ ?paths l_paths ]
[ ?autoTag g_autoTag ]
[ ?recursive g_recursive ]
[ ?update g_update ]
)
=> constraintIdList / nil"
"Copies all applicable constraints up a layout hierarchy.")
("ciPushConstraint"
"ciPushConstraint( 
u_constraint
[ ?paths l_paths ]
[ ?autoTag g_autoTag ]
[ ?recursive g_recursive ]
[ ?update g_update ]
)
=> constraintIdList / nil"
"Copies a single of constraint down a layout hierarchy.")
("ciPushConstraints"
"ciPushConstraints( 
u_cache
[ ?paths l_paths ]
[ ?autoTag g_autoTag ]
[ ?recursive g_recursive ]
[ ?update g_update ]
)
=> constraintIdList / nil"
"Copies a set of constraints down a layout hierarchy.")
("ciRefreshCellView"
"ciRefreshCellView( 
u_cache
)
=> u_cache / nil"
"Refreshes the constraint cache in the virtual memory with the most current copy from the disk if it has changed.")
("ciRegisterConstraintEditor"
"ciRegisterConstraintEditor( list(nil
'name t_name
'description t_description
'constraintType t_constraintType
'constraintParams l_constraintParams
'editorAvailableExpression t_editorAvailableExpression
'startEditorExpression t_startEditorExpression
'iconName t_iconName
'addToToolbar g_addToToolbar
'templateTypes l_templateTypes
'useForTemplateEdit g_useForTemplateEdit
'useForConstraintCreation g_useForConstraintCreation
'useForConstraintParamEdit g_useForConstraintParamEdit
'editableConstraintParams l_editableConstraintParams
)
=> t / nil"
"Registers a constraint editor with the Constraint Manager assistant and, optionally, adds a button to the Constraint Manager toolbar. This button can be used to open the registered constraint editor. An entry is also added to the Constraint Editor submenu that appears on the Constraint Manager's context-sensitive menu.")
("ciRegisterCustomDeviceFilter"
"ciRegisterCustomDeviceFilter( 
t_name
t_func
)
=> t / nil"
"Registers a custom filter or modifies an existing filter.")
("ciRegisterNetSuperType"
"ciRegisterNetSuperType( 
t_superType
l_subTypes
)
=> t / nil"
"This function creates a net type that automatically includes the names, regular expressions, and predicates registered in other net types. The new net type is known as a super-type, and the net types included in it as sub-types.")
("ciRegTypeBindingParameter"
"ciRegTypeBindingParameter( 
S_typeName
S_paramName
)
=> t / nil"
"Registers a binding parameter for a user-defined constraint type from a config.xml file. The parameter value must match for the constraints of that type to be considered equivalent between schematic and layout. Specifying an empty parameter name string unregisters the binding parameter.")
("ciRemoveConstrainedPinNetsFromRails"
"ciRemoveConstrainedPinNetsFromRails( 
g_cache
)
=> t / nil"
"Deletes any constraints on pins where the net on the pin is also a member of a rail constraint because this is currently not supported by the Analog Placer.")
("ciRemoveHierarchicalNotes"
"ciRemoveHierarchicalNotes( 
t_libName
t_cellname
t_viewname
[ g_hierarchical ]
)
=> t / nil"
"Removes the existing notes from the templates and constraints for a single cellview or all along the hierarchy beginning from the given cellview.")
("ciRemoveLeadingSlash"
"ciRemoveLeadingSlash( 
t_name
)
=> t_name"
"Removes the leading forward slash from a string if it has one.")
("ciRemoveProcessRules"
"ciRemoveProcessRules( 
d_Id
)
=> t / nil"
"Removes all process rules associated with the given object.")
("ciRemoveTrailingSlash"
"ciRemoveTrailingSlash( 
t_name
)
=> t_name"
"Removes the leading forward slash from a string if it has one.")
("ciReopenCellView"
"ciReopenCellView( 
u_cache
t_mode
)
=> u_cache / nil"
"Reopens the constraint view in read or edit mode.

Note: This function does not apply to layout constraint caches.")
("ciReorderAssistants"
"ciReorderAssistants( 
l_newOrder
)
=> t / nil"
"Reorders the listing of Circuit Prospector assistants (categories). The new ordering should be a list of the existing category names in the order that you wish them to appear in the Circuit Prospector category drop-down list.")
("ciResistorArrayUpdateRowColVal"
"ciResistorArrayUpdateRowColVal( 
g_direction
)
=> t"
"Increases or decreases the row and column values of the series or parallel resistor array template that contains the currently selected modgen. If the selected topology orders the resistor devices by Row, the value displayed in the Col field is updated using this function. Conversely, if the selected topology orders the resistor devices by Col, the value displayed in the Row field is updated.")
("ciResolveBulkNet"
"ciResolveBulkNet( 
t_device
l_hierContext
[ ?viewNameList g_viewNameList ]
[ ?stopViewList g_stopViewList ]
)
=> list / nil"
"This function is used with Circuit Prospector finder expressions to retrieve the bulk net on a device and resolves the net to the highest level in the design.")
("ciRunMatchingConstraintsGenerator"
"ciRunMatchingConstraintsGenerator( 
t_strength
d_insts
u_cache
)
=> t / nil"
"This SKILL function is run by the Matching(Strength) constraint generator expression and used to create matching template constraints.")
("ciSelectedConstraints"
"ciSelectedConstraints( 
g_cache
[ ?type s_type]
)
=> l_selectedConstraints"
"Returns a list of selected constraint IDs that are contained in the passed constraints cache.")
("ciSelectedTemplates"
"ciSelectedTemplates( 
g_cache
[ ?type s_type ]
)
=> l_selectedTemplates"
"Returns a list of selected template IDs that are contained in the passed constraints cache.")
("ciSetHaloOptions"
"ciSetHaloOptions( 
)
=> t / nil"
"Invokes a user interface that allows you to set the various constraint visualization options.")
("ciSetHaloPolicy"
"ciSetHaloPolicy( 
t_haloPolicy
)
=> t / nil"
"Sets the policy for object haloing and grouping.")
("ciSetMaxHaloGroupSize"
"ciSetMaxHaloGroupSize( 
x_maxHaloGroupSize
)
=> t / nil"
"Allows the setting of a limit on the number of database objects to be haloed and grouped together when a constraint is selected in the Constraint Manager. The setting of a group size limit is only possible when minDisplay has been set as the halo policy using ciSetHaloPolicy.")
("ciSetModgenTopology"
"ciSetModgenTopology( 
g_modgen
l_newTopology
)
=> t / nil"
"Sets the database topology on the modgen and deletes any pre-existing database topologies.")
("ciSetSymmetricAxes"
"ciSetSymmetricAxes( 
g_cache
)
=> t"
"Where symmetry constraints exist with multiple axes, forces a single axis of symmetry to be the most commonly used axis.")
("ciSigTypeMatchesNetType"
"ciSigTypeMatchesNetType( 
d_net
t_netType
)
=> t / nil"
"This function creates a net predicate that checks whether or not the sigType attribute of a net matches a given net type.")
("ciSimpleName"
"ciSimpleName( 
name_t
type_p
)
=> t_str"
"Expands the passed name and simplifies it (removes duplicates). If the resulting name is a single string then this is returned otherwise the original name string is returned.")
("ciSortedOpenCellViews"
"ciSortedOpenCellViews( 
[ ?includeLayout g_includeLayout ]
)
=> l_cacheIds"
"Returns a list of open constraint caches from ciGetOpenCellViews sorted using ciConstraintViewLessp.")
("ciTemplateAddCons"
"ciTemplateAddCons( 
u_templateId
l_listOfConstraints
)
=> t / nil"
"Adds one or more ci constraints to a ci constraint template.")
("ciTemplateCreate"
"ciTemplateCreate( 
u_cache
t_templateDefinitionName
[ ?name t_name ]
[ ?members l_members ]
[ ?params l_params ]
[ ?userParams t_userParams ]
)
=> templateId / nil"
"Creates a new template.")
("ciTemplateCreateDefinition"
"ciTemplateCreateDefinition(
t_typeName
s_checkSymbolName
s_createSymbolName
[ ?params l_params ]
[ ?acceptsUserParams s_acceptsUserParams ]
[ ?transferSymbolName s_transferSymbolName ]
[ ?preDestroySymbolName s_preDestroySymbolName ]
)
=> t / nil"
"Creates a template definition.")
("ciTemplateCreateExpanded"
"ciTemplateCreateExpanded( 
u_cache
t_templateDefinitionName
[ ?name t_name ]
[ ?members l_members ]
[ ?params g_params ]
[ ?userParams g_userParams ]
[ ?compress g_compress ]
)
=> templateId / nil"
"The same functionality as ciTemplateCreate, but first expands any iterated or repeated members. For example, MN1<0:2> gets expanded to MN1<0>, MN1<1>, and MN1<2>. 

In the case of net repetitions, such as <*3>inp, by default these get expanded N times as inp, inp, inp. However, if the optional compress argument is set to t, then <*3>inp will be expanded to just inp. The same applies to net bundles that contain repetitions. For example <*3>inp,a,b,c,inp,inp will by default be expanded to inp,inp,inp,a,b,c,inp,inp but with compress set to t will be expanded to inp,a,b,c.")
("ciTemplateDefinitionExists"
"ciTemplateDefinitionExists( 
t_templateDefinitionName
)
=> templateId / nil"
"Verifies whether a template definition with a given name exists.")
("ciTemplateDelete"
"ciTemplateDelete( 
d_templateId
)
=> t / nil"
"Deletes given template.")
("ciTemplateDeleteCons"
"ciTemplateDeleteCons( 
u_templateId
l_listOfConstraints
[ s_doDelete t | nil ]
)
=> t / nil"
"This function deletes or removes one or more CI constraints from a CI constraint template.")
("ciTemplateFind"
"ciTemplateFind( 
u_cache
t_templateName
)
=> t / nil"
"Finds template in cache.")
("ciTemplateGetCache"
"ciTemplateGetCache( 
u_templateId
)
=> cache_ID"
"Returns the constraint cache that contains the template.")
("ciTemplateGetComment"
"ciTemplateGetComment( 
u_templateId
)
=> t_templateCommentStatus / nil"
"Returns the comment that shows the template status.")
("ciTemplateGetCreatedTime"
"TemplateGetCreatedTime( 
u_templateId
)
=> x_template_created_time / nil"
"This function returns the creation time of a template, which is the time and date close to a second when the template has been created.")
("ciTemplateGetDefName"
"ciTemplateGetDefName( 
d_templateId
)
=> templateDefinitionName / nil"
"Gets the template definition name.")
("ciTemplateGetName"
"ciTemplateGetName( 
d_templateId
)
=> templateName / nil"
"Gets the template name.")
("ciTemplateGetNote"
"ciTemplateGetNote( 
u_template_id
)
=> t_note / nil"
"Returns the note parameter of a template.")
("ciTemplateGetStatus"
"ciTemplateGetStatus( 
u_templateId
)
=> t_templateStatus / nil"
"Returns the template status.")
("ciTemplateGetType"
"ciTemplateGetType( 
u_template_id
)
=> t_template_type_name / nil"
"Returns the symbolic name of the given template type, such as commonCentroid.")
("ciTemplateListCon"
"ciTemplateListCon( 
d_templateId
)
=> constraintIdList / nil"
"Gets the template constraint list.")
("ciTemplateListParamNames"
"ciTemplateListParamNames( 
u_template_id
)
=> l_paramNames_list / nil"
"Returns a list of template parameter names if the template has a list of parameters in its definition.")
("ciTemplateListParams"
"ciTemplateListParams( 
u_template_id
[ s_includeDefaults_bool ]
)
=> l_paramNames_list / nil"
"Returns a list of template parameter name, type, and value, provided the template has a list of parameters in its definition.")
("ciTemplatep"
"ciTemplatep(
g_value
)
=> t / nil"
"Checks if an object is a valid constraint template ID.")
("ciTemplateResetAllParams"
"ciTemplateResetAllParams(
u_template_id
)
=> t / nil"
"Resets all template parameters to their default values.")
("ciTemplateResetParams"
"ciTemplateResetParams(
u_template_id
l_listOfParamNames
)
=> t / nil"
"Resets one or more template parameters to their default value.")
("ciTemplateSetNote"
"ciTemplateSetNote(
u_template_id
t_note
)
=> t / nil"
"Sets the note parameter of a template.")
("ciTemplateSetStatus"
"ciTemplateSetStatus( 
u_templateId
s_statusSymbol
t_statusComment
)
=> t / nil"
"Sets the template status.")
("ciTemplateSortParamDefs"
"ciTemplateSortParamDefs(
u_template_id
)
=> l_sortedParamDef / nil"
"Sorts parameter definitions of a template type, by name and returns a list of parameter definitions sorted in alphabetical order.")
("ciTemplateUpdateParams"
"ciTemplateUpdateParams(
u_template_id
l_parameter_list
=> t / nil"
"This function updates the parameter values of the listed parameters for templates that have one or more parameter definitions.")
("ciToFloat"
"ciToFloat(
g_value
)
=> f_result"
"Returns a floating point number for the passed value. If the value is a string, then it will be evaluated and the result returned.")
("ciTransferConstraintsInProgress"
"ciTransferConstraintsInProgress(
)
=> t / nil"
"Returns a Boolean to indicate whether constraint transfer is in progress.")
("ciTypeBindingParameter"
"ciTypeBindingParameter(
S_typeName
)
=> S_bindingParam / null_string"
"Returns the name of the registered binding parameter for a constraint type or an empty string if none is registered.")
("ciTypeDefBaseType"
"ciTypeDefBaseType(
S_typeName
)
=> S_baseTypeName"
"Returns the base type of the passed custom constraint type. You can define multiple versions of a custom constraint type in config.xml by assigning a unique constraint type name to different constraint types that all share the same base type name. This allows multiple versions of the same base constraint type to exist at the same time. To return the version number of a constraint type, see ciTypeDefVersion.")
("ciTypeDefVersion"
"ciTypeDefVersion(
S_typeName
)
=> x_version"
"Returns the version number of the passed constraint type. The default version number is 1. Custom constraint types defined through config.xml can specify the version number of the constraint through a version tag.")
("ciTypeHasBindingParameter"
"ciTypeHasBindingParameter(
S_typeName
)
=> t / nil"
"Checks if a binding parameter has been registered for the specified constraint type.")
("ciTypeIsType"
"ciTypeIsType(
S_typeName
)
=> t / nil"
"Checks if the specified typeName is a constraint type name, which may be a built-in type, such as distance, or a user-defined custom constraint type that has been specified in a config.xml file.")
("ciTypeIsUserDefined"
"ciTypeIsUserDefined(
S_typeName
)
=> t / nil"
"Checks if the specified typeName is a user-defined custom constraint type that is specified in a config.xml file.")
("ciTypeListCon"
"ciTypeListCon( 
u_cache
t_constraintType
[ g_includeOutOfContext ]
)
=> l_designObject / nil"
"Lists all the constraints of a given type for a given cache.")
("ciUniqueMembers"
"ciUniqueMembers(
l_memberList
)
=>l_mems"
"This utility function returns the unique members from the specified member list. It is typically used for member lists that can contain repeated member names due to mFactor expansion.")
("ciUnregisterAssistant"
"ciUnregisterAssistant( 
t_assistantName
)
=> t / nil"
"Unregisters a Circuit Prospector assistant (category) that was previously registered using ciRegisterAssistant.")
("ciUnregisterConstraintEditor"
"ciUnregisterConstraintEditor( 
t_constraintEditorName
)
=> t / nil"
"Unregisters a previously registered constraint editor. If the constraint editor appears in the Constraint Manager's Constraint Editors menu, then running this function removes it from the menu list.")
("ciUnregisterNetSuperType"
"ciUnregisterNetSuperType(
t_superType
)
=> t / nil"
"Removes a net super-type, leaving its sub-types intact.")
("ciUnRegisterTerm"
"ciUnregisterTerm( 
t_libName
t_cellName
t_viewName
t_termName
)
=> t / nil"
"Unregisters the terminal of a l/c/v if that terminal has already been registered with a default net.")
("ciUpdateHierarchicalNotes"
"ciUpdateHierarchicalNotes( 
t_libName
t_cellName
t_viewName
[ g_hierarchical ]
)
=> t / nil"
"Updates the existing notes on the templates and constraints for a single cellview or all along the hierarchy beginning from the given cellview.")
("ciUprevEAConstrs"
"ciUprevEAConstrs( 
d_cv
[ u_cache ]
)
=> t / nil"
"Modifies and corrects those constraints in the 610EA (early adopter) release which became obsolete in the full 610 release. Specifically, this command will update any layout structure constraints to be modgen, cluster, or cluster boundary constraints.")
("ciUtilsAddNTimes"
"ciUtilsAddNTimes(
g_val
x_n
t_valFmt
g_addQuotes
t_sep
)
=> x_str"
"This utility function is used in modgen constraint generation for creating a string with repeated values.")
("ciUtilsAddQuotes"
"ciUtilsAddQuotes( 
l_stringList
)
=> t_string"
"This function is used in constraint generation for converting a list of strings into a string where each string in the list will have double quotes when added to the string.")
("ciUtilsBuildString"
"ciUtilsBuildString( 
l_vals 
t_valFmt 
t_sep
)
=> l_string"
"This is a utility function for building a string from a list of values. The values are converted to strings by applying the passed string format and separated by the passed separator.")
("ciUtilsMakeUnique"
"ciUtilsMakeUnique( 
l_objLst
)
=> l_objList"
"This function takes a list of items, which can contain duplicate items and returns a list without any duplicate items.")
("ciUtilsRemoveNils"
"ciUtilsRemoveNils( 
l_vals
)
=> l_vals"
"Removes the nil elements from a list.")
("ciUtilsRepeatNTimes"
"ciUtilsRepeatNTimes( 
g_val 
x_n
)
=> l_vals"
"This is a utility function for creating a list containing a single value repeated the specified number of times.")
("ciUtilsReplaceNils"
"ciUtilsReplaceNils( 
l_items
)
=> l_res"
"This is a utility function for replacing any nil elements in a list with the specified value. See also, ciUtilsRemoveNils and ciUtilsMakeUnique.")
("ciWithinConstraint"
"ciWithinConstraint(
s_conType
g_cache
l_objs
)
=> l_cons"
"Returns the constraints that contain the specified objects as members of the given constraint type.")
("ciActiveSameCellAndSizeIterator"
"ciActiveSameCellAndSizeIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of devices where each sub-list corresponds to two or more active devices that have the same cell and size in the cellview. If the finder match net expression evaluates to nil, the device is ignored.")
("ciAlignPinsOnCellSide"
"ciAlignPinsOnCellSide( 
u_cache
l_memberList
[ ?side t_side ]
)
=> t / nil"
"Generates alignment constraints for pins on the same side.")
("ciAPRCascodeIterator"
"ciAPRCascodeIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"(ICADVM20.1 Only) Iterator for advanced place and route cascoded structures.")
("ciAPRXYInstSymmetricIterator"
"ciAPRXYInstSymmetricIterator( 
d_cellview
t_finderExpr
[ ?trigger g_trigger ]
[ ?likeSchemaSym g_likeSchemaSym ]
)
=> list / nil"
"(ICADVM20.1 EXL Only) Evaluates the finderExpr with the current symmetric pair of objects with common source or drain terminal names that are assigned to L and R local variables. This iterator is customized for the Auto-Device Placement and Routing flow and is used by the Circuit Prospector ADA finders to iterate over all symmetric design instance pairs with common source or drain terminal names, collecting them into symmetric pairs if the result of evaluating the passed expression (finderExpr) is not nil.")
("ciBasicGetParamValue"
"ciBasicGetParamValue( 
d_deviceId
t_paramName
)
=> paramValue / nil"
"This API is similar to ciGetParamValue, except it does not evaluate iPar or pPar expressions. It gets the parameter value of the user defined parameter. The user-defined parameter was mapped to its PDK names by the ciMapParam function.")
("ciBlockResistorArrayIterator"
"ciBlockResistorArrayIterator( 
d_cellview
t_matchExpr
)
=> l_returnedInsts / nil"
"Iterates over all resistor devices in the cellview based on the result of evaluating the passed or matched expression. This function is used by the Block Resistor Array finder of the Circuit Prospector assistant.")
("ciBuildModgenParams"
"ciBuildModgenParams( 
g_cache
l_devInfo
l_pattern
r_nil
l_args
)
=> l_modgenParamsAndMembers"
"Creates modgen parameter and member list. This is a utility function.")
("ciBundleSignalsIterator"
"ciBundleSignalsIterator( 
d_cellView
t_matchExpression
)
=> l_signals / nil"
"Used by the Circuit Prospector assistant to iterate over all named bundle and bus nets. It returns the list of corresponding signals. The signals are grouped according to the result of the match expression. If the match expression evaluates to nil the signal list is ignored.")
("ciCanCGBeUsed"
"ciCanCGBeUsed(
g_ciCon 
t_CGDefName
g_CG
) 
=> t / nil"
"The default callback used by ciSetCMCGSKILLCallbacks when no user-defined function has been specified for determining if a constraint group should be used or not.")
("ciCascodeSeriesCurrentMirrorIterator"
"ciCascodeSeriesCurrentMirrorIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of corresponding devices that match cascode series current mirror structures in the cellview. If the finder match net expression evaluates to nil, the structures are ignored.")
("ciCategoryListFinderNames"
"ciCategoryListFinderNames(
t_categoryName
) 
=> l_finderNames / nil"
"Lists all the finder names for a given category in Circuit Prospector.")
("ciClearNetSuperTypes"
"ciClearNetSuperTypes(
) 
=> t"
"Clears all registered net super-types.")
("ciClusterBoundaryForCluster"
"ciClusterBoundaryForCluster( 
u_cache
l_instances
)
=> l_clusterBoundary / nil"
"Used by the Circuit Prospector assistant as a generator to set a Cluster Boundary constraint to an existing Cluster constraint. The flexibleFlag parameter of the Cluster Boundary is set to 1 (true).")
("ciCommonGateAndSourceIterator"
"ciCommonGateAndSourceIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of corresponding devices that match the common gate and source structures in the cellview. If the finder match net expression evaluates to nil, the structures are ignored.")
("ciCommonGateIterator"
"ciCommonGateIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of corresponding devices that match the common gate structures in the cellview. If the finder match net expression evaluates to nil, the structures are ignored.")
("ciCommonSourceIterator"
"ciCommonSourceIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of corresponding devices that match the common source structures in the cellview. If the finder match net expression evaluates to nil, the structures are ignored.")
("ciCPRegistrationFromLAM"
"ciCPRegistrationFromLAM( 
l_componentTypes
[ ?addNewLines g_addNewLines ]
)
=> t_cpRegistrationString"
"Used in conjunction with ciGetLAMComponentTypes to create a string containing ci registration function calls to register the device, terminal, and parameter mappings specified in a cph.lam file associated with a particular PDK. The device and terminal registrations are needed for the Circuit Prospector finders, iterators, and generators to function with the selected PDK. The returned string can either be evaluated using evalstring() to call the ci registration functions, or the string can be printed out using printf so that the ci registration calls can be placed in a file loaded by the libInit.il file of the PDK.")
("ciCreateRoutePriorityCon"
"ciCreateRoutePriorityCon( 
u_cache
l_instsNetsPins
v_value
)
=> ciCon / nil"
"Used by Circuit Prospector constraint generators to generate routing priority constraints.")
("ciDeviceInfoGetRegisteredParams"
"ciDeviceInfoGetRegisteredParams( 
[ t_deviceTypeName ]
)
=> l_paramNames"
"Returns the parameters registered for the specified device type.")
("ciDeviceInfoGetRegisteredTerminals"
"ciDeviceInfoGetRegisteredTerminals( 
[ t_deviceTypeName ]
)
=> l_terminalNames"
"Returns the terminals registered for the specified device type.")
("ciDeviceInfoRegisterParams"
"ciDeviceInfoRegisterParams( 
{ t_deviceTypeName | 'default | nil }
[ (t_paramName ... t_paramNameN) | 'default | '(nil) ]
)
=> t / nil"
"Registers or unregisters parameters for a device type, such as bjt, mos, and so on.")
("ciDeviceInfoRegisterTerminals"
"ciDeviceInfoRegisterTerminals( 
{ t_deviceTypeName | 'default | nil }
[ (t_terminalName ... t_terminalNameN) | 'default | '(nil) ]
)
=> t / nil"
"Registers or unregisters terminals for a device type, such as bjt, mos, and so on.")
("ciDeviceInfoRegistry"
"ciDeviceInfoRegistry( 
)
=> g_deviceInfo"
"Returns the registry where information about all the device types is stored. This registry is used by ciCollectDeviceInfo.")
("ciDeviceInfoRestoreDefaultParamNames"
"ciDeviceInfoRestoreDefaultParamNames( 
)
=> l_defaultParams"
"Restores device parameters to default parameters.")
("ciDeviceInfoRestoreDefaultTerminalNames"
"ciDeviceInfoRestoreDefaultTerminalNames( 
)
=> l_defaultTerminals"
"Restores device terminals to default terminals.")
("ciDeviceInfoTerminalsAreValid"
"ciDeviceInfoTerminalsAreValid( 
l_terminalNames
)
=> t / nil"
"Checks whether the specified device terminals are valid inputs for ciCollectDeviceInfo.")
("ciEnableAssistant"
"ciEnableAssistant( 
t_assistantName
g_enable
)
=> t / nil"
"Enables or disables a Circuit Prospector assistant (category) so that it is visible/not visible in the list of Circuit Prospector categories.")
("ciEvaluateGeneratorArgs"
"ciEvaluateGeneratorArgs( 
u_cache
t_defaultCGen
l_instNetsPinsTerms
[ ?triggerCBinMode t_triggerCBinMode ]
[ ?argValuesToUpdate l_argValuesToUpdate ]
)
=> l_argumentValues"
"Evaluates the specified constraint generator argument values.")
("ciExpandIteratedDeviceInfo"
"ciExpandIteratedDeviceInfo( 
l_deviceInfo
)
=> l_expandedDeviceInfo"
"Expands any iterated device names in a device information list returned by ciCollectDeviceInfo.")
("ciFindObjectInHier"
"ciFindObjectInHier( 
d_cache
t_objectFullPathName
s_objectType
)
=> dbId / nil"
"Finds the database ID of the specified hierarchical object. This function is used by Circuit Prospector constraint generators.")
("ciGenerateConstraintGroup"
"ciGenerateConstraintGroup(
g_ciCon
t_CGDefName
t_CGName
) 
=> t / nil"
"The default constraint group generation callback used by ciSetCMCGSKILLCallbacks when no user-defined function has been specified.")
("ciGeneratorCheckInstsNetsPinsInstTerms"
"ciGeneratorCheckInstsNetsPinsInstTerms( 
l_instsNetsPins
)
=> t / nil"
"Checks whether the constraint generator has been called with the expected number of instances, nets, pins, and instTerms. This function is used within the constraint generators. If a wrong number of instances, nets, pins, or instTerms have been provided then a warning message will be displayed in the CIW.")
("ciGeneratorForInstSymmetry"
"ciGeneratorForInstSymmetry( 
u_cache
l_insts
)
=> ciCon / nil"
"Used by the Circuit Prospector constraint generators to generate instance symmetry constraints.")
("ciGeneratorForNetSymmetry"
"ciGeneratorForNetSymmetry( 
u_cache
d_nets
)
=> ciCon / nil"
"Used by the Circuit Prospector constraint generators to generate net symmetry constraints.")
("ciGetAction"
"ciGetAction( 
t_actionName
)
=> l_actionAttributes"
"Returns a disembodied property list (DPL) of attributes associated with the specified action name. This function is an alias for the ciGetGenerator function. The purpose of this alias is to emphasize the fact that constraint generator SKILL expressions can do everything possible in SKILL and not just create constraints.")
("ciGetConstraintGroupsEnum"
"ciGetConstraintGroupsEnum( 
g_cache
)
=> l_constraintGroupName"
"Returns a string to be used as an enum variable for selecting the default constraint group to be used by the Pin to Trunk router. The result can be used as the value of an argument for a constraint generator. The resulting enum variable is the same as the one used by the Pin to Trunk GUI of the Modgen Pattern Editor. Consistent with the Modgen Pattern Editor, it sets the default to virtuosoDefaultSetup if that choice is available.")
("ciGetCPSelectedResults"
"ciGetCPSelectedResults( 
u_cache
)
=> l_ciFinderResults / nil"
"Returns a list of finder results selected in Circuit Prospector. Each item in the list is a finder result which contains the list of devices and the finder name.")
("ciGetDeviceBulkTermName"
"ciGetDeviceBulkTermName( 
d_deviceID
)
=> t_terminalName / nil"
"Returns the name of the bulk terminal for the passed device.")
("ciGetDeviceInfo"
"ciGetDeviceInfo( 
d_deviceID
t_deviceTypeName
)
=> list / nil"
"Returns the disembodied property list (DPL) associated with a particular device type.")
("ciGetDeviceNames"
"ciGetDeviceNames( 
t_deviceName
)
=> t_deviceNames / nil"
"Returns all devices registered to the user-defined device name.")
("ciGetDeviceTermName"
"ciGetDeviceTermName( 
d_deviceId
t_termName
)
=> t_deviceTermName / nil"
"Returns the terminal name of a device based on the device database ID and the user-defined parameter termName.")
("ciGetFinder"
"ciGetFinder( 
t_finderName
)
=> l_finderAtributes / nil"
"Returns a disembodied property list (DPL) of attributes associated with the specified finder. This DPL is the same that was used to register the finder using ciRegisterFinder.")
("ciGetFirstDeviceTermName"
"ciGetFirstDeviceTermName( 
d_deviceID
l_termNames
)
=> s_termName / nil"
"Returns the first terminal name on the specified device that matches one of the terminal names specified in the termNames list.")
("ciGetFluidGuardRingDeviceEnum"
"ciGetFluidGuardRingDeviceEnum( 
)
=> t_fluidGuardRingDeviceString"
"Returns a space delimited string of the fluid guard ring devices in the technology file. This string can be used to define an enum for constraint generators that require fluid guard ring device selection.

Also, see ciSetStructArgs and ciRegisterConstraintGenerator.")
("ciGetGenerator"
"ciGetGenerator( 
t_generatorName
)
=> l_generatorAtributes / nil"
"Returns a disembodied property list (DPL) of attributes associated to the specified constraint generator. This DPL is the same that was used to register the constraint generator using ciRegisterConstraintGenerator.")
("ciGetIterator"
"ciGetIterator( 
t_iteratorName
)
=> l_iteratorAtributes / nil"
"Returns a disembodied property list (DPL) of attributes associated to the specified iterator. This DPL is the same that was used to register the iterator using ciRegisterIterator.")
("ciGetLAMComponentTypes"
"ciGetLAMComponentTypes( 
d_cv
t_pdkLibName
[ ?suppressRead g_suppressRead ]
)
=> l_componentTypes"
"Returns a list of the device, terminal, and parameter mappings specified in a cph.lam file associated with a particular PDK. This SKILL function can be used in conjunction with the ciCPRegistrationFromLAM SKILL function to create the device, terminal, and parameter registrations needed for the Circuit Prospector finders, iterators, and generators to function with the selected PDK.")
("ciGetMappedDeviceNames"
"ciGetMappedDeviceNames( 
)
=> l_regdDevices / nil"
"Returns all default device names (fet, nfet, pfet, and BJT) that have been registered using ciRegisterDevice.")
("ciGetNetNames"
"ciGetNetNames( 
t_netType
)
=> (l_netNames | l_regexs | l_predicates) / nil"
"Retrieves the net names, regular expressions and predicates that make up a net type.")
("ciGetNetSubTypes"
"ciGetNetSubTypes(
t_superType
) 
=> l_subTypes / nil"
"Retrieves the sub-types contained in a net super-type.")
("ciGetNetSuperTypes"
"ciGetNetSuperTypes() 
=> l_superTypes"
"Returns the list of registered net super-types.")
("ciGetParamMapping"
"ciGetParamMapping( 
t_paramName
)
=> l_paramNames / nil"
"Returns all the parameters mapped for a given parameter name.")
("ciGetParamName"
"ciGetParamName( 
d_deviceId
t_paramPlaceholderName
)
=> paramName / nil"
"Returns the parameter name of the user-defined parameter that is mapped to the given parameter placeholder name.")
("ciGetParamValue"
"ciGetParamValue( 
d_deviceId
t_parameterPlaceholderName
[ ?path t_path ]
[ ?convertNumberStrings g_convertNumberStrings ]
)
=> paramValue / nil"
"Returns the parameter value for the user-defined parameter that is mapped to the given parameter placeholder name.")
("ciGetParamValueOrDefault"
"ciGetParamValueOrDefault( 
d_obj
t_paramName
g_defValue
[ ?warnUnmapped g_warnUnmapped ]
[ ?warnUnfound g_warnUnfound ]
[ ?aelEnv g_aelEnv ]
)
=> d_paramVal"
"Retrieves the value of the named parameter on the passed database object. The parameter name should have been registered ciMapParam. If the parameter is not found then the default value will be returned.")
("ciGetParamValues"
"ciGetParamValues( 
d_deviceId
l_parameterNames
[ ?path t_path ]
[ ?asDPL g_asDPL ]
)
=> l_paramValues / nil"
"Returns the values of the specified parameters for the specified device. By default, the values are returned as a disembodied property list (DPL), but can also be returned as a simple list.")
("ciGetStructure"
"ciGetStructure( 
t_structureName
)
=> l_structureAtributes / nil"
"Returns a disembodied property list (DPL) of attributes associated to the specified structure. This DPL is the same that was used to register the structure using ciRegisterStructure.")
("ciGetTechFile"
"ciGetTechFile()
=> d_techFile"
"Retrieves the technology file for the current window.")
("ciGetTechMPPNames"
"ciGetTechMPPNames()
=> l_mppNames / nil"
"Returns a list of the MPP names for the current technology file. The MPP names are used in the creation of guard rings.")
("ciGetTermNames"
"ciGetTermNames( 
t_termName
)
=> terminalNames"
"Returns all the terminal names mapped to the user-defined parameter, termName.")
("ciGuardRingForCluster"
"ciGuardRingForCluster( 
u_cache
l_instances
[ ?mppName t_mppName ]
)
=> l_guardRing / nil"
"Used by the Circuit Prospector assistant as a generator to set a Guard Ring constraint to an existing Cluster constraint.")
("ciGuardRingForModgen"
"ciGuardRingForModgen( 
u_cache
l_instances
[ ?mppName t_mppName ]
)
=> l_guardRing / nil"
"Used by the Circuit Prospector assistant as a generator to set a Guard Ring constraint to an existing Modgen constraint.")
("ciHaveSameParamValues"
"ciHaveSameParamValues( 
l_devices
l_paramNames
[ ?path t_path ]
)
=> t / nil"
"Returns t if the specified parameters have the same values on all the passed devices. The parameter names should be the PDK independent parameter names specified using the ciMapParam SKILL command.")
("ciHierarchicalSeriesIterator"
"ciHierarchicalSeriesIterator(
d_cellviewID
t_matchExpression
)
=> l_devices"
"(ICADVM20.1 EXL Only) Returns a list of corresponding devices that match the series structures in the cellview. If the finder match net expression evaluates to nil, the structures are ignored.")
("ciIgnoreDevice"
"ciIgnoreDevice( 
d_device
)
=> t / nil"
"This is a utility function that can be used in finder or constraint generator expressions. It returns t if the passed device should be ignored.")
("ciInstGetSplitFingers"
"ciInstGetSplitFingers( 
u_cache
t_instancePath
)
=> g_split"
"Returns a Boolean value to identify whether the specified instance has been set to use Split Fingers. It can be used by a constraint generator to control how the layout is generated for its member instances.")
("ciInstIterator"
"ciInstIterator( 
d_cellview
t_matchExpr
[ l_hierCellViews ]
)
=> list / nil"
"Used by Circuit Prospector finders to iterate over all design instances, collating them into groups based on the result of evaluating the passed (match) expression.")
("ciInstListSplitFingers"
"ciInstListSplitFingers( 
u_cache
)
=> l_instancePaths"
"Returns the names of the instances that use Split Fingers. It can be used by a constraint generator to control how the layout is generated for its member instances.")
("ciInstSetSplitFingers"
"ciInstSetSplitFingers( 
u_cache
t_instancePath
g_split
)
=> t / nil"
"Specifies whether an instance uses Split Fingers, that is, a separate instance per finger in layout. It can be used by a constraint generator to control how the layout is generated for its member instances.")
("ciInstsNetsPinsFromSelSet"
"ciInstsNetsPinsFromSelSet(
)
=> l_selectedObjList / nil"
"Returns a list of instances, nets, pins, or instTerms (InstsNetsPins) for the current selection.")
("ciInstTermIterator"
"ciInstTermIterator( 
d_cellview
t_finderInstTermExpr
)
=> l_instList / nil"
"Used by the Circuit Prospector to iterate over all design instance terminals in the passed cellview. Instance terminals (instTerms) are grouped together based on the result of evaluating the passed expression (finderInstTermExpr).")
("ciIsDevice"
"ciIsDevice( 
d_deviceId
t_deviceName
)
=> t / nil"
"Checks whether a device belongs to a particular device type.")
("ciIsNet"
"ciIsNet( 
d_netId
t_netType
[ ?regexIgnoreBundles g_regexIgnoreBundles ]
)
=> t / nil"
"Checks whether a particular netId belongs to a particular netType.")
("ciListAllCategoryNames"
"ciListAllCategoryNames(
[ g_includeSeparator ]
[ g_listDisabled ]
) 
=> l_categoryNames"
"Lists all the categories in Circuit Prospector that have been registered by using ciRegisterAssistant. By default, it only lists the enabled assistants.")
("ciListAllFinderNames"
"ciListAllFinderNames()
=> l_finderNames"
"Lists all the finders in Circuit Prospector that have been registered by using ciRegisterFinder.")
("ciListAllGeneratorNames"
"ciListAllGeneratorNames()
=> l_generatorNames"
"Lists all the constraint generators in Circuit Prospector that have been registered by using ciRegisterConstraintGenerator.")
("ciListAllIteratorNames"
"ciListAllIteratorNames()
=> l_iteratorNames"
"Lists all the iterators in Circuit Prospector that have been registered by using ciRegisterIterator.")
("ciListAllStructureNames"
"ciListAllStructureNames(
)
=> l_structureNames"
"Lists all the structures in Circuit Prospector that have been registered by using ciRegisterStructure.")
("ciListGeneratableConstraintGroups"
"ciListGeneratableConstraintGroups(
g_ciCon 
t_CGDefName
) 
=> l_groupNames"
"The default generatable constraint group listing callback used by ciSetCMCGSKILLCallbacks when no user-defined function has been specified.")
("ciMakeHierContext"
"ciMakeHierContext( 
l_currentHierInfo
l_allHierInfo
)
=> disembodied_property_list / nil"
"Used by Circuit Prospector iterators that are required to run on flattened hierarchies. The iterators need to define a local variable, hierContext, to be referenced by finders that use that iterator. This function is used to initialize that local variable.")
("ciMakeObjectInfo"
"ciMakeObjectInfo( 
d_object
l_cvInfo
)
=> l_listObj"
"A utility function for constructing a disembodied property list to be used by Circuit Prospector iterators to return hierarchical path information about the found objects.")
("ciMapParam"
"ciMapParam( 
t_paramPlaceholderName
l_paramMapNameList
)
=> t / nil"
"Maps a parameter placeholder name to the parameter names used in the PDK.")
("ciMapTerm"
"ciMapTerm( 
t_termName
l_termMapNameList
)
=> t / nil"
"Maps the user-defined termName to the terminal names used in the PDK.")
("ciMatchedFingerWidth"
"ciMatchedFingerWidth( 
u_cache
l_instances
)
=> nil"
"Used by the Circuit Prospector assistant as a generator to set a Matched Parameters constraint to the selected instance members.")
("ciMatchedParametersForCurrent_Mirror"
"ciMatchedParametersForCurrent_Mirror( 
u_cache
l_instances
)
=> nil"
"Used the Circuit Prospector assistant as a generator to set Matched Parameters constraints to the selected instance members.")
("ciMatchedParamsForInstanceSymmetry"
"ciMatchedParamsForInstanceSymmetry( 
u_cache
l_instances
)
=> nil"
"Used by the Circuit Prospector assistant as a generator to set Matched Parameters constraints to the selected pair of instance members.")
("ciMatchedParamsForSameSizeInstances"
"ciMatchedParamsForSameSizeInstances( 
u_cache
l_instances
)
=> nil"
"Used by the Circuit Prospector assistant as a generator to set Matched Parameters constraints to the selected instance members.")
("ciMergeParams"
"ciMergeParams( 
l_params
l_paramsToMerge
[ ?overwrite b_overwrite ]
)
=> l_mergedParams"
"Merges two lists of constraint parameters into a single list. By default, if the parameter being merged already exists in the list of parameters, the parameter value will be overwritten with the new value. The optional overwrite parameter can be set to nil to prevent parameter value overwrites.")
("ciModgenForSameCellSizeAndBulk"
"ciModgenForSameCellSizeAndBulk( 
u_cache
l_instances
)
=> l_modgen / nil"
"Used by the Circuit Prospector assistant as a generator to create Modgen constraints on groups of devices that have the same size and bulk connection.")
("ciMOSActiveLoadStructIterator"
"ciMOSActiveLoadStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS active load structures.")
("ciMOSCascodedCurrentMirrorStructIterator"
"ciMOSCascodedCurrentMirrorStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS cascoded current mirror structures.")
("ciMOSCascodedCurrentMirrorStructIterator2"
"ciMOSCascodedCurrentMirrorStructIterator2( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS cascoded current mirror structures, with at least one of the leading pairs being diode connected.")
("ciMOSCascodeIterator"
"ciMOSCascodeIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for MOS cascoded structures.")
("ciMOSCommonGateStructIterator"
"ciMOSCommonGateStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS common gate structures in a design.")
("ciMOSCrossCoupledDifferentialPairStructIterator"
"ciMOSCrossCoupledDifferentialPairStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for a MOS cross-coupled differential pair structure in a design. A MOS cross-coupled differential pair is a pair of MOS transistors that have the GATE of one transistor connected to the DRAIN of the other. The SOURCE of both transistors are connected to each other. By default, the SOURCE of the transistors cannot be connected to a POWER SUPPLY. This behavior can be changed by setting the environment variable crossCoupleDiffPairRequireSourceNotSupply to nil. To revert to the default behavior, set the environment variable back to t.")
("ciMOSCrossCoupledQuadStructIterator"
"ciMOSCrossCoupledQuadStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS cross coupled quad structures in a design.")
("ciMOSCurrentMirrorStructIterator"
"ciMOSCurrentMirrorStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS current mirror structures.")
("ciMOSDifferentialPairStructIterator"
"ciMOSDifferentialPairStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for MOS differential pair structures in a design.")
("ciMOSInverterStructIterator"
"ciMOSInverterStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS inverter structures in a design.")
("ciMOSParallelStructIterator"
"ciMOSParallelStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS parallel structures.")
("ciMOSTransmissionGateStructIterator"
"ciMOSTransmissionGateStructIterator( 
d_cellViewID
t_matchExpression
)
=> l_structuredObjects"
"Iterator for all MOS transmission gate structures.")
("ciNetIterator"
"ciNetIterator( 
d_cellView
t_finderNetExpr
)
=> l_netList"
"Used by the Circuit Prospector assistant to iterate over all design nets, collecting them together into groups based on the result of evaluating the passed expression (finderNetExpr). All nets which have the same finderNetExpr result are grouped together. If the finder match net expression evaluates to nil, then the net is ignored.")
("ciNetNames"
"ciNetNames(t_netType) 
=> l_netNames / nil"
"Returns the list of net names registered for t_netType.")
("ciNetOnTerm"
"ciNetOnTerm( 
d_inst
t_termName
)
=> d_net / nil"
"Utility function used by the Circuit Prospector assistant finders to retrieve the design instance connected to a named instance terminal.")
("ciNetPredicates"
"ciNetPredicates( 
t_netType
)
=> l_predicates / g_predicate / nil"
"Returns the net predicates registered for t_netType.")
("ciNetRegexs"
"ciNetRegexs( 
t_netType
)
=> l_regexs / nil"
"Returns the list of regular expressions registered for t_netType.")
("ciNextConName"
"ciNextConName( 
g_cache
t_prefix
)
=> t_conName"
"Returns the next unique constraint name based on the given constraint name prefix. This function assumes that the constraints have names of the format <prefix><number>.")
("ciNextObjName"
"ciNextObjName( 
l_objectNames
[ ?baseName t_baseName ]
)
=> t_objName"
"Returns the next unique object name based on the given base object name prefix and a list of existing object names. This function assumes the objects have names of the format <baseName><number>.")
("ciNextTemplateName"
"ciNextTemplateName( 
g_cache
t_prefix
)
=> t_templateName"
"Returns the next unique template name based on the given template name prefix. This function assumes the templates have names of the format <prefix><number>.")
("ciNumTermsEQ2"
"ciNumTermsEQ2( 
d_net
)
=> t / nil"
"Utility function used by the Circuit Prospector assistant finders to check if the passed design net Id is connected to two terminals.")
("ciOrientationForModgen"
"ciOrientationForModgen( 
u_cache
l_instances
[ ?restrictTo t_orientation ]
)
=> l_orientation / nil"
"Used by the Circuit Prospector assistant as a generator to set an Orientation constraint to an existing Modgen constraint.")
("ciParallelNetResistorArrayIterator"
"ciParallelNetResistorArrayIterator( 
d_cellview
t_matchExpr
)
=> l_returnedInsts / nil"
"Iterates over all resistor devices, collating them into groups of parallelly-arranged resistors that start and end on the same net. This function is used by the Parallel Net Resistor Array finder of the Circuit Prospector assistant.")
("ciParallelResistorArrayIterator"
"ciParallelResistorArrayIterator( 
d_cellview
t_matchExpr
)
=> l_returnedInsts / nil"
"Iterates over all resistor devices, collating them into groups of parallelly-arranged resistors that are all of the same length when their m-factor and iteration are expanded. This function is used by the Parallel Resistor Array (Length) finder of the Circuit Prospector assistant.")
("ciPinIterator"
"ciPinIterator( 
d_cellView
t_finderPinExpr
)
=> l_pinList"
"Used by the Circuit Prospector assistant finders to iterate over all design pins, collecting them together into groups based on the result of evaluating the passed finder expression (finderPinExpr). All pins which have the same finderPinExpr result are grouped together. If the finderPinExpr evaluates to nil, then the pin is ignored.")
("ciPlacerControlledWellGeneration"
"ciPlacerControlledWellGeneration( 
u_cache
l_instsNetsPins
[ ?wellType t_wellType ]
)
=> nil"
"Used by the Circuit Prospector assistant as a generator to set a placerControlledWell property for each given instance that is registered as a pfet.")
("ciPrintMappedDefaultNetNames"
"ciPrintMappedDefaultNetNames(
)
=> t / nil"
"Returns the default net name registered with a particular terminal. Also returns details of the corresponding lib/cell/view.")
("ciPrintMappedDeviceNames"
"ciPrintMappedDeviceNames(
)
=> t / nil"
"Prints all default device names (for fets, BJTs, and so on) that have been registered using ciRegisterDevice.")
("ciPrintMappedNetNames"
"ciPrintMappedNetNames(
)
=> t / nil"
"Prints all net categories registered using ciRegisterNet.")
("ciPrintMappedParams"
"ciPrintMappedParams(
)
=> t / nil"
"Prints all the parameters mapped by ciMapParam.")
("ciPrintMappedTerminals"
"ciPrintMappedTerminals(
)
=> t / nil"
"Prints all the parameters mapped by ciMapTerm.")
("ciRegisterAction"
"ciRegisterAction( 
l_argList
)
=> t / nil"
"Registers a list of attributes associated with an action and optionally adds the action to the constraints-related context menu, the Constraint Manager assistant's Constraint Menu, or both. This function is an alias for the ciRegisterConstraintGenerator function. The purpose of this alias is to emphasize the fact that constraint generator SKILL expressions can do everything possible in SKILL and not just create constraints.")
("ciRegisterAssistant"
"ciRegisterAssistant( 
l_disembodiedList
)
=> t / nil"
"Registers a new assistant (category) with the Circuit Prospector assistant. Assistants (categories) are groups of related Circuit Prospector finders. A category may represent a set of finders for a particular device type, for example fet, or a category could represent a top down/bottom up constraints flow. Categories can be registered automatically by placing them in a .cadence/dfII/ci/categories directory located on the Cadence File Search Path. The category registration SKILL code should be placed in a file in that directory with an .il extension, for example: .cadence/dfII/ci/categories/myCategory.il.")
("ciRegisterConstraintGenerator"
"ciRegisterConstraintGenerator( list(nil
'name              t_name
'description       t_description
'expression        t_expression
[ 'addToToolbar    g_addToToolbar ]
[ 'args            l_args ]
[ 'callback        t_callbackExpr ]
[ 'iconName        t_iconName ]
[ 'menu            g_menu ]
[ 'precondition    t_preconditionExpr ]
[ 'settings        l_settings ]
[ 'size            l_size ]
[ 'title           t_title ]
[ 'useCGenForEdit  g_useCGenForEdit ]
)
)
=> t / nil"
"Registers a constraint generator with the Constraint Manager and, optionally, will make it available as an entry in the Constraint Creation toolbar drop-down list of the Constraint Manager and in the Generate Constraints list in the context-menu. The constraint generator can then be set as the default generator for a Circuit Prospector finder or used explicitly in the Constraint Manager to create constraints.")
("ciRegisterDefaultNetName"
"ciRegisterDefaultNetName( 
t_deviceCategory
l_lcvNames
t_terminalCategory
t_termName
t_defaultNetName
)
=> t / nil"
"Registers a default net name for the given terminal for either: the cellview of the same category or all lib/cell/view specified.")
("ciRegisterDevice"
"ciRegisterDevice( 
t_deviceName
l_deviceNameMapList
)
=> t / nil"
"Function used by the Circuit Prospector assistant to register a list of fet, nfet, pfet, BJT and passive device names to be used by ciIsDevice.")
("ciRegisterDevicesForPDKCategory"
"ciRegisterDevicesForPDKCategory( 
t_libName
t_categoryName
t_deviceTypeName
)
=> l_regdDevices / nil"
"Calls the ciRegisterDevice function to register all cells of the t_categoryName PDK category in the t_libName library as a device of type, t_deviceTypeName. In addition, the ciRegisterDevicesForPDKCategory function returns the list of devices registered because of the current action. This list does not includes the devices that were registered with the given device type name previously.")
("ciRegisterDynamicParamDef"
"ciRegisterDynamicParamDef( 
s_consTypeName
t_paramTypeName
l_paramDef
)
=> t / nil"
"Registers dynamic parameter definition for a constraint type.

Only a native constraint type can have a set of dynamic parameters in addition to the predefined (static) parameters defined in Virtuoso. Unlike a normal constraint parameter, a user specifies and registers a dynamic parameter definition at run time in SKILL. Dynamic parameter definitions for custom constraint types can be added by creating different definitions of the constraint using config.xml. These definitions can be dynamically loaded using the ciLoadConfigXML or ciLoadConfigXMLFromString function. However, ensure that you must not change the definition while a design is open using a different definition.")
("ciRegisterFinder"
"ciRegisterFinder( 
t_name
t_description
t_iterator
t_expression
t_defaultCGen
)
=> t / nil"
"Registers a new finder with the Circuit Prospector assistant (although the recommended method is to do this using the Edit Finder form). Finders are used by the Circuit Prospector to iterate over a design and collect together groups of instances, nets, and pins that share common characteristics. The finder expression will determine how these objects are grouped together. Finders can be registered automatically by placing them in a .cadence/dfII/ci/finders directory located on the Cadence File Search Path. The finder registration SKILL code should be placed in a file in that directory with an .il extension, for example .cadence/dfII/ci/finders/netTermCountFinder.il.")
("ciRegisterIterator"
"ciRegisterIterator( 
t_name
t_description
t_iteratorFnName
t_expression
t_defaultCGen
g_supportsFlattenedHier
)
=> t / nil"
"Registers a new iterator with the Circuit Prospector assistant (although the recommended method is to do this using the Edit Iterator form). Iterators are used by the Circuit Prospector finders to iterate over the design in a specific way, applying a finder expression which determines how objects are grouped.")
("ciRegisterNet"
"ciRegisterNet( 
t_netType
l_netNameList
[ ?regexNetNames l_regExpressionList ]
[ ?predicate g_predicate ]
)
=> t / nil"
"Registers the net names, regular expressions and predicates that make up a net type. A net belongs to t_netType if its name is one of l_netNameList, or if it matches one of l_regExpressionList, or if g_predicate returns t.")
("ciRegisterNetNames"
"ciRegisterNetNames( 
t_netType
l_netNames
)
=> t / nil"
"Registers a list of net names recognized by ciIsNet().")
("ciRegisterNetPredicate"
"ciRegisterNetPredicate( 
t_netType
g_predicate
)
=> t / nil"
"Registers a net predicate function used by ciIsNet().")
("ciRegisterNetRegexs"
"ciRegisterNetRegexs( 
t_netType
l_Regexs
)
=> t / nil"
"Registers a list of regular expressions recognized by ciIsNet().

A net belongs to t_netType if its name matches any of these expressions.")
("ciRegisterStructure"
"ciRegisterStructure( 
l_propertyList
)
=> t / nil"
"Registers a structure with the Circuit Prospector assistant (although the recommended method is to do this using Capturing New Structures).")
("ciResolveNet"
"ciResolveNet( 
d_netDBid
g_hierContext
[ ?simplify t_simplify ]
)
=> g_resolvedNetInfo / nil"
"Resolves the passed net to the highest equivalent design net. Used by Circuit Prospector finders when run on flattened hierarchies. For example, the Active Common Gate finder.")
("ciRunFinder"
"ciRunFinder( 
t_finderName
t_iteratorFnName
t_finderExpression
t_constraintGenExpr
[ g_iteratorSupportFlatHier ]
[ t_hierScope ]
[ n_depth ]
[ g_cache ]
[ s_predicate ]
)
=> list"
"Runs a Circuit Prospector finder and returns a list of objects grouped according to the finder expression evaluation result. If the depth argument is specified and the hierScope argument is 'depthCellViews, the finder searches only up to the specified depth. If cache is specified, the finder runs on that cache; otherwise, the search results are obtained from the current window. See also ciRegisterFinder and ciRegisterIterator.")
("ciRunFindersAndGenerators"
"ciRunFindersAndGenerators(
g_cache
t_categoryName
[ ?runGenerators g_runGenerators ]
[ ?deleteExisting g_deleteExisting ]
[ ?addHierNotes g_addHierNotes ]
[ ?printFinderResults g_printFinderResults ]
[ ?updateArgsExpr g_updateArgsExpr ]
[ ?triggerCBinMode g_triggerCBinMode ]
)
=> list"
"Runs all the finders and their corresponding generators for the specified constraint cache and Circuit Prospector category. The finders first find all the results and then the constraint generators are ran on those results to create constraints and templates.")
("ciRunGenerator"
"ciRunGenerator(
g_cache
t_cGenName
l_instsNetsPins
[ ?argValuesToUpdate g_argValuesToUpdate ]
[ ?triggerCBinMode g_triggerCBinMode ]
)
=> list"
"Given a constraint cache, a generator name and a list of objects(insts, nets, pins & terminals), the function Runs the specified constraint generator in the given constraint cache for the specified list of objects, that is, instances, nets, pins, and terminals. This function is called by ciRunFindersAndGenerators to run the constraint generator.")
("ciRunPrecondition"
"ciRunPrecondition(
g_cache
t_cGenName
l_instsNetsPins
)
=> l_templates / t / nil"
"Runs all the precondition checks that are needed before a constraint generator can be run.")
("ciSameCellIterator"
"ciSameCellIterator( 
d_cellView
t_finderDeviceExpr
)
=> list"
"Used by the Circuit Prospector to iterate over all design instances with the same master collecting them together into groups based on the result of evaluating the passed expression (finderDeviceExpr). This iterator ensures that the devices within a group have the same master. All devices with the same master, which have the same finderDeviceExpr result, are grouped together. If the finderDeviceExpr evaluates to nil then the device is ignored.")
("ciSeparateInstsNetsPins"
"ciSeparateInstsNetsPins( 
l_instsNetsPins
)
=> l_disembodiedInstsNetsPins"
"Converts the instsNetsPins list into a disembodied property list to allow easier access to the instances, nets, pins, and instTerms in the sub-lists. This function is used within constraint generators.")
("ciSeriesResistorArrayIterator"
"ciSeriesResistorArrayIterator( 
d_cellview
t_matchExpr
)
=> l_returnedInsts / nil"
"Iterates over all resistor devices, collating them into groups of sequentially-arranged resistors that create the longest serial chain between two nets. The serial chain splits at a T-junction point. This function is used by the Series Resistor Array finder of the Circuit Prospector assistant.")
("ciSetCMCGSKILLCallbacks"
"ciSetCMCGSKILLCallbacks( 
t_generateConstraintGroupFunctionName
t_listGeneratableConstraintGroupsFunctionName
t_constraintGroupCanBeUsedFunctionName
)
=> t / nil"
"Controls the constraint groups that are visible in the Constraint Manager.")
("ciSetDefaultConstraintEditor"
"ciSetDefaultConstraintEditor( 
t_ConstraintEditorName
)
=> t / nil"
"Sets the specified editor as the default constraint editor. The change will take effect at the next start-up of the Virtuoso Schematic Editor or Virtuoso Layout Editor. To keep the change persistent on each start-up of Virtuoso, set this function in an initialization file.")
("ciSetStructArgVal"
"ciSetStructArgVal( 
s_structType
t_argName
g_newValue
)
=> g_success"
"Replaces the specified structure argument value with the specified value. This SKILL function can be used to override the default settings for the predefined structures.")
("ciSignalIterator"
"ciSignalIterator( 
d_cellView
t_matchExpression
)
=> l_signals / nil"
"Used by the Circuit Prospector to iterate over all signals in the passed cellview, and return a list of corresponding signals.")
("ciUnexpandDeviceInfo"
"ciUnexpandDeviceInfo( 
l_deviceInfo
[ ?unexpandIterated g_unexpandIterated ]
)
=> l_unexpandedDeviceInfo"
"Contracts any mfactored device names and optionally any expanded iterated device names in a device information list returned by ciCollectDeviceInfo or ciExpandIteratedDeviceInfo. The mfactored device names used in the layout are of the format |<instName>.<mFactorIndx>, such as |MN1.3, and the iterated device names may be schematic device names like MN1<0> or layout device names like |MN1(0). In the layout, the device names may be mfactored and iterated, such as|MN1(3).4.

When a collection of mfactored device names are contracted (for example, |MN1.2, |MN1.3, |MN1.4) a single device will appear in the returned deviceInfo list using the base device name like |MN1, and the mfactor property will be set to the total number of devices that were contracted, in this case 3.")
("ciUnexpandIteratedDeviceInfo"
"ciUnexpandIteratedDeviceInfo( 
l_deviceInfo
)
=> l_unexpandedDeviceInfo"
"Contracts any expanded iterated device names in a device information list returned by ciCollectDeviceInfo or ciExpandIteratedDeviceInfo. The iterated device names may be schematic device names, such as MN1<0>, or layout device names, such as |MN1(0).")
("ciUnregisterConstraintGenerator"
"ciUnregisterConstraintGenerator( 
t_constraintGeneratorName
)
=> t / nil"
"Unregisters a previously registered constraint generator.")
("ciUnregisterIterator"
"ciUnregisterIterator(
t_iteratorFnName
)
=> t / nil"
"Unregisters a Circuit Prospector iterator that was previously registered by using ciRegisterIterator. If successful, the iterator will no longer appear in the Edit Finder list or the Edit Iterator list.")
("ciVariantInfoForFingersAndFingerWidth"
"ciVariantInfoForFingersAndFingerWidth( 
u_cache
l_instsNetsPins
[ ?minFingerWidth t_minWidth ]
[ ?maxFingerWidth t_maxWidth ]
)
=> nil"
"Used by the Circuit Prospector as a generator to set a variantInfo property to each given instance registered as a fet, when the parameter value for the parameter registered as fingerWidth is greater than the given minWidth value, and smaller than the maxWidth value.")
("ciXYInstSymmetricIterator"
"ciXYInstSymmetricIterator( 
d_cellview
t_finderExpr
[ ?trigger g_trigger ]
[ ?likeSchemaSym g_likeSchemaSym ]
)
=> list / nil"
"Evaluates the finderExpr with the current symmetric pair of objects that are assigned to L and R local variables. Used by Circuit Prospector finders to iterate over all symmetric design instance pairs, collecting them into symmetric pairs if the result of evaluating the passed expression (finderExpr) is not nil.")
("ciXYNetSymmetricIterator"
"ciXYNetSymmetricIterator( 
d_cellview
t_finderExpr
[ ?trigger g_trigger ]
[ ?likeSchemaSym g_likeSchemaSym ]
)
=> list / nil"
"Used by Circuit Prospector finders to iterate over all pairs of symmetric nets, collecting them into symmetric pairs if the result of evaluating the passed expression (finderExpr) is not nil.")
("ciXYPinSymmetricIterator"
"ciXYPinSymmetricIterator( 
d_cellview
t_finderExpr
[ ?trigger g_trigger ]
[ ?likeSchemaSym t_likeSchemaSym ]
)
=> list / nil"
"Used by Circuit Prospector finders to iterate over all pairs of symmetric pins, collecting them into symmetric pairs if the result of evaluating the passed expression (finderExpr) is not nil.")
("ciXYSortInsts"
"ciXYSortInsts( 
l_list(dbInstId)
)
=> l_list(dbInstId) / nil"
"Sorts a list of dbInstID, first by their X coordinates and then by their Y coordinates. This will order the instances, from top to bottom and left to right, in terms of where they are located on the canvas.")
("ciXYSymmetricIterator"
"ciXYSymmetricIterator( 
d_cellView
t_finderExpr
)
=> list / nil"
"Evaluates the finderExpr with the current symmetric pair of objects assigned to L and R local variables. The L and R variables can be referenced in the finderExpr. Iterates all pairs of symmetric design instances/pins (objects) collecting them together into symmetric pairs if the result of evaluating the passed expression (finderExpr) is not nil. The Circuit Prospector assistant finders use this function.")
("ciAddStructArg"
"ciAddStructArg( 
s_structType
l_newArg
[ ?afterArgName g_afterArgName ]
)
=> t / nil"
"Adds a new constraint generator argument to the list of existing arguments registered for the passed structType. By default, the argument is appended to the current list of arguments for the structType. Optionally, the new argument can be inserted after the end of the argument or after a existing argument name.")
("ciCollectDeviceInfo"
"ciCollectDeviceInfo( 
g_cache
l_devices
[ ?devParamNames l_devParamNames ]
[ ?devTerminalNames l_devTerminalNames ]
[ ?warnParamUnfound g_warnParamUnfound ]
[ ?warnUnmapped g_warnUnmapped ]
[ ?parents g_parents ]
)
=> devs"
"Returns a disembodied property list containing information collected about the passed devices in the generators instsNetsPins list.")
("ciConvertParamsDPLToParams"
"ciConvertParamsDPLToParams( 
l_paramsDPL
)
=> l_result"
"Converts a disembodied property list of parameter names and values into the list format required for specifying constraint parameters and constraint member parameters. This function is the complement of ciConvertParamsToDPL.")
("ciConvertParamsToDPL"
"ciConvertParamsToDPL( 
l_params
[ ?filter t_filter ]
[ ?noTypesSpec g_noTypesSpec ]
)
=> l_result"
"Converts a constraint parameter list into a disembodied property list of parameter names and values. This function is the complement of ciConvertParamsDPLToParams. Converting the parameter list into a DPL makes it easier to change values in the list.")
("ciConvertToConArg"
"ciConvertToConArg( 
t_guiArg
)
=> l_result"
"Converts a GUI-friendly parameter name (which can contain spaces) into a legal constraint parameter name (must not contain spaces).")
("ciCreateGuardRing"
"ciCreateGuardRing( 
g_cache
g_modgen
l_args
)
=> t_result"
"Default function used by the Rapid Analog Prototype constraint generators for creating guard rings. If the modgen is already associated with a guard ring, ciCreateGuardRing updates the parameters of the existing guard ring.")
("ciCreateModgen"
"ciCreateModgen( 
g_cache
l_instsNetsPins
s_structType
l_args
[ ?createModgenTemplate g_createModgenTemplate ]
)
=> templateID / constraintID"
"A constraint generation utility function, which simplifies the process of generating modgens for specified structure types. This function calls expressions to create the modgen device pattern and guard ring that have been pre-registered for the specified structure type. For example, DiffPair and CurrentMirror.")
("ciCreateModgenDummy"
"ciCreateModgenDummy( 
g_cache 
d_refDev
x_row
x_col
g_abut
[ ?dummyNetToUse x_dummyNetToUse ]
[ ?orient s_orient ]
[ ?dummyParams l_dummyParams ]
[ ?extraParams l_extraParams ]
)
=> l_result"
"A utility function for creating a modgen member parameter for specifying a dummy device.")
("ciCreateModgenForStructure"
"ciCreateModgenForStructure(
g_cache 
l_instsNetsPins
s_structType
l_args
)
=> l_modgen"
"A function performs the same basic function as ciCreateModgen, but does not have the createModgenTemplate argument.")
("ciCreateRoutingLayerEnumString"
"ciCreateRoutingLayerEnumString( 
x_defLayerIndx
)
=> t_result"
"Utility function for creating layer name enums, which will retrieve the list of layer names from the technology file and make layerNumber the default by adding the associated layer name to the end of the list.")
("ciDeleteClusterMembersWithinModgens"
"ciDeleteClusterMembersWithinModgens( 
g_cache
)
=> t"
"A utility function for removing devices from cluster constraints if those devices are also members of a modgen.")
("ciDeleteGuardRing"
"ciDeleteGuardRing( 
g_modgen
)
=> t / nil"
"If the passed modgen constraint has a Guard Ring constraint associated with it then delete it.")
("ciDeleteStructArg"
"ciDeleteStructArg( 
s_structType
t_argName
)
=> t / nil"
"Deletes the named argument from the registered argument list for the passed structType. See also, ciGetStructArgs, ciSetStructArgs, ciRegexReplaceStructArgs, ciAddStructArg, ciReplaceStructArg, and ciGetStructArg.")
("ciDeleteSymmetriesWithinModgens"
"ciDeleteSymmetriesWithinModgens( 
g_cache
)
=> t / nil"
"Removes the devices from symmetry constraints if those devices are also members of a modgen.")
("ciExpandAndRepeatName"
"ciExpandAndRepeatName( 
t_name 
x_numRepetitions 
s_type 
)
=> t / nil"
"Expands iterated device names and repeats the expanded name the required number of times. The repetition is necessary where the iterated device is also M factored.")
("ciExtractRowNumber"
"ciExtractRowNumber( 
t_rowString 
[ ?rowPrefix t_rowPrefix ]
)
=> t / nil"
"Extracts the row number from a string of the form row followed by a rowNumber.")
("ciFindDeviceArraysForDev"
"ciFindDeviceArraysForDev( 
d_dev
)
=> t / nil"
"This function is used for extracting the list of devices which have the same master and are connected in series or parallel chains. This can be used to identify series/parallel resistors/capacitors. The bulk connections of these devices are ignored.")
("ciGenerateArrayChannelDesc"
"ciGenerateArrayChannelDesc( 
g_cache 
l_devInfo 
l_pattern 
args
)
=> t_channelDesc"
"Generates the Pin To Trunk routing information for Passive Device Array structures. This function is called as part of the constraint generation process in the routing expression for Passive Device Array structures which is registered by ciSetStructGeneratorExpressions('PassiveDeviceArray ...).")
("ciGenerateBestFitPattern"
"ciGenerateBestFitPattern( 
l_devInfo 
args
[ ?expandInsts g_expandInsts ]
[ ?forcedRows x_forcedRows ]
)
=> l_pattern"
"Generates the modgen member pattern (interdigitation) information for a Passive Device Array structure. This function is called as part of the constraint generation process in the pattern expression for Passive Device Array structures that are registered by ciSetStructGeneratorExpressions('PassiveDeviceArray ...).")
("ciGenerateCascodedCurrentMirrorChannelDesc"
"ciGenerateCascodedCurrentMirrorChannelDesc( 
g_cache 
l_devInfo 
l_pattern 
args
)
=> t_channelDesc"
"This function is called as part of the constraint generation process and generates the Pin To Trunk routing information for a Cascoded Current Mirror structure. This function is called in the routing expression for Cascoded Current Mirrors structures which is registered by ciSetStructGeneratorExpressions('CascodedCurrentMirror ...).")
("ciGenerateCascodedCurrentMirrorPattern"
"ciGenerateCascodedCurrentMirrorPattern( 
l_devInfo 
args
)
=> l_pattern"
"This function is called as part of the constraint generation process and generates the modgen member pattern (interdigitation) information for a Cascoded Current Mirror structure. This function is called in the pattern expression for Cascoded Current Mirror structures which is registered by ciSetStructGeneratorExpressions('CascodedCurrentMirror ...).")
("ciGenerateCurrentMirrorChannelDesc"
"ciGenerateCurrentMirrorChannelDesc( 
g_cache
l_devInfo
l_pattern
args

)
=> t_channelDesc"
"This function is called as part of the constraint generation process and generates the Pin To Trunk routing information for a Current Mirror structure. This function is called in the routing expression for Current Mirror structures, which is registered by ciSetStructGeneratorExpressions('CurrentMirror ...).")
("ciGenerateCurrentMirrorPattern"
"ciGenerateCurrentMirrorPattern( 
l_devInfo
args

)
=> l_pattern"
"This function is called as part of the constraint generation process and generates the modgen member pattern (interdigitation) information for a Current Mirror structure. This function is called in the pattern expression for Current Mirror structures, which is registered by ciSetStructGeneratorExpressions('CurrentMirror ...).")
("ciGenerateDiffPairChannelDesc"
"ciGenerateDiffPairChannelDesc( 
g_cache 
l_devInfo 
l_pattern 
args
)
=> t_channelDesc"
"This function is called as part of the constraint generation process and generates the Pin To Trunk routing information for a Diff Pair structure. This function is called in the routing expression for Diff Pair structures, which is registered by ciSetStructGeneratorExpressions('DiffPair ...).")
("ciGenerateDiffPairPattern"
"ciGenerateDiffPairPattern( 
l_devInfo 
args
)
=> l_pattern"
"This function is called as part of the constraint generation process and generates the modgen member pattern (interdigitation) information for a Differential Pair structure. This function is called in the pattern expression for Differential Pair structures, which is registered by ciSetStructGeneratorExpressions('DiffPair ...).")
("ciGenerateLargeMfactorPattern"
"ciGenerateLargeMfactorPattern( 
l_devInfo 
args
)
=> l_pattern"
"This function is called as part of the constraint generation process and generates the modgen member pattern (interdigitation) information for a Large Mfactor structure. This function is called in the pattern expression for Large Mfactor structures, which is registered by ciSetStructGeneratorExpressions('LargeMfactor ...).")
("ciGetGuardRing"
"ciGetGuardRing( 
g_modgen
)
=> g_guardRing"
"Returns the guard ring constraint associated with the passed modgen constraint, if it has one.")
("ciGetGuardRingMPPName"
"ciGetGuardRingMPPName( 
d_dev
)
=> t_mppName"
"This function returns the registered technology file Guard Ring MPP name for the passed device based on the device type (nfet or pfet).")
("ciGetParamValFromParameters"
"ciGetParamValFromParameters( 
t_paramName
l_params
[ ?valPos x_valPos ]
)
=> l_val / nil"
"Retrieves the specified parameter value from a constraint parameter list. It can be used to retrieve values of constraint parameters or constraint member parameters.")
("ciGetRoutingLayer"
"ciGetRoutingLayer(
t_layerName
)
=> d_layerId / nil"
"Retrieves the named routing layer from the technology file associated with the current window. See also, ciGetTechFile, ciGetRoutingLayers, techGetLayerNum, techGetLayerMaskNumber, techFindLayer, and techGetLayerFunctions.")
("ciGetRoutingLayers"
"ciGetRoutingLayers(
)
=> l_layerNames"
"Retrieves the names of all the routing layers from the technology file associated with the current window. See also ciGetTechFile, ciGetRoutingLayer, techGetLayerNum, techGetLayerMaskNumber, techFindLayer, and techGetLayerFunctions.")
("ciGetRule"
"ciGetRule( 
t_layerName 
t_ruleName
g_defVal
)
=> g_ruleValue / g_defVal"
"Retrieves the required rule value from the technology file. If the rule cannot be found, then the default value is returned.")
("ciGetStructArg"
"ciGetStructArg( 
s_structType
t_argName
)
=> l_argDef"
"Retrieves the named structure argument for the specified structure type. See also, ciSetStructArgs, ciGetStructArgs, ciReplaceStructArg, ciAddStructArg, and ciDeleteStructArg.")
("ciGetStructArgs"
"ciGetStructArgs( 
s_structType
)
=> l_argDef"
"Retrieves all the structure arguments for the specified structure type. See also, ciSetStructArgs, ciGetStructArg, ciReplaceStructArg, ciAddStructArg, and ciDeleteStructArg.")
("ciGetStructGeneratorExpressions"
"ciGetStructGeneratorExpressions( 
s_structType
)
=> r_expressions"
"Retrieves the constraint generator expressions registered for the passed structure type. The generator expressions are returned within a ciStructGeneratorExpressions def struct. These expressions are evaluated by the ciCreateModgen SKILL function during modgen creation and modification. See also, ciSetStructGeneratorExpressions, ciListStructGeneratorExpressions, and ciCreateModgen.")
("ciGetStructPDKMult"
"ciGetStructPDKMult( 
s_structType
)
=> x_pdkMult"
"Retrieves the PDK specific multiplier for the passed structure type. The PDK name is determined from the technology file associated with the current window. If multiplier has been registered then the default value of 1.0 will be returned. The PDK multipliers are typically used within constraint generator argument expressions to scale the values in a PDK independent way. See also, ciSetStructPDKMult.")
("ciGUIArgsToConArgs"
"ciGUIArgsToConArgs( 
l_guiArgs
)
=> t_conArgs"
"A simple wrapper around ciConvertToConArg for converting disembodied property lists of GUI args to a list of list of lists where each sublist is a constraint parameter list.")
("ciHighestLevelNet"
"ciHighestLevelNet( 
t_lowerLevelNetName
)
=> l_higherLevelNetInfo"
"This function returns the dbId of the highest level net associated with the passed lower level hierarchical net name. If the net is local to the cellview, which is contained within then the function returns info on that net. See also ciResolveNet.")
("ciListStructGeneratorExpressions"
"ciListStructGeneratorExpressions(
)
=> l_structureExpressions"
"Returns a list of all the registered structure generator expressions that are returned within a ciStructGeneratorExpressions def struct. These expressions are evaluated by the ciCreateModgen SKILL function during modgen creation and modification. See also, ciSetStructGeneratorExpressions, ciGetStructGeneratorExpressions, and ciCreateModgen.")
("ciListStructPDKMults"
"ciListStructPDKMults(
)
=> g_pdkMults"
"This function prints a list of all the registered structure PDK multipliers and returns a table of the registered structure type/PDK combinations. See also, ciSetStructPDKMult and ciGetStructPDKMult.")
("ciListStructTypes"
"ciListStructTypes(
[ ?exclude l_exclude ]
)
=> l_structSymbols"
"Returns a list of the registered structure types used by the Circuit Prospector. See also, ciSetStructArgs, ciGetStructArgs, ciReplaceStructArg, ciSetStructPDKMult ciAddStructArg, ciGetStructArg, ciReplaceStructArg, ciDeleteStructArg, and ciRegexReplaceStructArgs.")
("ciListTemplateTypes"
"ciListTemplateTypes(
)
=> l_templateTypeList"
"Generates a list of the current constraint template types dictionary, outputs its details.")
("ciMemberIndexToModgenPatternSymbol"
"ciMemberIndexToModgenPatternSymbol(
x_memIndx 
)
=> t_patternSymbol"
"This function returns the modgen pattern symbol for a member where member index is the count of the number of unique member names that have so far been processed in the list of members.")
("ciModgenDummyNetName"
"ciModgenDummyNetName(
l_devInfo
)
=> t_dummyNetName"
"Determines the modgen dummy net name based on bulk connectivity of the specified devices or the power/ground nets in the design. See also, ciCreateModgenDummy.")
("ciNumDevices"
"ciNumDevices(
g_cache
l_devPath
)
=> x_numDevs"
"Returns the number of physical devices for a given device name in the schematic, which effectively retrieves the mfactor for the device.")
("ciPadModgenPattern"
"ciPadModgenPattern(
l_pattern
x_rowCount
x_colCount
[ ?addDummies l_addDummies ]
)
=> l_pattern"
"Adds any missing elements in the modgen pattern list for the specified row and column counts.")
("ciRegexReplaceStructArgs"
"ciRegexReplaceStructArgs( 
l_args
t_regularExpr
t_toStr
)
=> l_newArgs"
"For the passed constraint generator argument list replace any strings matching the passed regular expression with the passed string replacement. This function is useful for customizing the default constraint generator arguments registered for a given structure. See also, ciGetStructArgs, ciSetStructArgs, ciReplaceStructArg, ciAddStructArg, ciDeleteStructArg, and ciGetStructArg.")
("ciReinitStructTemplateDefs"
"ciReinitStructTemplateDefs(
)
=> l_templateStructTypesInitialized"
"Re-initializes the template definitions created by the Circuit Prospector for registered structures. This is necessary if any of the structure arguments are modified. Typically, these modifications will be in the libInit.il file loaded when the PDK library is loaded or in a .cdsinit file.")
("ciRemoveSymmetricPinAlignments"
"ciRemoveSymmetricPinAlignments( 
g_cache 
)
=> t / nil"
"This utility function used by the Rapid Analog Prototype Enforce Precedence constraint generator to remove alignment constraints on symmetric pins.")
("ciReplaceStructArg"
"ciReplaceStructArg( 
s_structType
t_argName
l_newArg
)
=> t / nil"
"For the passed structure type this function replaces the named constraint generator argument with a new argument definition. See also, ciGetStructArgs, ciSetStructArgs, ciRegexReplaceStructArgs, ciAddStructArg, ciDeleteStructArg, and ciGetStructArg.")
("ciSaveConstraintGenerator"
"ciSaveConstraintGenerator( 
t_constraintGeneratorName
)
=> t / nil"
"Saves a constraint generator in the .cadence/dfII/ci/generators directory with the name given to it. The spaces in the constraint generator's name are replaced by underscores.")
("ciSetStructArgs"
"ciSetStructArgs( 
s_structType
l_args
)
=> t / nil"
"Sets the constraint generator arguments for the passed structure type. See also, ciGetStructArgs, ciRegexReplaceStructArgs, ciAddStructArg, ciDeleteStructArg. ciReplaceStructArg, and ciGetStructArg.")
("ciSetStructGeneratorExpressions"
"ciSetStructGeneratorExpressions( 
s_structType
r_structExpressions
)
=> t / nil"
"Sets the constraint generator expressions for the passed structure type. The generator expressions are specified within a ciStructGeneratorExpressions def struct. These expressions are evaluated by the ciCreateModgen function during modgen creation and modification. See also, ciGetStructGeneratorExpressions, ciListStructGeneratorExpressions, and ciCreateModgen.")
("ciSetStructPDKMult"
"ciSetStructPDKMult( 
s_structType
t_pdkName
f_pdkMultiplier

)
=> t"
"Sets the PDK specific multiplier for the passed structure type and PDK name. The PDK multipliers are typically used within constraint generator argument expressions to scale the values in a PDK independent way. See also, ciGetStructPDKMult.")
("ciSortDeviceInfoByFingerWidth"
"ciSortDeviceInfoByFingerWidth( 
l_devInfo 
)
=> l_sortedDevInfo"
"Returns devs ordered by finger width. The device with the largest finger width will appear first in the list.")
("ciSortDeviceInfoByMfactor"
"ciSortDeviceInfoByMfactor( 
l_devInfo 
)
=> l_sortedDevInfo"
"Returns devices ordered by mfactor. The device with the largest mfactor will appear first in the list.")
("ciSortDeviceInfoByX"
"ciSortDeviceInfoByX( 
l_devInfo
[ ?margin f_margin ]
)
=> l_sortedDevInfoDevs"
"Returns devices ordered by increasing X. Margin defines the margin for equivalent X coordinates.")
("ciSortDeviceInfoByXY"
"ciSortDeviceInfoByXY( 
l_devInfo
[ ?margin f_margin ]
)
=> l_sortedDevInfoDevs"
"Returns devices ordered by increasing X and increasing Y where, devices have same X. Margin defines the margin for equivalent X/Y coordinates.")
("ciSortDeviceInfoByY"
"ciSortDeviceInfoByY( 
l_devInfo
[ ?margin f_margin ]
)
=> l_sortedDevInfoDevs"
"Returns devices ordered by increasing Y. Margin defines the margin for equivalent Y coordinates.")
("ciSortDeviceInfoByYX"
"ciSortDeviceInfoByYX( 
l_devInfo
[ ?margin f_margin ]
)
=> l_sortedDevInfoDevs"
"Returns devices ordered by increasing Y and increasing X where devices have same Y. Margin defines the margin for equivalent X/Y coordinates.")
("ciUnexpandPhysicalDeviceInfo"
"ciUnexpandPhysicalDeviceInfo(
l_devInfo
[ ?unexpandIterated g_unexpandIterated ]
)
=> l_devInfo"
"This is a utility function used in modgen generation for converting a physical devInfo disembodied property list into a logical devInfo disembodied property list. The devInfo disembodied property lists are created by calling ciCollectDeviceInfo for schematic (logical) and layout (physical) devices.")
("ciUpdateModgenParamsAndMembers"
"ciUpdateModgenParamsAndMembers( 
g_modgen 
l_newModgenParams 
l_newModgenMembers
)
=> t / nil"
"A utility function, which updates the passed modgen constraint parameters and members.")
("ciUtilsGetArgVal"
"ciUtilsGetArgVal( 
l_args 
t_argName 
t_argAltName 
[ ?defVal g_defVal ]
)
=> g_val"
"This is a utility function for accessing constraint generator argument values from a disembodied property list where the argument names may take one of two forms.")
("ciUtilsMakeNumberRange"
"ciUtilsMakeNumberRange( 
x_from 
x_to 
[ ?descending g_descending ] 
[ ?fmt t_fmt ]
)
=> l_result"
"This function returns a list containing a sequence of numbers ranging from the passed from value to the passed to value. Optionally, this function reverses the list into descending order and applies a sprintf format to the numbers.")
("cstCreateConstraint"
"cstCreateConstraint(
g_cstConstraintGroupID
t_constraintDefName
g_layers
g_value
[ l_params ]
[ g_isHard ]
[ g_append ]
[ t_name ]
)
=> g_cstConstraintID / nil"
"Creates a constraint in the constraint group (g_cstConstraintGroupID) with the specified constraint definition name (t_constraintDefName), layers, constraint value, constraint parameters, hard attribute, the position of the constraint with the members of the constraint group and the name of the constraint.")
("cstDeleteConstraint"
"cstDeleteConstraint( 
g_cstConstraintID 
)
=> t / nil"
"Deletes the constraint from any of the constraint groups it is a part of. Its value and constraint parameters are also deleted.")
("cstFindCutClassConstraintByName"
"cstFindCutClassConstraintByName(
d_constraintGroupId
tx_layer
t_name
)
=> d_cutClassConstraintId / nil"
"Returns the database ID of the cut class constraint with a given cut class name, layer, and constraint group.")
("cstFindCutClassConstraintBySize"
"cstFindCutClassConstraintBySize(
d_constraintGroupId
tx_layer
n_width
n_length
g_checkOrientation
)
=> d_cutClassConstraintId / nil"
"Searches the specified layer in the specified constraint group and returns the first cut class constraint with the specified width and length. If g_checkOrientation is set to t, the orientation of the cut class will also be included as part of the search.")
("cstGetUnreferencedConstraints"
"cstGetUnreferencedConstraints(
{ d_techID | d_cellViewID }
)
=> l_unreferencedConstraints / nil"
"Returns all the unreferrenced constraints not belonging to any constraint group in a database (a technology database or a cellview).")
("cstGet1DTableValue"
"cstGet1DTableValue( 
d_ConstraintID 
n_index1
)
=> n_value"
"Returns the value of the table for the given index. The index varies depending on the constraint. It can be a width or a length.")
("cstGet2DTableValue"
"cstGet2DTableValue( 
d_ConstraintID 
n_index1
n_index2
)
=> n_value"
"Returns the value of the table for the given indexes.")
("cstGetTwoWidthTableValue"
"cstGetTwoWidthTableValue( 
d_ConstraintID 
n_index1
n_index2
n_index3
)
=> n_value"
"Applies to the twoWidth table. It only returns the spacing value for a given width1, width2, and length.")
("cstIsId"
"cstIsId(
g_id
)
=> t / nil"
"Returns a Boolean that indicates whether the specified ID is a constraint ID.")
("cstAddToConstraintGroup"
"cstAddToConstraintGroup(
g_cstConstraintGroupID
g_memberConstraintGroupID
[ g_append ]
)
=> t / nil"
"Adds a constraint group to be a member constraint group of the containing constraint. You can position the constraint group at the beginning of the members or at the end of the members with g_append. The default value for g_append is nil, which means that add the constraint group to the beginning of the members. The member constraint group cannot be owned by other objects. 

Note: A member constraint group cannot be added to itself.")
("cstCreateConstraintGroupIn"
"cstCreateConstraintGroupIn(
{ d_techID | d_cellViewID }
t_constraintGroupName
[ t_constraintGroupDefName ]
[ g_operator ]
)
=> g_cstConstraintGroupID / nil"
"Creates a constraint group in the technology database (that is, techDb) or a cellview with arguments of the database ID, constraint group name, constraint group definition name and operator symbol.")
("cstCreateConstraintGroupOn"
"cstCreateConstraintGroupOn(
g_object
t_constraintGroupDefName
[ g_operator ]
)
=> g_cstConstraintGroupID / nil"
"Creates a constraint group on an object (for example, net, term, and so on) with arguments of the object ID, constraint group definition name, and operator symbol. The constraint group definition name is required while constraint group operators are optional for this SKILL function.")
("cstDeleteConstraintGroup"
"cstDeleteConstraintGroup(
g_cstConstraintGroupID
)
=> t / nil"
"Deletes the constraint group (g_cstConstraintGroupID). The contained constraints in the constraint group are not automatically deleted when the constraintGroup is deleted.")
("cstFindConstraintGroupIn"
"cstFindConstraintGroupIn(
{ d_techID | d_cellViewID }
t_constraintGroupName
[ g_localOnly ]
)
=> g_cstConstraintGroupID / nil"
"Returns a constraint group ID (g_cstConstraintGroupID) from a database ID with constraint group name and a Boolean flag (g_localOnly).")
("cstFindConstraintGroupOn"
"cstFindConstraintGroupOn(
g_object
t_constraintGroupDefName
)
=> g_cstConstraintGroupID / nil"
"Returns a constraint group ID (g_cstConstraintGroupID) from an object (g_object) with constraint group definition name.")
("cstFindFirstConstraint"
"cstFindFirstConstraint(
d_ConstraintGroupID
t_constraintDefName
[ ( tx_layer [ tx_purpose ] )... ]
[ l_params ]
[ g_onlyHard ]
)
=> d_ConstraintID / nil"
"Searches a constraint group in the hierarchical order and returns the ID of the first constraint found with the given name, layers, purposes, and params. If the onlyHard argument is not specified, the first matching constraint is returned and it is possible that it is a hard constraint. If the onlyHard argument is specified, then the first matching hard constraint is returned.")
("cstGetConstraintGroups"
"cstGetConstraintGroups(
g_cstConstraintID
)
=> l_containingConstraintGroups / nil"
"Returns all the containing constraint groups for the constraint (g_cstConstraintID).")
("cstGetDefaultConstraintGroupName"
"cstGetDefaultConstraintGroupName(
d_cellView
t_type
)
=> t_constraintGroupName / nil"
"Gets the name of the constraint group that is used as the default constraint group on the objects of the cellview according to the specified application type.")
("cstGetFoundryCGName"
"cstGetFoundryCGName(
)
=> t_constraintGroupName"
"(ICADVM20.1 Only) Returns the name of the alternate foundry constraint group. If there is no alternate foundry constraint group specified, it returns the name of the foundry constraint group.")
("cstGetFoundryConstraintGroup"
"cstGetFoundryConstraintGroup(
d_techID
)
=> d_cgID / nil"
"(ICADVM20.1 Only) Returns the database ID of the alternate foundry constraint group specified for a given technology file. If there is no alternate foundry constraint group specified, it returns the ID of the foundry constraint group.")
("cstSetDefaultConstraintGroupName"
"cstSetDefaultConstraintGroupName(
d_cellview
t_constraintGroupName
t_type
)
=> t / nil"
"Sets the specified constraint group name to be used as the default constraint group on the objects of the cellview according to the specified application type.")
("ciDevGroupBoxIterator"
"ciDevGroupBoxIterator(
d_cellview
t_finderExpr
)
=> l_dbId / nil"
"(ICADVM20.1 Only) Iterates all device groups within a cellview that are enclosed by a text box.")
("ciDiMinMaxVPropertyCallback"
"ciDiMinMaxVPropertyCallback(
g_field
f_form
)
=> t / nil"
"(ICADVM20.1 Only) Runs a callback to check that customized property definitions using minimum and maximum voltage property values are set correctly so that Min Voltage is less than or equal to Max Voltage. When these properties are set incorrectly in the Create Design Intent form or Edit Design Intent form, the properties are highlighted and the form is prevented from closing until the values are corrected.")
("ciDiPostTransferHighCurrent"
"ciDiPostTransferHighCurrent(
g_template
)
=> t / nil"
"(ICADVM20.1 Only) Runs a callback to enslure that when a customized HighCurrent design intent is transferred from Schematics XL to Layout XL, the current is split evenly between the mfactored members in Layout XL. This function is specified using the postTransferCallback for the HighCurrent design intent properties.")
("ciDiPostTransferMinMaxVoltage"
"ciDiPostTransferMinMaxVoltage(
g_template
)
=> t / nil"
"(ICADVM20.1 Only) Runs a callback to propagate the design intent properties Min Voltage, Max Voltage, Signal Type, Power Sensitivity, and Ground Sensitivity on the associated design intent objects after transfer from schematic to layout.")
("ciDiReplaceOrAddPropertyGroupDef"
"ciDiReplaceOrAddPropertyGroupDef(
l_propGroupDefs
)
=> t / nil"
"(ICADVM20.1 Only) Adds or replaces customized design intent property group definitions.")
("ciDiReportGenReport"
"ciDiReportGenReport(
[ ?cv d_cellviewID ]
[ ?depth x_depth ]
[ ?title t_reportName ]
[ ?path t_path ]
[ ?launch { t | nil } ]
[ ?date t_reportDate ]
)
=> t / nil"
"(ICADVM20.1 Only) Generates a report summarizing the design intent in the current design based on the specified criteria and optionally opens the report in the browser.")
("ciSetDIPropertyGroupDefs"
"ciSetDIPropertyGroupDefs(
l_propGroupDefs
)
=> t / nil"
"(ICADVM20.1 Only) Sets the design intent property group definitions to the specified definitions. All existing property group definitions are deleted.")
("ciTemplateChangeDIProfile"
"ciTemplateChangeDIProfile(
u_templateId
t_profileName
)
=> t / nil"
"(ICADVM20.1 Only) Replaces the property profile currently selected for a design intent template.")
("ciTemplateCreateDI"
"ciTemplateCreateDI(
g_cache
t_designIntentTemplateType { diDevices | diNets | diPins | diMaxVoltageDrop | diHighCurrent | diCell }
t_name
l_memberNamesTypes
[ ?profile t_profileName ]
[ ?params l_paramNameAndValue ]
[ ?propNameValue l_propNameValue ]
)
=> u_templateId / nil"
"(ICADVM20.1 Only) Creates a design intent template for the specified template type.")
("ciTemplateDIProfileName"
"ciTemplateDIProfileName(
u_templateId
)
=> t_profileName / nil"
"(ICADVM20.1 Only) Returns the name of the profile associated with the specified design intent template.")
("ciTemplateDIPropDef"
"ciTemplateDIPropDef(
u_templateId
t_propertyName
)
=> l_propNameTypeDefVal / nil"
"(ICADVM20.1 Only) For the specified design intent template, returns the definition of the named property in the form of a DPL.")
("ciTemplateDIPropGroupDef"
"ciTemplateDIPropGroupDef(
u_templateId
)
=> l_propNameTypeDefVal / nil"
"(ICADVM20.1 Only) For the specified design intent template, returns the definition of all the properties in the form of a DPL.")
("ciTemplateDIPropValue"
"ciTemplateDIPropValue(
u_templateId
t_propertyName
)
=> g_propValue / nil"
"(ICADVM20.1 Only) For the specified design intent template, returns the value of a named property.")
("ciTemplateIsKindOfDI"
"ciTemplateIsKindOfDI(
d_templateId
)
=> t / nil"
"(ICADVM20.1 Only) Confirms if the specified constraint template is a design intent template. The available design intent templates are: diDevices, diNets, diPins, diMaxVoltageDrop, diHighCurrent, and diCell.")
("ciTemplateListDIProps"
"ciTemplateListDIProps(
u_templateId
)
=> l_propNameTypeValueList / nil"
"(ICADVM20.1 Only) For the specified design intent template, returns a list of the property names, types, and values.")
("ciTemplateUpdateDIProps"
"ciTemplateUpdateDIProps(
u_templateId
l_propNameValue
)
=> t / nil"
"(ICADVM20.1 Only) For the specified design intent template, updates the value of the named property.")
("ciUpdateObjPropsFromDI"
"ciUpdateObjPropsFromDI(
g_form
g_template
)
=> t / nil"
"(ICADVM20.1 Only) Runs a callback to propagate design intent properties to the associated design intent objects. The function can be called when the Create Design Intent form or Edit Design Intent form are submitted.")