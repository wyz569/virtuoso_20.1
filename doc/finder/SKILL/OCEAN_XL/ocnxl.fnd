;SKILL Language Functions
("ocnxlEndXLMode"
"ocnxlEndXLMode(
[ t_maestroMode ]
) 
=> t / nil"
"This command indicates the end of the current XL mode. This command releases the license that was checked out for the XL mode.")
("ocnSetXLMode"
"ocnSetXLMode(
[ t_maestroMode ]
) 
=> t / nil"
"Sets the OCEAN mode to XL. In this mode, the simulation setup can contain multiple tests, corners, or advanced run modes, such as MonteCarlo. The OCEAN XL mode can be used to run simulations for ADE XL, ADE Explorer, or ADE Assembler. Accordingly, it checks out the required license. Once the mode is set to XL, it cannot be reverted.")
("ocnxlBeginTest"
"ocnxlBeginTest(
t_testName
) 
=> t / nil"
"This command indicates the beginning of the test specified by testName. Subsequent commands populate this test. The test specification ends when ocnxlEndTest() command is given.")
("ocnxlDisableTest"
"ocnxlDisableTest(
t_testName
)
=> t / nil"
"Lets you disable a test. A disabled test will not be run when ocnxlRun() command is fired. See help on ocnxlRun().")
("ocnxlEndTest"
"ocnxlEndTest() 
=> t / nil"
"This command indicates the end of the current test's specification.")
("ocnxlGetTests"
"ocnxlGetTests(
) 
=> t / nil"
"Returns a list of test names.")
("ocnxlMTSBlock"
"ocnxlMTSBlock( 
s_blockName 
[ ?isMtsBlock  g_isMtsBlock ] 
[ ?includeFile l_includeFile ] 
[ ?modelFiles  l_modelFiles ]
[ ?simOptions t_simOptions ]
)
=> t / nil"
"Enables a block for multi-technology simulation (MTS) and specifies the include files and model files associated with the block.")
("ocnxlSetMTSMode"
"ocnxlSetMTSMode( 
s_blockName 
[ ?enableMTS g_enableMTSBlock ]
[ ?modelFiles  l_modelFiles ]
[ ?simOptions t_simOptions ]
)
=> t / nil"
"Enables a block for multi-technology simulation (MTS) and specifies the model files associated with the block.")
("ocnxlMTSEnable"
"ocnxlMTSEnable( 
g_enable
) 
=> t / nil"
"Enables or disables multi-technology simulation (MTS) mode for the current test. The current test's specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlSelectTest"
"ocnxlSelectTest(
t_testName
)
=> t / nil"
"Lets you select a test. List of test names can be obtained by ocnxlGetTests() command. See help on ocnxlGetTests().")
("ocnxlDeleteNote"
"ocnxlDeleteNote(
t_item 
t_name
) 
=> t / nil"
"Deletes a note from the given test, history, corner, or variable.")
("ocnxlDisableSweepParam"
"ocnxlDisableSweepParam(
t_paramName
)
=> t / nil"
"Lets you disable a sweep parameter. A disabled parameter is not run when ocnxlRun() command is fired. See help on ocnxlRun().")
("ocnxlDisableSweepVar"
"ocnxlDisableSweepVar(
t_varName
)
=> t / nil"
"Lets you disable a sweep variable. A disabled sweep is not run when ocnxlRun() command is fired. See help on ocnxlRun().")
("ocnxlEnableSweepParam"
"ocnxlEnableSweepParam(
t_paramPath
) 
=> t / nil"
"Enables a sweep parameter. A disabled sweep parameter is not run when the ocnxlRun() command is run.")
("ocnxlEnableSweepVar"
"ocnxlEnableSweepVar(
t_varName
) 
=> t / nil"
"Enables a sweep variable. A disabled sweep variable is not run when the ocnxlRun() command is run.")
("ocnxlEnableTest"
"ocnxlEnableTest(
t_testName
) 
=> t / nil"
"Enables a test. A disabled test will not be run when the ocnxlRun() command is run.")
("ocnxlGetJobId"
"ocnxlGetJobId(
)
=> x_jobID / nil"
"Returns the ID of the current simulation job. This command must be used only in a pre-run script.")
("ocnxlGetSession"
"ocnxlGetSession(
) 
=> t_sessionName / nil"
"Returns the session name.")
("ocnxlJobSetup"
"ocnxlJobSetup(
l_setupOptions
[ ?name t_name ]
)
=> t / nil"
"Specifies various job setup details for a simulation job.")
("ocnxlLoadSetupState"
"ocnxlLoadSetupState( 
t_state
t_mode
[ ?tests t_tests ]
[ ?vars t_vars ] 
[ ?parameters t_parameters ] 
[ ?currentMode t_currentMode ]
[ ?runOptions t_runOptions ]
[ ?specs t_specs ] 
[ ?corners t_corners ] 
[ ?modelGroups t_modelGroups ] 
[ ?extensions t_extensions]
[ ?relxanalysis t_relxanalysis ] 
)
=> t / nil"
"Restores the settings in the specified setup state to the active setup.")
("ocnxlMaxJobFail"
"ocnxlMaxJobFail(
n_int
)"
"Specifies the maximum number of times the application should restart an ICRP job if it fails to start. This variable is used in batch mode to ensure that the job retries do not go into an infinite loop.")
("ocnxlMainSimSession"
"ocnxlMainSimSession(
)
=> g_session / nil"
"Returns the session object for the main simulation session. This command must be used only in a pre-run script.")
("ocnxlProjectDir"
"ocnxlProjectDir(
t_projectDir
)
=> t / nil"
"Sets the project directory to the specified location. All simulation data goes into this location by default, if the simulation results or results directories are not set. By default, the project directory is set as $HOME/simulation.")
("ocnxlPutNote"
"ocnxlPutNote(
t_item 
t_name
t_note
) 
=> t / nil"
"Adds a note to the given test, history, corner, or variable.")
("ocnxlResultsLocation"
"ocnxlResultsLocation(
t_resultsDir
)
=> t / nil"
"Sets the results directory to the specified location. All results database and log files are saved in the /libraryName/cellName/<target-view>/results/data/ directory at this location.")
("ocnxlSaveSetupAs"
"ocnxlSaveSetupAs(
t_lib
t_cell
t_view
)
=> t / nil"
"Saves the current setup to a different adexl view.")
("ocnxlSensitivityVars"
"ocnxlSensitivityVars(
l_varValueList 
) 
=> t / nil"
"Specifies a list of sensitivity variables for the given setup.")
("ocnxlSetDesignVariablePerTest"
"ocnxlSetDesignVariablePerTest(
t_varName
t_testName
) 
=> t / nil"
"Sets a value for a design variable to be overridden for the given test. In this case, the test will not use the global value set for the variable.")
("ocnxlSetAllVarsDisabled"
"ocnxlSetAllVarsDisabled(
g_disabled
)
=> t / nil"
"Lets you enable or disable all global variables.")
("ocnxlSetupLocation"
"ocnxlSetupLocation(
t_setupDir
)
=> t / nil"
"Sets the setup directory to the specified location. All setup data goes into this location. By default data goes into the target cell view. See help on ocnxlTargetCellView.")
("ocnxlSimResultsLocation"
"ocnxlSimResultsLocation(
t_simResultsDir
)
=> t / nil"
"Sets the simulation results directory to the specified location. All simulation data goes into this location. If the simulation results directory is not set using this function, the simulation results are saved at any one of the following locations:")
("ocnxlStimuliData"
"ocnxlStimuliData(
[ ?inputs t_inputs ]
[ ?globals t_globals ]
)
=> t / nil"
"Sets the specified analog stimuli (input stimulus and global sources) for a test.")
("ocnxlSweepParam"
"ocnxlSweepParam(
t_paramName
t_paramValue
)
=> t / nil"
"Lets you define a sweep parameter along with its value.")
("ocnxlSweepVar"
"ocnxlSweepVar(
t_varName
t_varValue
)
=> t / nil"
"Lets you define a sweep variable along with its value.")
("ocnxlTargetCellView"
"ocnxlTargetCellView(
t_lib
t_cell
t_view
[ ?mode t_mode ]
)
=> t / nil"
"Specifies target cellview where data will be created.")
("ocnxlCorner"
"ocnxlCorner(
t_cornerName 
l_cornerDetails
)
=> t / nil"
"Lets you define a corner.cornerDetails is a list of elements where each element is (t_type t_varName t_value). Available types are variable, parameter, and model.")
("ocnxlDisableCorner"
"ocnxlDisableCorner(
t_cornerName
)
=> t / nil"
"Lets you disable a corner. A disabled corner will not be run when the ocnxlRun() command is run. This command works only in XL mode. See help on ocnSetXLMode()")
("ocnxlDisableCornerForTest"
"ocnxlDisableCornerForTest(
t_cornerName
t_testName
)
=> t / nil"
"Lets you disable a corner for a test.")
("ocnxlEnableCorner"
"ocnxlEnableCorner(
t_cornerName
)
=> t / nil"
"Lets you enable a corner. An enabled corner will be run when ocnxlRun() command is run.")
("ocnxlEnableCornerForTest"
"ocnxlEnableCornerForTest(
t_cornerName
t_testName
) 
=> t / nil"
"Enables a corner for a test.")
("ocnxlGetCorners"
"ocnxlGetCorners(
) 
=> t / nil"
"Returns a list of corners names.")
("ocnxlModelGroup"
"ocnxlModelGroup( 
t_modelGroupName
l_modelFileSetup) 
=> t / nil"
"Lets you add and define a new model group.")
("ocnxlAddOrUpdateOutput"
"ocnxlAddOrUpdateOutput(
t_outputName 
t_outputVal
) 
=> t / nil"
"Adds the specified scalar output to the simulation setup so that the results for the output can be viewed on the Results tab in ADE XL. If the specified output name already exists, only its value is updated with the specified value. This command must be used only in a pre-run script.")
("ocnxlExportOutputView"
"ocnxlExportOutputView( 
t_fileName
t_viewType
)
=> t / t_error"
"Exports the results view to the specified .csv or .html file.")
("ocnxlOutputAreaGoal"
"ocnxlOutputAreaGoal( 
t_expr
[ ?name t_outputName ] 
[ ?plot plot ]
[ ?save save ] 
)
=> t / nil"
"Adds an area goal output expression in the current test being specified. A test's specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlOutputExpr"
"ocnxlOutputExpr
( t_expr 
[ ?name t_outputName ] 
[ ?plot plot ]
[ ?save save ] 
[ ?evalType t_evaltype] 
)
=> t / nil"
"This command adds an output expression in the current test being specified. Specification of a test specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlOutputMatExpr"
"ocnxlOutputMatExpr
( t_expr 
[ ?name t_name ] 
[ ?plot b_flag ]
[ ?save b_flag ] 
[ ?evalType s_type] 
)
=> t / nil"
"Creates a MATLAB expression output in the test where it is being specified.")
("ocnxlOutputMatlabScript"
"ocnxlOutputMatlabScript( 
t_script 
[ ?name t_outputName ] 
[ ?plot plot ] 
[ ?save save ] 
) 
=> t / nil"
"Adds a MATLAB script based output in the current test being specified. A test's specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlOutputOceanScript"
"ocnxlOutputOceanScript( 
t_script 
[ ?name t_outputName ] 
[ ?plot plot ] 
[ ?save save ] 
[ ?evalType t_evaltype ]
) 
=> t / nil"
"Adds an OCEAN script based output in the current test being specified. A test's specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlOutputOpRegion"
"ocnxlOutputOpRegion(
t_expr
[ ?name name ]
[ ?plot plot ]
[ ?save save ] 
)
=> t / nil"
"Adds an operating region specification in the current test being specified. There can be only one operating region for a test. A test specification begins with ocnxlBeginTest.")
("ocnxlOutputSignal"
"ocnxlOutputSignal( 
t_signal 
[ ?plot plot ] 
[ ?save save ] 
)
=> t / nil"
"This command adds an output signal in the current test being specified. A test's specification begins with ocnxlBeginTest(). See help on ocnxlBeginTest().")
("ocnxlOutputSpiceScript"
"ocnxlOutputSpiceScript(
t_script
[ ?name t_name ]
[ ?plot g_plot ]
[ ?save g_save ]
) 
=> t / nil"
"Adds the spice .measure script as an output")
("ocnxlOutputTerminal"
"ocnxlOutputTerminal( 
t_term 
[ ?plot plot ] 
[ ?save save ] 
[ ?type type ]
)
=> t / nil"
"This command adds an output terminal in the current test being specified. Specifications for a test begin with ocnxlBeginTest(). For more information, see ocnxlBeginTest().")
("ocnxlPutChecksAsserts"
"ocnxlPutChecksAsserts( 
[ ?netlist g_netlist ] 
)
=> t / nil"
"Adds the checks and asserts to the active setup for an overall control on the netlisting of checks and asserts defined in the Checks/Asserts assistant. Technically, this command adds the checksasserts node in the active setup.")
("ocnxlOutputViolations"
"ocnxlOutputViolations( 
t_expr 
[ ?name t_name ] 
[ ?plot g_plot ] 
[ ?save g_save ] 
)
=> t / nil"
"Adds a new output of type violations for the current test to show violation filters for checks or asserts.")
("ocnxPutChecksAsserts"
"ocnxPutChecksAssertsTest( 
[ ?testName t_testName ] 
[ ?netlist g_netlist ] 
[ ?netlistScope g_netlistScope ] 

)
=> t / nil"
"Specifies the name of the test to which the checks and asserts defined in the Checks/Asserts assistant will be applicable and whether to netlist the checks and asserts for that test. In addition, it also specifies the scope for netlisting. By default, the checks and asserts are not applied to any test.")
("ocnxlPutEnabledChecksAssertsCellViews"
"ocnxlPutEnabledChecksAssertsCellViews( 
[ ?testName t_testName ] 
[ ?enabledCellViews l_enabledCellViews ] 
)
=> t / nil"
"Specifies a list of library/cell/view lists that define the names of cellviews within a test for which the checks and asserts defined in the Checks/Asserts assistant will be netlisted. The checks and asserts under each of these cellviews will be netlisted provided that the netlist attribute of the test is set to t and its netlistScope attribute is set to partial or all. The cellviews will not be netlisted if the netlist attribute is nil or the netlistScope attribute is none.")
("ocnxlGetSpecs"
"ocnxlGetSpecs(
) 
=> t / nil"
"Returns a list of parameter specification names.")
("ocnxlPutGreaterthanSpec"
"ocnxlPutGreaterthanSpec(
t_testName
t_outputName
t_thresholdValue 
[ ?weight g_weight ]
[ ?corner g_cornerName ]
)
=> t / nil"
"Lets you specify that value of an output must be greater than the given threshold value.")
("ocnxlPutInfoSpec"
"ocnxlPutInfoSpec(
t_testName 
t_outputName 
[ ?corner g_cornerName ]
) 
=> t / nil"
"Specifies an info spec for an output.")
("ocnxlPutLessthanSpec"
"ocnxlPutLessthanSpec(
t_testName
t_outputName
t_thresholdValue
[ ?weight g_weight ]
[ ?corner g_cornerName ]
)
=> t / nil"
"Lets you specify that value for a output must be less than the given threshold value.")
("ocnxlPutMaxSpec"
"ocnxlPutMaxSpec(
t_testName
t_resultName
t_maxValue
[ ?weight g_weight ]
[ ?corner g_cornerName ]
)
=> t / nil"
"Lets you specify a maximize spec for a result.")
("ocnxlPutMinSpec"
"ocnxlPutMinSpec(
t_testName
t_outputName
t_minValue 
[ ?weight g_weight ]
[ ?corner g_cornerName ]
)
=> t / nil"
"Lets you specify a minimize spec for an output.")
("ocnxlPutToleranceSpec"
"ocnxlPutToleranceSpec(
t_testName 
t_outputName 
t_value
s_toleranceType 
t_toleranceValue
[ ?weight g_weight ]
[ ?corner g_cornerName ]
) 
=> t / nil"
"Lets you specify a tolerance spec for an output.")
("ocnxlPutRangeSpec"
"ocnxlPutRangeSpec(
t_testName
t_outputName
t_maxValue
t_minValue
[ ?weight g_weight ]
[ ?corner g_cornerName ]
=> t / nil"
"Lets you specify a range spec for an output.")
("ocnxlRemoveSpec"
"ocnxlRemoveSpec(
t_specName
) 
=> t / nil"
"Removes the specified parameter specification.")
("ocnxlConjugateGradientOptions"
"ocnxlConjugateGradientOptions (
[ ?runFullEvaluation t_runFullEvaluation ]
[ ?meetAllGoals t_meetAllGoals ]
[ ?timeLimit t_timeLimit ]
[ ?numPoints t_numPoints ]
)
=> t / nil"
"Sets options for conjugate gradient runs. This command works only in XL mode. See help on ocnSetXLMode().")
("ocnxlCornerVars"
"ocnxlCornerVars(
l_varValueList 
)
=> t / nil"
"Specifies a list of corner variables (along with their minimum, maximum, and reference values) to be used to run the Create Worst Care Corner simulation run mode.")
("ocnxlFeasibilityAnalysisOptions"
"ocnxlFeasibilityAnalysisOptions(
[ ?refPoint t_refPoint ] 
[ ?startingstateorpoint t_startingstateorpoint ]
[ ?startingstatename t_startingstatename ]
[ ?meetAllGoals t_meetAllGoals ] 
[ ?effort t_effort ]
) 
=> t / nil"
"Specifies options for the Feasibility Analysis run mode. See help on ocnxlRun for help on run modes. This command works only in XL mode.")
("ocnxlGetBestPointParams"
"ocnxlGetBestPointParams(
) 
=> t / nil"
"Returns a list of best design points.")
("ocnxlGlobalOptimizationOptions"
"ocnxlGlobalOptimizationOptions( 
[ ?runFullEvaluation t_runFullEvaluation ]
[ ?refPoint t_refPoint ] 
[ ?meetAllGoals t_meetAllGoals] 
[ ?timeLimit t_timeLimit ] 
[ ?numPoints t_numPoints ]
[ ?noImprvPoints t_noImprvPoints ] 
[ ?pointsAfterAllSpecsSatisfied t_pointsAfterAllSpecsSatisfied ]
[ ?startingstateorpoint t_startingstateorpoint ] 
[ ?startingstatename t_startingstatename ] 
) 
=> t / nil"
"Lets you specify options for global optimization run. See help on ocnxlRun() for run modes. This command works only in XL mode. See help on ocnSetXLMode()")
("ocnxlLocalOptimizationOptions"
"ocnxlLocalOptimizationOptions( 
[ ?effort t_effort ] 
[ ?runFullEvaluation t_runFullEvaluation ] 
[ ?meetAllGoals t_meetAllGoals ] 
[ ?timeLimit t_timeLimit ] 
[ ?numPoints t_numPoints ] 
[ ?startingstateorpoint t_startingstateorpoint] 
[ ?startingstatename t_startingstatename] )
=> t / nil"
"Lets you specify options for local optimization run. See help on ocnxlRun() for run modes.")
("ocnxlMonteCarloOptions"
"ocnxlMonteCarloOptions( 
[ ?mcmethod t_mcmethod ] 
[ ?mcNumPoints t_mcNumPoints ]
[ ?samplingMode t_samplingMode ] 
[ ?saveAllPlots t_saveAllPlots ]
[ ?saveProcess t_saveProcess ] 
[ ?saveMismatch t_saveMismatch ]
[ ?useReference t_useReference ] 
[ ?donominal t_donominal ]
[ ?monteCarloSeed t_monteCarloSeed ] 
[ ?mcStartingRunNumber t_mcStartingRunNumber ] 
[ ?designUnderTest t_designUnderTest]
[ ?dutIntances t_dutIntances]
[ ?dutSummary t_dutSummary ]
[ ?ignoreFlag t_ignoreFlag ]
[ ?mcNumBins t_mcNumBins ]
[ ?mcStopEarly t_mcStopEarly ]
[ ?mcYieldTarget t_mcYieldTarget ]
[ ?mcYieldAlphaLimit t_mcYieldAlphaLimit ]
[ ?mcStopMethod t_mcStopMethod ]
[ ?mcSigmaScaleValue t_mcSigmaScaleValue ]
[ ?dumpParamMode t_dumpParamMode ]
[ ?evaluationmode t_evaluationmode ]
[ ?limitOnOutstandingPoints t_limitOnOutstandingPoints ]
) 
=> t / nil"
"Lets you specify options for Monte Carlo runs. See help on ocnxlRun() for run modes.")
("ocnxlSamplingOptions"
"ocnxlSamplingOptions ( 
[ ?points t_numberOfPoints ]
)
=> t / nil"
"Lets you specify options for sampling run. See help on ocnxlRun () for run modes.")
("ocnxlSensitivityOptions"
"ocnxlSensitivityOptions(
[ ?haveDesignParams t_haveDesignParams ]
[ ?haveProcessParams t_haveProcessParams ]
[ ?haveDcOp t_haveDcOp ]
[ ?haveDesignParamSteps t_haveDesignParamSteps ]
[ ?designParamPercentage t_designParamPercentage ]
[ ?processSigmaSteps t_processSigmaSteps ]
[ ?processConfidenceIntervalUniform t_processConfidenceIntervalUniform ]
[ ?processMethod t_processMethod ]
[ ?dcOpInfo t_dcOpInfo ]
[ ?algoritm t_algoritm ]
[ ?statisticalInfo t_statisticalInfo ]
) 
=> nil"
"Specifies options for the Sensitivity Analysis run mode. See help on ocnxlRun for help on run modes. This command works only in XL mode.")
("ocnxlSizeOverCornersOptions"
"ocnxlSizeOverCornersOptions(
[ ?soclazy t_soclazy ]
[ ?socoptmethod t_socoptmetjod 
[ ?socreferencepoint t_socreferencepoint ]
[ ?soceffort t_soceffort ] 
[ ?soctimelimit t_spctimelimit ] 
[ ?socmaxpoints t_socmaxpoints ] 
[ ?sociterations t_sociterations ] 
[ ?socstopifnoimprovement t_socstopifnoimprovement ]
)
=> nil"
"Provides run options for the Size Over Corners run.")
("ocnxlStartingPoint"
"ocnxlStartingPoint(
l_startingPointDetails
)
=> t / nil"
"Lets you specify a reference point-a starting place for sizing-for Improve Yield, Global Optimization, Feasibility Analysis or Monte Carlo runs.")
("ocnxlSweepsAndCornersOptions"
"ocnxlSweepsAndCornersOptions(
[ ?submitpointenabled t_submitpointenabled ]
)
=> t / nil"
"Lets you specify options for Single Run, Sweeps and Corners runs.")
("ocnxlWorstCaseCornersOptions"
"ocnxlWorstCaseCornersOptions(
[ ?statisticalInfo t_statisticalInfo ]
[ ?algorithm t_algorithm ]
)
=> t / nil"
"Sets the algorithm to be used while running the worst case corner simulation.")
("ocnxlYieldEstimationOptions"
"ocnxlYieldEstimationOptions( 
[ ?useReference t_useReference ]
[ ?mcMethod t_mcMethod ] 
[ ?samplingMethod t_samplingMethod]
[ ?mcNumPoints t_mcNumPoints ]
[ ?mcNumBins t_mcNumBins]
[ ?monteCarloSeed  t_monteCarloSeed ]
[ ?speccornerselection t_speccornerselection]
[ ?haveYieldToStart t_yieldToStart ]
[ ?yisToStart t_yisToStart ]
[ ?useVarReduction t_varReductionBy ]
[ ?varReductionParam t_varReductionParam]
[ ?numlmport t_numlmport]
[ ?iterations t_iterations ]
[ ?designUnderTest t_designUnderTest ]
[ ?dutInstances t_dutInstances] 
[ ?dutSummary t_dutSummary] 
[ ?ignoreFlag t_ignoreFlag ] 
[ ?yeMethod t_yeMethod ]
[ ?yeSpecTolerance t_yeSpecTolerance ]
[ ?yeAngleTolerance t_yeAngleTolerance ]
)
=> t / nil"
"Lets you specify options for High Yield Estimation run mode. See help on ocnxlRun() for run modes.")
("ocnxlYieldImprovementOptions"
"ocnxlYieldImprovementOptions( 
[ ?iymethod t_iymethod ]
[ ?refPoint t_refPoint ] 
[ ?algorithm t_algorithm ]
[ ?timeLimit t_timeLimit ] 
[ ?iterations t_iterations ] 
[ ?numPoints t_numPoints ] 
[ ?sigmaTarget t_sigmaTarget ] 
[ ?stopIfNoImprovement t_stopIfNoImprovement] 
[ ?runFullEvaluation t_runFullEvaluation ] 
[ ?optimizationMethod t_optimizationMethod ] 
[ ?effort t_effort ]
[ ?saveCorner t_saveCorner]
[ ?iysamplingmethod t_iysamplingmethod ] 
[ ?iymontecarlodonominal t_iymontecarlodonominal ]
[ ?iymontecarloseed t_iymontecarloseed ]
[ ?iymcnumpoints t_iymcnumpoints ]
[ ?iymontecarlostartingrun t_iymontecarlostartingrun ] 
[ ?WYCmethod t_WYCmethod ]
[ ?dutSummary t_dutSummary ]
[ ?ignoreFlag t_ignoreFlag ]
)
=> t / nil"
"Lets you specify options for improve yield runs. See help on ocnxlRun() for run modes.")
("ocnxlGetRunDistributeOptions"
"ocnxlGetRunDistributeOptions(
) 
=> l_runOptions / nil"
"Returns the run options set for the current setup database.")
("ocnxlOpenResults"
"ocnxlOpenResults(
[ ?testName t_testName ]
)
=> t / nil"
"Opens the simulation results at the end of an Ocean XL simulation.When you save an OCEAN script from the ADE XL environment, this function is automatically added to the script.")
("ocnxlOutputSummary"
"ocnxlOutputSummary(
[ ?exprSummary g_exprSummary ]
[ ?specSummary g_specSummary ]
[ ?yieldSummary g_yieldSummary ]
[ ?detailed g_detailed ]
[ ?wave g_wave ]
[ ?forRun runID ]
[ ?fileName t_filePath ]
[ ?printHeader? g_printHeader ]
)
=> t / nil"
"Generates output summary.")
("ocnxlRun"
"ocnxlRun( 
[ ?mode s_mode ]
[ ?nominalCornerEnabled g_nominalCornerEnabled ]
[ ?allCornersEnabled g_allCornersEnabled ]
[ ?allSweepsEnabled g_allSweepsEnabled ]
[ ?verboseMode g_verboseMode ]
[ ?waitUntilDone g_waitUntilDone ]
[ ?runFinishedCallback g_runFinishedCallback ]
)
=> t / nil / runID"
"Specifies the run mode for simulation and whether to run the nominal corner, corners and sweeps during simulation. Also specifies whether to report completion of points during simulation.")
("ocnxlRunSetupSummary"
"ocnxlRunSetupSummary(
) 
=> t / nil"
"Generates the run setup summary. It shows how many tests, sweeps and corners are there and whether they are enabled.")
("ocnxlSetRunDistributeOptions"
"ocnxlSetRunDistributeOptions(
[ ?RunIn t_runIn]
[ ?DivideJobs t_divideJobs]
[ ?JobLimit n_jobLimit]
) 
=> t / nil"
"Sets the specified run option settings for the current setup database.")
("ocnxlWaitUntilDone"
"ocnxlWaitUntilDone( 
x_runID
'All
) 
=> t / nil"
"This command waits for an active OCEAN XL run to complete. This command works only in XL mode. See help on ocnSetXLMode().")
("ocnxlGetCurrentHistory"
"ocnxlGetCurrentHistory(
) 
=> historyName / nil"
"Returns the current history (checkpoint) name.")
("ocnxlGetCurrentHistoryId"
"ocnxlGetCurrentHistoryId(
[ ?returnSingleEntryIfGroupRun t_returnSingleEntryIfGroupRun ]
) 
=> historyID / nil"
"Returns the ID of the current history (checkpoint).")
("ocnxlGetHistory"
"ocnxlGetHistory(
x_runID
) 
=> x_setupdbHandle / nil"
"Returns the handle to the history setup database associated with a particular run. You can use this handle to work with the history results.")
("ocnxlGetOverwriteHistory"
"ocnxlGetOverwriteHistory(
) 
=> t / nil"
"Returns the status of overwrite history.")
("ocnxlGetOverwriteHistoryName"
"ocnxlGetOverwriteHistoryName(
) 
=> t_historyName / nil"
"Returns name of the history to be overwritten.")
("ocnxlGetReferenceHistory"
"ocnxlGetReferenceHistory( 
)
=> t_referenceHistoryName / nil"
"Gets the name of the reference history currently set in the OCAEN XL.")
("ocnxlHistoryPrefix"
"ocnxlHistoryPrefix(
t_prefixName
)
=> t / nil"
"Sets the prefix used in the names of history items created by OCEAN XL runs.")
("ocnxlRenameCurrentHistory"
"ocnxlRenameCurrentHistory(
t_newNameForHistory
) 
=> t / nil"
"Renames the current history (checkpoint).")
("ocnxlSetOverwriteHistory"
"ocnxlSetOverwriteHistory(
g_historyStatus
) 
=> t / nil"
"Sets the status of overwrite history.")
("ocnxlSetOverwriteHistoryName"
"ocnxlSetOverwriteHistoryName(
t_historyName
) 
=> t / nil"
"Sets name of the history to be overwritten.")
("ocnxlSetReferenceHistory"
"ocnxlSetReferenceHistory(
t_historyName
[ ?reuseNetlist t_reuseNetlist ]
[ ?useReferenceResults t_useReferenceResults ]
)
=> t_referenceHistoryName / nil"
"Sets a reference history for incremental simulation runs in OCEAN. This command works only in XL mode. See help on ocnSetXLMode().")
("ocnxlWriteDatasheet"
"ocnxlWriteDatasheet(
[ ?name t_datasheetName ]
[ ?directory t_directory ]
[ ?resultsSummary g_resultsSummary ]
[ ?testsSummary g_testsSummary ]
[ ?detailedResults g_detailedResults ]
[ ?plots g_plots]
[ ?designVarsSummary g_designVarsSummary ]
[ ?paramsSummary g_paramsSummary ]
[ ?cornersSummary g_cornersSummary ]
[ ?setupSummary g_setupsummary ]
[ ?launchBrowser g_launchBrowser ]
)
=> t / nil"
"This command writes a datasheet from the latest OceanXL run.")
("ocnxlParametricSet"
"ocnxlParametricSet(
l_paramList
)
=> l_paramList"
"Creates a parametric set by using the given list of parameters.")
("ocnxlLocalParametricSet"
"ocnxlLocalParametricSet(
t_testName
l_paramList
)
=> t / nil"
"Adds a parametric set for local variables in a maestro view.")
("ocnxlSetAllParametersDisabled"
"ocnxlSetAllParametersDisabled(
g_disabled
)
=> t / nil"
"Enables or disables all parameters.")
("ocnxlSetAllParameterPSetsDisabled"
"ocnxlSetAllParameterPSetsDisabled(
g_disabled
)
=> t / nil"
"Enables or disables all parameter parametric sets.")
("ocnxlSetAllVariablePSetsDisabled"
"ocnxlSetAllVariablePSetsDisabled(
g_disabled
)
=> t / nil"
"Enables or disables all variable parametric sets.")
("ocnxlGetPointId"
"ocnxlGetPointId(
)
=> x_pointID / nil"
"Returns the ID of the current simulation point. This command must be used only in a pre-run script.")
("ocnxlLoadCurrentEnvironment"
"ocnxlLoadCurrentEnvironment(
[ ?noAnalysis g_noAnalysis ]
) 
=> t / nil"
"Loads all the current environment settings, such as variables, analyses, etc., from the main test setup into the pre-run simulation environment. It also sets the results and netlist directory for the pre-calibration simulations based on the results directory for the current point.")
("ocnxlMCIterNum"
"ocnxlMCIterNum(
)
=> x_iterNum / nil"
"Returns the current iteration number of the main Monte Carlo simulation run. This command must be used only in a pre-run script.")
("ocnxlPreRunScript"
"ocnxlPreRunScript(
t_fileName
) 
=> t / nil"
"Specifies the pre-run script file containing the OCEAN commands that need to be run before the simulation starts. This function must be used within a test setup block (starting with ocnxlBeginTest and ending with ocnxlEndTest ) in your OCEAN script file.")
("ocnxlRunCalibration"
"ocnxlRunCalibration(
) 
=> t / nil"
"Starts the simulation required to calibrate the simulation setup. This command must be used only in a pre-run script.")
("ocnxlSetCalibration"
"ocnxlSetCalibration(
) 
=> t / nil"
"Sets up a single iteration Monte Carlo calibration run by inheriting statistical parameter information from the main Monte Carlo simulation run. The starting iteration number for the calibration run is set to the current iteration number of the main Monte Carlo simulation run. This command must be used only in a pre-run script.")
("ocnxlSetMCdut"
"ocnxlSetMCdut(
t_instName
) 
=> t / nil"
"Sets a design instance to be used in a pre-run script for Monte Carlo calibration. If set, the specified subcircuit instance has process and mismatch variations applied to it and the unspecified instances only have process variations. All subcircuits instantiated under the specified instance also have process and mismatch enabled. By default, mismatch variations are applied to all the subcircuit instances in the design and process variations are applied globally. This allows the testbench to change and not affect the variations seen by the original design.")
("ocnxlSetMCignore"
"ocnxlSetMCignore(
t_ignoreInstNames
) 
=> t / nil"
"Sets the ignore parameter to be used in a pre-run script for Monte Carlo calibration. When the ignore parameter is set, no mismatch variation is applied to the specified subcircuit instances or all the subcircuits instantiated under this instance. Otherwise, by default, mismatch variation is applied to all the subcircuit instances in the design.")
("ocnxlSetPreRunScriptEnabled"
"ocnxlSetPreRunScriptEnabled(
g_enabled
) 
=> t / nil"
"Specifies if running the pre-run scripts through OCEAN scripts should be enabled.")
("ocnxlUpdatePointVariable"
"ocnxlUpdatePointVariable(
t_paramName 
t_paramValue
) 
=> t / nil"
"Updates the value of a parameter or variable in the simulation setup. This command must be used only in a pre-run script.")
("ocnxlAddRelxSetup"
"ocnxlAddRelxSetup(
t_relxSetupName
t_freshTest
t_stressTest
t_agedTest
[ ?stressVarList l_stressVarList ]
[ ?agedVarList l_agedVarList ]
[ ?freshTestEnabled t_freshTestEnabled ]
[ ?stressTestEnabled t_stressTestEnabled ]
[ ?agedTestEnabled t_agedTestEnabled ]
[ ?stressFile t_stressFile ]
)
=> t / nil"
"Adds a new reliability analysis setup with the specified fresh, stress, and aged tests and any variables for which the values need to be overridden.")
("ocnxlAddRelxScenariosSetup"
"ocnxlAddRelxScenariosSetup(
t_relxName
t_freshTest
t_stressTest
t_agedTest
[ ?freshTestEnabled t_freshTestEnabled ]
[ ?stressTestEnabled t_stressTestEnabled ]
[ ?agedTestEnabled t_agedTestEnabled ]
[ ?scenariosList t_scenariosList ]
[ ?relxOptions t_relxOptions ]
)
=> t / nil"
"Adds a new scenario setup in the reliability analysis setup.")
("ocnxlDisableRelxScenariosSetup"
"ocnxlDisableRelxScenariosSetup(
t_relxSetupName
)
=> t / nil"
"Disables the specified reliability scenario setup.")
("ocnxlDisableRelxSetup"
"ocnxlDisableRelxSetup(
t_relxSetupName
)
=> t / nil"
"Disables the specified reliability analysis setup.")
("ocnxlSetRelxAnalysisEnabled"
"ocnxlSetRelxAnalysisEnabled(
g_enable
)
=> t / nil"
"Enables or disables reliability analysis for the setup based on the input argument.")
("ocnxlSetRelxScenariosEnabled"
"ocnxlSetRelxScenariosEnabled(
g_enabled
)
=> t / nil"
"Enables or disables the complete reliability scenarios setup.")
("ocnxlSetRelxEnabledForPreRun"
"ocnxlSetRelxEnabledForPreRun(
)
=> t / nil"
"Updates the reliability setup based on the corresponding setup from the current environment. Use this function in the pre-run script to print the reliability setup in the pre-run netlist.")
("ocnxlEADAddMeasurement"
"ocnxlEADAddMeasurement(
t_measName 
[ ?n_scaleFactor scaleFactor ]
)
=> t / nil"
"Specifies the name of the current or voltage data to be saved from simulation results. A new output is created in the outputs setup of the adexl or maestro view.")
("ocnxlEADCreateDataSet"
"ocnxlEADCreateDataSet(
[ ?lib t_libName ]
[ ?cell t_cellName ]
[ ?view t_viewName ]
[ ?userDataSetName t_dataSetName ]
)
=> t / nil"
"Creates and saves an EAD dataset for all or for the specified master DUTs. . This command is equivalent to the Create command in the EAD results view of ADE XL or ADE Assembler.")
("ocnxlEADEnableLiveProcessing"
"ocnxlEADEnableLiveProcessing(
g_enabled
)
=> t / nil"
"Specifies whether the current waveform has to be processed during simulation or post simulation.")
("ocnxlEADSelectAllSignals"
"ocnxlEADSelectAllSignals(
g_enabled
)
=> t / nil"
"Specifies whether the current (or voltage) data is to be saved for all the instance terminals and terminals (or signals for the voltage data); or only for a selected set of instance terminals and terminals (or signals for the voltage data) in the selected design. This command is equivalent to the All Signals field on the EAD Setup form. The signals can be selected using the Parasitics & Electrical Setup assistant in Virtuoso Schematic Editor XL.")
("ocnxlEADSetDutMaster"
"ocnxlEADSetDutMaster(
t_libName
t_cellName
)
=> t / nil"
"Saves the library and cell names of the DUT master for which EM analysis is to be performed.")
("ocnxlEADSetHierarchyLevel"
"ocnxlEADSetHierarchyLevel(
x_hierLevel
)
=> t / nil"
"Sets the value for the design hierarchy level upto which the current or voltage data for all the instance terminals, and terminals or signals will be saved. This command is equivalent to the Hierarchy Stop Level field on the EAD Setup form.")
("ocnxlEADSetWaveFormClipping"
"ocnxlEADSetWaveFormClipping(
[ ?t_clipFrom t_clipFrom ]
[ ?t_clipTo t_clipTo ]
)
=> t / nil"
"Sets a start time and an end time for which an electrical waveform is to be processed. This command is equivalent to the Clip Waveforms - From and To fields on the EAD Setup form.")