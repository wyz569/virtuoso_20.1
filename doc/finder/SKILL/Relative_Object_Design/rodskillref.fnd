;SKILL Language Functions
("rodAddMPPChopHole"
"rodAddMPPChopHole(
R_rodObj
l_pts
);end rodAddMPPChopHole
=> t / nil"
"Adds a chop hole to all choppable parts of a ROD multipart path. To define a chop hole, you specify a list of points on the centerline of the master path. The results depend on whether the master path is choppable or not.")
("rodAddPoints"
"rodAddPoints(
l_point1
l_point2
);end rodAddPoints
=> l_point / nil"
"Adds two points together and returns the resulting point as l_point.")
("rodAddSubPart"
"rodAddSubPart(
R_rodObjId
t_subpartType
l_subpartParamList
);end rodAddSubPart
=> R_rodSubpartId / nil"
"Creates a new subpart of the type specified by subpartType with the given list of parameters (subpartParamList) and adds it to an existing multipart path (MPP).")
("rodAddToX"
"rodAddToX(
l_point
n_num
);end rodAddToX
=> l_point / nil"
"Adds a number to the X coordinate of l_point and returns the resulting point as l_point.")
("rodAddToY"
"rodAddToY(
l_point
n_num
);end rodAddToY
=> l_point / nil"
"Adds a number to the Y coordinate of l_point and returns the resulting point as l_point.")
("rodAlign"
"rodAlign(		
[ ?alignObj R_alignObj ]
[ ?alignHandle S_alignHandle ]
[ ?refObj R_refObj ]
[ ?refHandle S_refHandle ]
[ ?refPoint l_refPoint ]
[ ?maintain g_maintain ]
[ ?xSep txf_xSep ]
[ ?ySep txf_ySep ]
);end rodAlign
=> R_rodObj / nil"
"Aligns a named object by a point handle on that object to a specific point or to a point handle on a reference object. You can align objects that are at different levels of hierarchy as long as both objects are in the same top-level layout cellview. You can specify positive or negative separation between alignment points in the direction of both the X and Y axes, either as absolute distances or with Cadence SKILL language expressions. The system applies the offset from the reference point or reference object to the object to be aligned.")
("rodAssignHandleToParameter"
"rodAssignHandleToParameter(		
[ ?parameter S_parameter ]
[ ?rodObj R_rodObj ]
[ ?handleName Sl_handleName ]
[ ?displayName S_displayName ]
[ ?displayExpression S_displayExpression ]
[ ?stretchDir S_stretchDir ]
[ ?stretchType S_stretchType ]
[ ?moveOrigin g_moveOrigin ]
[ ?updateIncrement f_updateIncrement ]
[ ?userData g_userData ]
[ ?userFunction Sl_userFunction ]
[ ?stretchKey S_stretchKey ]
[ ?shape S_shape ]
);end rodAssignHandleToParameter
=> t / nil"
"Assigns one or more user- or system-defined point handles on a ROD object within a SKILL-based parameterized cell (Pcell) to a single Pcell parameter, so you can change the value of the parameter by graphically stretching the handle(s). Stretching a handle has the same effect as changing the value of the associated parameter for the Pcell instance using the Edit Properties form. You cannot stretch handles on the Pcell master. All rodAssignHandleToParameter statements must occur within the body-of-code section of a SKILL-based Pcell.")
("rodCheck"
"rodCheck(		
d_cvID 
[ g_createMarkers ]
); end rodCheck
=> Rl_rodObj"
"Searches the specified cellview for multipart paths (MPPs) for which the geometry does not match the definition information, and returns a list of the ROD object IDs. The MPPs found by this function include those that have lost their subshape definition information. By default, this function places warning markers over the potentially affected MPPs. (If you do not want to see warning markers, set the g_createMarkers argument to nil.) Although subparts with missing definition information are still visible graphically, their definitions have been deleted from the database. Editing an affected MPP causes an immediate loss of the subpart graphics.")
("rodCheckAllMPPsInCellView"
"rodCheckAllMPPsInCellView(		
t_libName 
t_cellName 
t_viewName 
g_fix 
g_createMarkers
); end rodCheckAllMPPsInCellView
=> l_defectiveMPPIds / nil"
"Finds and opens the design specified by t_libName, t_cellName, and t_viewName, and checks if any MPP in the design contains defective internal data. If MPPs containing defective internal data are found, rodCheckAllMPPsInCellView fixes them and creates markers on them depending on the values of g_fix and g_createMarkers arguments.")
("rodCheckMPPs"
"rodCheckMPPs(		
d_cellViewId 
R_rodObj | list(R_rodObj ...) 
g_fix 
g_createMarkers
);end rodCheckMPPs
=> l_defectiveMPPIds / nil"
"Checks if the given list of multipart paths (MPPs) contains corrupt internal data. If MPPs containing defective internal data are found, rodCheckMPPs fixes or creates markers to highlight them, or does both.")
("rodCreateHandle"
"rodCreateHandle(	
[ ?name S_name ]
[ ?type S_type ]
[ ?value g_value ]
[ ?rodObj R_rodObj ]
);end rodCreateHandle
=> t / nil"
"Creates a user-defined handle for any ROD object (named shape, instance, or cellview); the object must be at level zero in the hierarchy. For example, you can create a handle for polyRect or for instance I1, but not for I1/polyRect.")
("rodCreatePath"
"rodCreatePath(	
[ ?name S_name]
[ ?layer txl_layer ]
[ ?width n_width ]
[ ?pts l_pts ]
[ ?justification S_justification ]
[ ?offset n_offset ]
[ ?endType S_endType ]
[ ?beginExt n_beginExt ]
[ ?endExt n_endExt ]
[ ?choppable g_choppable ]
[ ?cvId d_cvId ]
[ ?fromObj Rl_fromObj ]
[ ?size txf_size ]
[ ?startHandle l_startHandle ]
[ ?endHandle l_endHandle ]
[ ?prop l_prop ]
	
[rodConnectivityArgs...  ]
	;start ROD Connectivity Arguments (rodConnectivityArgs)
	[ ?netName S_netName ]
	[ ?termName S_termName ]
	[ ?termIOType S_termIOType ]
	[ ?pin g_pin ]
	[ ?pinAccessDir tl_pinAccessDir ]
	[ ?pinLabel g_pinLabel ]
	[ ?pinLabelHeight n_pinLabelHeight ]
	[ ?pinLabelLayer txl_pinLabelLayer ]
	[ ?pinLabelFont S_pinLabelFont ]
	[ ?pinLabelDrafting g_pinLabelDrafting ]
	[ ?pinLabelOrient S_pinLabelOrient ]
	[ ?pinLabelOffsetPoint l_pinLabelOffsetPoint ]
	[ ?pinLabelJust S_pinLabelJust ]
	[ ?pinLabelRefHandle S_pinLabelRefHandle ]
	;end ROD Connectivity Arguments

[ ?offsetSubPath            l_offsetSubpathArgs... ]
;start Offset Subpath Arguments (l_offsetSubpathArgs)
list(
	list(
		[ ?layer txl_layer ]
		[ ?width n_width ]
		[ ?choppable g_choppable ]
		[ ?sep n_sep ]
		[ ?justification S_justification ]
		[ ?beginOffset n_beginOffset ]
		[ ?endOffset n_endOffset ]
		[ ?prop l_prop ]
		;repeat ROD Connectivity Arguments here
	);end first offset subpath list
		...
	);end offset subpath lists
;end Offset Subpath Arguments

[ ?encSubPath        l_encSubpathArgs...  ]
;start Enclosure Subpath Arguments (l_encSubpathArgs)
list(
	list(
		[ ?layer txl_layer ]
		[ ?enclosure n_enclosure ]
		[ ?choppable g_choppable ]	
		[ ?beginOffset n_beginOffset ]
		[ ?endOffset n_endOffset ]
		[ ?prop l_prop ]
		;repeat ROD Connectivity Arguments here
	);end first enclosure subpath list
		...
	;end of enclosure subpath lists
;end Enclosure Subpath Arguments

[ ?subRect l_subrectArgs...  ]
;start Subrectangle Arguments (l_subrectArgs)
list(
	list(
		[ ?layer txl_layer ]
		[ ?width n_width ]
		[ ?length n_length ]
		[ ?choppable g_choppable ]
		[ ?sep n_sep ]
		[ ?justification S_justification ]
		[ ?space n_space ]	
		[ ?beginOffset n_beginOffset ]
		[ ?endOffset n_endOffset ]
		[ ?beginSegOffset n_beginSegOffset ]
		[ ?endSegOffset n_endSegOffset ]
		[ ?prop l_prop ]
		[ ?gap S_gap ]
		;repeat ROD Connectivity Arguments here
		[ ?diagonal g_diagonalSubRect  ]
	);end first subrectangle list
		 ...		
	;end subrectangle lists
  );end Subrectangle Arguments
);end rodCreatePath

=> R_rodObj / nil"
"Creates a path consisting of one or more parts at level zero in the hierarchy on the same or on different layers from a list of points or from one or more existing objects. A path consisting of multiple parts is called a multipart path. You can use the rodCreatePath function to create one-part paths, simple multipart paths, or complex multipart paths such as guard rings, transistors, buses, and shielded paths. You can assign one or more property names and values to a multipart path.")
("rodCreatePolygon"
"rodCreatePolygon(		
[ ?name S_name ]
[ ?layer txl_layer ]
[ ?pts l_pts ]
[ ?cvId d_cvId ]
[ ?fromObj Rl_fromObj ]
[ ?size txf_size ]
[ ?prop l_prop ]
; ROD Connectivity Arguments for Polygons
[ ?netName S_netName ]
[ ?termName S_termName ]
[ ?termIOType S_termIOType ]
[ ?pin g_pin ]
[ ?pinAccessDir tl_pinAccessDir ]
[ ?pinLabel g_pinLabel ]
[ ?pinLabelHeight n_pinLabelHeight ]
[ ?pinLabelLayer txl_pinLabelLayer ]
[ ?pinLabelFont S_pinLabelFont ]
[ ?pinLabelDrafting g_pinLabelDrafting ]
[ ?pinLabelOrient S_pinLabelOrient ]
[ ?pinLabelOffsetPoint l_pinLabelOffsetPoint ]
[ ?pinLabelJust S_pinLabelJust ]
[ ?pinLabelRefHandle S_pinLabelRefHandle ]
);end rodCreatePolygon
=> R_rodObj / nil"
"Creates one polygon from a list of points or from one or more named objects. Also creates a ROD object containing information associated with the polygon, including its name and database ID. The associated ROD object is identified by a ROD object ID. The polygon is created at level zero in the hierarchy. You can assign a property name and value, or a list of property names and values, to the polygon. You can specify connectivity for the polygon by associating it with a specific terminal and net. You can also make the polygon into a pin.")
("rodCreateRect"
"rodCreateRect(	
[ ?name S_name ]
[ ?layer txl_layer ]
[ ?width n_width ]
[ ?length n_length ]
[ ?origin l_origin ]
[ ?bBox l_bBox ]
[ ?elementsX x_elementsX ]
[ ?elementsY x_elementsY ]
[ ?spaceX n_spaceX ]
[ ?spaceY n_spaceY ]
[ ?cvId d_cvId ]
[ ?fillBBox l_fillBBox ]
[ ?fromObj Rl_fromObj ]
[ ?size txf_size ]
[ ?prop l_prop ]
[ ?returnBoolean g_returnBoolean ]
	
[rodRectConnectivityArgs... ]
	; start ROD Connectivity Arguments for Rectangles (rodRectConnectivityArgs)
	[ ?netName S_netName ]
	[ ?termName S_termName ]
	[ ?termIOType S_termIOType ]
	[ ?pin g_pin ]
	[ ?pinAccessDir tl_pinAccessDir ]
	[ ?pinLabel g_pinLabel ]
	[ ?pinLabelHeight n_pinLabelHeight ]
	[ ?pinLabelLayer txl_pinLabelLayer ]
	[ ?pinLabelFont S_pinLabelFont ]
	[ ?pinLabelDrafting g_pinLabelDrafting ]
	[ ?pinLabelOrient S_pinLabelOrient ]
	[ ?pinLabelOffsetPoint l_pinLabelOffsetPoint ]
	[ ?pinLabelJust S_pinLabelJust ]
	[ ?pinLabelRefHandle S_pinLabelRefHandle ]
	;end ROD Connectivity Arguments for Rectangles

[ ?subRectArray     l_subrectArgs... ]
;start l_subrectArgs Subrectangle Arguments (l_subrectArgs)
list(
	list(
		[ ?layer txl_layer  ]
		[ ?width n_width ]
		[ ?length n_length ]
		[ ?gap S_gap ]
		[ ?lowerLeftOffsetX n_lowerLeftOffsetX ]
		[ ?lowerLeftOffsetY n_lowerLeftOffsetY ]
		[ ?upperRightOffsetX n_upperRightOffsetX ]
		[ ?upperRightOffsetY n_upperRightOffsetY ]
		[ ?spaceX n_spaceX ]
		[ ?spaceY n_spaceY ]
		[ ?prop l_prop ]
	;Repeat ROD Connectivity Arguments here
	);end first subrectangle list
	...		
	) ;end all subrectangle lists
;end l_subrectArgs
);end rodCreateRect

=> R_rodObj | t / nil"
"Creates a single named rectangle, one or more rows and/or columns of named rectangles, or fills a bounding box with named rectangles, where each rectangle has ROD attributes. You can create these named rectangles with the arguments S_name through g_returnBoolean. Each named rectangle is a separate object, created at level zero in the hierarchy. You can also create multipart rectangles by specifying one or more arrays of unnamed subrectangles for each named rectangle, where each unnamed subrectangle is an ordinary database shape, with no ROD attributes, created at level zero in the hierarchy. The named rectangles in a multipart rectangle are referred to as master rectangles.")
("rodDeleteHandle"
"rodDeleteHandle(	
R_rodObj
S_name
);end rodDeleteHandle
=> t / nil"
"Deletes a user-defined handle. You provide the ROD object ID and handle name.")
("rodDeleteSubPart"
"rodDeleteSubPart(	
R_rodObjId
t_subpartName
);end rodDeleteSubPart
=> t / nil"
"Deletes the named subpart from the given multipart path (MPP).")
("rodFillBBoxWithRects"
"rodFillBBoxWithRects(	
[ ?cvId d_cvId ]
[ ?layer txl_layer ]
[ ?fillBBox l_fillBBox ]
[ ?width n_width ]
[ ?length n_length ]
[ ?gap S_gap ]
[ ?spaceX n_spaceX ]
[ ?spaceY n_spaceY ]
[ ?prop l_prop ]
[ ?returnBoolean g_returnBoolean ]
);end rodFillBBoxWithRects
=> d_dbId / t / nil"
"Fills a bounding box with rectangles, as many as fit within the bounding box you specify. The rectangles are ordinary unnamed shapes, identified by database IDs; the rectangles have no ROD attributes. You can assign a property name and value, or a list of property names and values, to the set of rectangles. The property or list of properties apply to every rectangle in the bounding box. You specify the return value of the function to be Boolean or a list of the database IDs for the rectangles. When you want to create a one- or two-dimensional array of rectangles, and the rectangles do not need to be ROD objects, use this function instead of rodCreateRect because regular database shapes require less overhead, contributing to faster performance.")
("rodFillWithRects"
"rodFillWithRects(
[ ?shapeId d_shapeID ]
[ ?fillShapeLPP lpp ]
[ ?fillShapeWidth n_width ]
[ ?fillShapeLength n_length ]
[ ?gap S_gap ]
[ ?justification S_justification ]
[ ?keepOut l_ptList ]
[ ?spaceX n_spaceX ]
[ ?spaceY n_spaceY ]
[ ?enclosureX n_encX ]
[ ?enclosureY n_encY ]
[ ?grid n_grid ]
[ ?outputFillShape l_dbId ]
);end rodFillWithRects
=> t / nil"
"Fills a base shape with rectangles. The base shape can be a rectangle, polygon or a path type.")
("rodGetBBox"
"rodGetBBox(	
[ ?figId d_figId ]
[ ?layer t_layer ]
[ ?purpose t_purpose ]
[ ?stopLevel x_stopLevel ]
[ ?filterText g_filterText ]
);end rodGetBBox
=> l_bBox / nil"
"Returns the coordinates of the rectangular bounding box enclosing all the elements of a specified figure on a specified layer. You can optionally limit the calculation to include only elements on a specified layer purpose and down to a specified level of design hierarchy. You can also exclude labels and text displays from the calculation.")
("rodGetHandle"
"rodGetHandle(	
R_rodObj
S_name
);end rodGetHandle
=> g_handleValue / nil"
"Returns the value of a system- or user-defined handle. You specify the handle name and the ROD object ID for the object with which the handle is associated.")
("rodGetNamedShapes"
"rodGetNamedShapes(		
d_cvId
);end rodGetNamedShapes
=> lR_rodObjID / nil"
"Returns a list of the ROD object IDs for all named shapes (rectangles, polygons, and paths) at level zero in the hierarchy within the specified cellview that are ROD objects. This function looks only at the top level of hierarchy and does not return the ROD object ID for instances or cellviews.")
("rodGetObj"
"rodGetObj(	
S_hierarchicalName | d_dbId
[d_cellViewId]
); end rodGetObj
=> R_rodObj / nil"
"Lets you find a named object at any level of hierarchy in your cellview. You must specify either the database ID for the object or its hierarchical name. If you specify the hierarchical name, you must also specify the cellview ID. When you specify a cellview ID, it is not necessary to also specify the database ID; however, if you specify both, the cellview ID must be correct for the database ID you specify. If your rodGetObj statement occurs in the code for a Pcell (in the body of a pcDefinePCell function or tcCreateCDSDeviceClass function call), specifying the cellview ID is optional; if you do not specify it, the cellview ID defaults to pcCellView or tcCellView, respectively.")
("rodGetSubPart"
"rodGetSubPart(	
R_rodObjId
t_subpartName
);end rodGetSubPart
=> R_rodSubpartId / nil"
"Returns the subpart ID corresponding to the specified subpart name for the multipart path (MPP) specified as rodObjectId.")
("rodIsFigNameUnused"
"rodIsFigNameUnused(
S_name 
[d_cvId] 
); rodIsFigNameUnused
=> t / nil"
"Determines whether the name specified by S_name is a valid name and whether it is already assigned to a ROD object, instance, or mosaic in the cellview specified by d_cvId. A valid name cannot contain hierarchy (indicated by one or more slashes) and cannot be an empty string.")
("rodIsHandle"
"rodIsHandle(	
R_rodObj
S_name
);end rodIsHandle
=> t / nil"
"Determines whether the name specified for S_name identifies a valid system- or user-defined handle associated with the object specified by R_rodObj. Use this function prior to the rodGetHandle function when you want to verify that the handle exists before you try to access it.")
("rodIsMasterChoppable"
"rodIsMasterChoppable(
R_rodObjId
)
=> t / nil"
"Returns the value of the MPP master path choppability attribute.")
("rodIsObj"
"rodIsObj(	
g_object
;end rodIsObj
=> t / nil"
"Determines whether the object specified for g_object identifies a valid ROD object. This function is useful for testing variables and parameters to see if they contain a ROD object ID.")
("rodNameObject"
"rodNameObject	(
[ ?name S_name ]
[ ?shapeId d_shapeId ]
[ ?permitRename g_permitRename ]
);end rodNameObject
=> R_rodObj / nil"
"Assigns a name to an unnamed database shape or renames a ROD shape. Once the object is named, it can identified by a ROD object ID. This is an alias to an existing public function, rodNameShape.")
("rodNameShape"
"rodNameShape(	
[ ?name S_name ]
[ ?shapeId d_shapeId ]
[ ?permitRename g_permitRename ]
);end rodNameShape
=> R_rodObj / nil"
"Assigns a name to an unnamed database shape or renames a ROD shape. Creates (or updates) a ROD object containing information associated with the shape, including its name and database ID. The associated ROD object is identified by a ROD object ID. Optionally, you can specify whether to rename an existing ROD object.")
("rodPointX"
"rodPointX(
l_point
);end rodPointX
=> n_num / nil"
"Returns the X coordinate of the point specified by l_point.")
("rodPointY"
"rodPointY(
l_point
);end rodPointY
=> n_num / nil"
"Returns the Y coordinate of the point specified by l_point.")
("rodSetMasterChoppable"
"rodSetMasterChoppable(
R_rodObjId
g_setting { t | nil }
)
=> t / nil"
"Sets the choppability attribute of an MPP master path to the specified value.")
("rodSubPoints"
"rodSubPoints(
l_point1	
l_point2
) ;end rodSubPoints
=> l_point / nil"
"Subtracts l_point2 from l_point1 and returns the resulting point as l_point.")
("rodUnAlign"
"rodUnAlign(
R_rodObj1
[R_rodObj2]
);end rodUnAlign
=> t / nil"
"When you specify only one ROD object ID, removes all alignments for the object specified. When you specify two ROD object IDs, removes only the alignment between the two objects.")
("rodUnNameShape"
"rodUnNameShape(
Rl_rodObj
);end rodUnNameShape
=> t / nil"
"Removes the name from a named shape or list of named shapes. The ROD object ID for the shape and all user-defined handles associated with it are deleted. If the object is an instance, the instance keeps its name but all user-defined handles associated with the instance are deleted. Also removes all alignment constraints that reference the shape.")
("rodCoordBisect"
"rodCoordBisect(
o_rodCoord [ S_snapType ]
);end rodCoordBisect
=> o_rodCoord"
"Divides the input value by two (bisect). You can optionally set the argument that rounds off the calculated value, truncates it, or converts it based on the defined maximum ceiling.")
("rodCoordCreate"
"rodCoordCreate(
g_inputValue [ S_unitType [ S_snapType ] ]
[ x_resolution ]
);end rodCoordCreate
=> o_rodCoordObj"
"Creates a rodCoord object from the given value, that is, g_inputValue.")
("rodCoordDefineGrid"
"rodCoordDefineGrid(
n_gridValue  
x_resolutionValue
);end rodCoordDefineGrid
=> t"
"Defines the grid and the arithmetic resolution factor values, which are used by the rodCoord* API.")
("rodCoordFix"
"rodCoordFix(
o_rodCoord
);rodCoordFix
=> o_newRodCoord"
"Fixes the rodCoord object and returns a new rodCoord object using the fix() SKILL function.")
("rodCoordGetGrid"
"rodCoordGetGrid()
;end rodCoordGetGrid
=> o_gridValue"
"Returns the grid value (defined by rodCoordDefineGrid) as a rodCoord object.")
("rodCoordIsOnGrid"
"rodCoordIsOnGrid(
o_rodCoord
[ n_gridValue ]
);end rodCoordIsOnGrid
=> t / nil"
"Checks if the data in the given rodCoord object is on the grid or not.")
("rodCoordParseString"
"rodCoordParseString(
t_rodStringCoord
)
=> o_rodCoord"
"Creates a rodCoord object out of t_rodString generated by the rodCoordToString function.")
("rodCoordPartition"
"rodCoordPartition(
o_dividend 
g_divisor
);end rodCoordPartition
=> l_result"
"Performs a division on the given arguments - dividend and divisor.")
("rodCoordSnap"
"rodCoordSnap(
o_rodCoord
[[ S_snapType ] 
[ n_gridValue ]]
);end rodCoordSnap
=> o_rodCoord"
"Snaps a rodCoord object so that its value is on the grid.")
("rodCoordToFloat"
"rodCoordToFloat(
o_rodCoordObj 
);end rodCoordToFloat
=> f_value"
"Returns the rodCoord data in user unit as floating point number.")
("rodCoordToInt"
"rodCoordToInt(
o_rodCoordObj 
);end rodCoordToInt
=> x_value"
"Returns the rodCoord data in user unit as a fixed number.")
("rodCoordToString"
"rodCoordToString(
o_rodCoordObj 
[ g_dumpAR ]
);end rodCoordToString
=> t_value"
"Returns a string containing the rodCoord data in user unit as floating number.")