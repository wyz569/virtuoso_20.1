;SKILL Language Functions
("allocateInstance"
"allocateInstance( 
u_class 
) 
=> g_instance"
"Creates and returns an empty instance of the specified class. All slots of the new instance are unbound.")
("changeClass"
"changeClass( 
g_inst 
g_className 
[ g_initArgs ] 
) 
=> g_updatedInst"
"Changes the class of the given instance (g_inst) to the specified class (g_className).")
("className"
"className( 
us_class 
) 
=> s_className"
"Returns the class symbol denoting a class object.")
("classOf"
"classOf( 
g_object
) 
=> u_classObject"
"Returns the class object of which the given object is an instance.")
("classp"
"classp( 
g_object 
su_class 
) 
=> t / nil"
"Checks if the given object is an instance of the given class or is an instance of one of its subclasses.")
("defclass"
"defclass( 
s_className 
( [ s_superClassName1 ]...[ s_superClassNameN ])
( [ ( s_slotName
[ @initarg s_argName ]
[ @reader s_readerFun ]
[ @writer s_writerFun ]
[ @initform g_exp ]) 
... ] ) 
) 
=> t"
"Creates a class object with class name and optional super class name (or names) and slot specifications. This is a macro form.")
("findClass"
"findClass( 
s_className 
)
=> u_classObject / nil"
"Returns the class object associated with a symbol. The symbol is the symbolic name of the class object.")
("initializeInstance"
"initializeInstance( 
g_instance 
[ u_?initArg1    value1 ]
[ u_?initArg2    value2 ] ... 
)
=> t"
"Initializes the newly created instance of a class. initializeInstance is called by the makeInstance function.")
("isClass"
"isClass( 
g_object 
) 
=> t / nil"
"Checks if the given object is a class object.")
("makeInstance"
"makeInstance( 
us_class 
[ u_?initArg1    value1 ]
[ u_?initArg2    value2 ] ... 
)
=> g_instance"
"Creates an instance of a class, which can be given as a symbol or a class object.")
("printself"
"printself( 
g_object 
) 
=> g_result"
"A generic function which is called to print a stdObject instance.")
("setSlotValue"
"setSlotValue( 
g_standardObject 
s_slotName 
g_value 
) 
=> g_value"
"Sets the s_slotName slot of g_standardObject to g_value.")
("sharedInitialize"
"sharedInitialize( 
g_object 
g_slotList 
@rest l_initargs 
)
=> g_object / error"
"This is a generic function, which is called when an instance is created, re-initialized, updated to conform to a redefined class, or updated to conform to a different class. It is called from the initializeInstance, updateInstanceForRedefinedClass, and updateInstanceForDifferentClass functions to initialize slots of the instance g_object using the corresponding initforms.")
("slotBoundp"
"slotBoundp( 
obj 
t_slotName 
) 
=> t / nil"
"Checks if a named slot is bound to an instance or not.")
("slotUnbound"
"slotUnbound( 
u_class 
g_object 
s_slotName 
)
=> g_result"
"This function is called when the slotValue function attempts to reference an unbound slot. It signals that the value of the slot s_slotName of g_object has not been set yet. In this case, slotValue returns the result of the method.")
("slotValue"
"slotValue( 
g_standardObject 
s_slotName 
)
=> g_value"
"Returns the value contained in the slot slotName of the given standardObject.")
("ansiDefmethod"
"ansiDefmethod( 
s_name 
l_spec 
g_body 
) 
=> t"
"A SKILL++ defmethod macro for supporting lexical scoping in callNextMethod. It creates a closure for a method.")
("callAs"
"callAs( 
us_class 
s_genericFunction 
g_arg1 
[ g_arg2 ... ]
) 
=> g_value"
"Calls a method specialized for some super class of the class of a given object directly, bypassing the usual method inheritance and overriding of a generic function.")
("callNextMethod"
"callNextMethod( 
[ g_arg ... ]
) 
=> g_value"
"Calls the next applicable method for a generic function from within the current method. Returns the value returned by the method it calls.")
("defgeneric"
"defgeneric( 
s_functionName 
( s_arg1 
[ s_arg2 ... ] 
) 
[ g_exp ... ] 
) 
=> t"
"Defines a generic function with an optional default method. This is a macro form. Be sure to leave a space after the function name. See the Cadence SKILL Language User Guide for a discussion of generic functions.")
("defmethod"
"defmethod( 
s_name 
( 
( s_arg1 
  s_class 
) 
s_arg2 ... 
)
g_exp1 ...
) 
=> t"
"Defines a method for a given generic function. This is a macro form. Be sure to leave a space after s_name.")
("getMethodSpecializers"
"getMethodSpecializers(
s_genericFunction
)
=> l_classNames / nil"
"Returns the specializers of all methods currently associated with the given generic function, in a list of class names. The first element in the list is t if there is a default method.")
("isGeneric"
"isGeneric( 
g_function 
) 
=> t / nil"
"Checks if the specified symbol (function name) or funobj (function object) represents a generic SKILL++ function.")
("getGFbyClass"
"getGFbyClass( 
s_className 
[ g_nonExistent ] 
) 
=> l_methods"
"Displays the list of all generic functions specializing on a given class.")
("getApplicableMethods"
"getApplicableMethods(
s_gfName
l_args
)
=> l_funObjects"
"Returns a list of applicable methods (funObjects) for the specified generic function for a given set of arguments. The returned list contains methods in the calling order.")
("getMethodName"
"getMethodName(
U_funObject
)
=> s_name"
"Returns the method name for the given function object")
("getMethodRole"
"getMethodRole(
U_funObject
)
=> s_role / nil"
"Returns the method role for the given function object. U_funObject should be a valid generic function object.")
("getMethodSpec"
"getMethodSpec(
U_funObject
)
=> l_spec"
"Returns the list of specializer for the given funobject. U_funObject should be a valid generic method object.")
("getGFproxy"
"getGFproxy(
s_gfName
)
=> U_classObj / nil"
"Returns a proxy instance from the specified generic function object")
("nextMethodp"
"nextMethodp( 
) 
=> t / nil"
"Checks if there is a next applicable method for the current method's generic function. The current method is the method that is calling nextMethodp.")
("removeMethod"
"removeMethod( 
s_genFunction 
g_className 
[ g_method ]
) 
=> t / nil"
"Removes a given method from a generic function.")
("updateInstanceForDifferentClass"
"updateInstanceForDifferentClass( 
g_previousObj 
g_currentObj 
@rest initargs 
) 
=> t"
"A generic function, which is called from changeClass to update the specified instance (g_currentObj).")
("updateInstanceForRedefinedClass"
"updateInstanceForRedefinedClass( 
obj 
l_addedSlots 
l_deletedSlots 
l_dplList 
) 
=> t"
"It is a generic function, which is called to update all instances of a class, when a class redefinition occurs.")
("ilArgMatchesSpecializer"
"ilArgMatchesSpecializer( 
U_genericfuncObj 
s_specClass 
s_specArg
) 
=> t / nil"
"Checks if the given argument matches generic specializer")
("ilEquivalentSpecializers"
"ilEquivalentSpecializers( 
U_genericfuncObj
s_spec1
s_spec2)
=> t / nil"
"Defines a method to check if two specializers are equal (required during method redefinition).")
("ilGenerateSpecializer"
"ilGenerateSpecializer( 
U_genericfuncObj
s_specClass
s_specArg)
=> g_expression"
"Returns a SKILL expression that makes an instance of the given specializer class and optionally set the slots. In the generated SKILL expression, s_specArg can be used to initialize the slots.")
("ilSpecMoreSpecificp"
"ilSpecMoreSpecificp( 
U_genericfuncObj
s_spec1
s_spec2
s_specArg)
=> t / nil"
"Checks if spec1 is more specific than spec2. You need to define all required ilSpecMoreSpecificp methods for all existing custom specializers (so that the system can find a method to compare any pair of custom specializers).")
("subclassesOf"
"subclassesOf( 
u_classObject 
) 
=> l_subClasses"
"Returns the ordered list of all (immediate) subclasses of u_classObject. Each element in the list is a class object.")
("subclassp"
"subclassp( 
u_classObject1 
u_classObject2 
) 
=> t | nil"
"Predicate function that checks if classObject1 is a subclass of classObject2.")
("superclassesOf"
"superclassesOf( 
u_classObject 
) 
=> l_superClasses"
"Returns the ordered list of all super classes of u_classObject. Each element in the list is a class object.")
("addDependent"
"addDependent(
g_object
g_dependent
)
=> t | nil"
"Registers a dependent object for given object. SKILL checks if g_dependent already exists as a dependent of g_object (using the eqv operator), then g_dependent is not registered again and nil is returned.")
("getDependents"
"getDependents(
g_object
)
=> l_dependents"
"Returns a list of dependents registered for the given SKILL object, which could be a class or a generic function")
("removeDependent"
"removeDependent(
g_object
g_dependent
)
=> t | nil"
"Removes a dependent object from the given object.")
("updateDependent"
"updateDependent(
u_class
g_dependent
s_notifType
u_classObj
)
=> t"
"Updates the dependents of a SKILL object, which could be a class or a generic function, when the SKILL object is modified. The SKILL engine calls this method for each g_dependent at different times. For example, if g_dependent is a method, the SKILL engine calls updateDependent at the time of adding or removing the method; whereas, for dependent classes the SKILL engine calls the updateDependent method at the end of class creation.")