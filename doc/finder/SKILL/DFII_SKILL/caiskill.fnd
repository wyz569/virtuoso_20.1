;SKILL Language Functions
("gdmCreateSpec"
"gdmCreateSpec(
t_libName | emptyString | nil
t_cellName | emptyString | nil
t_viewName | emptyString | nil
t_fileName | emptyString | nil
t_namespace
[ x_gdmOptions ]
)
=> G_gdmSpecId / nil"
"Creates a gdmSpec object, a user-defined type of SKILL object, according to the options you specify. You must specify at least one of the first four arguments-a library name, cell name, view name, or file name. If you specify a cell name, you must also specify a library name. If you specify a view name, you must also specify a cell name and a library name.")
("gdmCreateSpecFromDDID"
"gdmCreateSpecFromDDID(
b_ddId
)
=> G_gdmSpecId / nil"
"Creates a gdmSpec, a user-defined type of SKILL object, from a ddId object.")
("gdmInspectSpec"
"gdmInspectSpec(
G_gdmSpecId
[ t_namespace ]
)
=> l_comps"
"From a gdmSpec object, extracts and returns the library name, cell name, view name, and file name, if they exist in the gdmSpec object. The information returned will be in the name space you specify in t_namespace.")
("gdmCreateSpecList"
"gdmCreateSpecList(
)
=> q_gdmSpecList / nil"
"Creates a gdmSpecList object, to which you can add gdmSpec objects later with the gdmAddSpecToSpecList function.")
("gdmAddSpecToSpecList"
"gdmAddSpecToSpecList(
G_gdmSpec
q_gdmSpecList
)
=> t / nil"
"Adds a gdmSpec object to a gdmSpecList object. This function automatically increases the size of the gdmSpecList object so that more gdmSpec objects can be added, if required.")
("gdmResetSpecList"
"gdmResetSpecList(
q_gdmSpecList
)
=> t / nil"
"Resets the gdmSpecList so that you can obtain gdmSpec objects from it with successive calls of the gdmNextFromSpecList function.")
("gdmNextFromSpecList"
"gdmNextFromSpecList(
q_gdmSpecList
)
=> G_gdmSpecId / nil"
"Takes a gdmSpecList object and returns a gdmSpec object from it. The first time you call this function, it returns the first gdmSpec object in the gdmSpecList. Each successive call gets the next gdmSpec object.")
("gdmIsSpecId"
"gdmIsSpecId(
g_object
)
=> t / nil"
"Checks whether an object is a valid gdmSpec object.")
("gdmSpecType"
"gdmSpecType(
G_gdmSpecId
)
=> t_specType / nil"
"Returns the type of a gdmSpec object. A gdmSpec object can be one of the following types: lib, libCell, libCellView, libFile, libCellFile, libCellViewFile, directory, or file.")
("gdmSpecListp"
"gdmSpecListp(
g_object
)
=> t / nil"
"Checks whether an object is a gdmSpecList.")
("gdmSpecp"
"gdmSpecp(
g_object
)
=> t / nil"
"Checks whether an object is of type gdmSpec, a user-defined type of SKILL object.")
("gdmcancel"
"gdmcancel(
{ G_gdmSpec | q_gdmSpecList }
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Cancels the checked-out status of the library, cell, view, directory, or file that G_gdmSpec represents. Co-managed files in a view are always canceled as a group; co-managed set behavior applies only if G_gdmSpec consists of library elements.")
("gdmci"
"gdmci(
{ G_gdmSpec | q_gdmSpecList } 
[ g_description ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Checks in the library, cell, view, directory, or file that G_gdmSpec represents. Co-managed files in a view are always checked in as a group; co-managed set behavior applies only if G_gdmSpec consists of library elements.")
("gdmco"
"gdmco(
{ G_gdmSpec | q_gdmSpecList } 
[ g_version ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Checks out the library, cell, view, directory, or file that G_gdmSpec represents. Co-managed files in a view are always checked out as a group; co-managed set behavior applies only if G_gdmSpec consists of library elements.")
("gdmdelete"
"gdmdelete(
{ G_gdmSpec | q_gdmSpecList }
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Deletes the library, cell, view, directory, or file that G_gdmSpec represents from the workarea and the default configuration.")
("gdmexport"
"gdmexport(
{ G_gdmSpec | q_gdmSpecList }
g_destination
[ g_version ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Exports the library, cell, view, directory, or file that G_gdmSpec represents from the design management system data repository to the destination you specify.")
("gdmhistory"
"gdmhistory(
{ G_gdmSpec | q_gdmSpecList }
x_information
)
=> g_returnInfo / nil"
"Returns information about the version history of a file.")
("gdmsetdefver"
"gdmsetdefver(
{ G_gdmSpec | q_gdmSpecList }
g_version
[ g_name ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Sets g_version as the default version of the library, cell, view, directory, or file that G_gdmSpec represents.")
("gdmsetname"
"gdmsetname(
{ G_gdmSpec | q_gdmSpecList }
g_name
[ g_version ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Associates the name you specify with the library, cell, view, directory, or file that G_gdmSpec represents.")
("gdmstatus"
"gdmstatus(
{ G_gdmSpec | q_gdmSpecList }
x_information
)
=> l_fileStatus / nil"
"Returns the design management status of the library, cell, view, directory, or file that G_gdmSpec represents.")
("gdmsubmit"
"gdmsubmit(
{ G_gdmSpec | q_gdmSpecList }
[ g_description ]
[ g_name ]
[ x_gdmOptions ]
[ g_xtra ]
)
=> t / nil"
"Submits the files G_gdmSpec represents for the release. Co-managed files in a view are always submitted as a group; co-managed set behavior applies only if G_gdmSpec consists of library elements.")
("gdmupdate"
"gdmupdate(
{ G_gdmSpec | q_gdmSpecList }
[ g_version ]
[ g_name ]
[ x_gdmOptions ]
[ g_xtra ] 
)
=> t / nil"
"Makes files in the workarea available for reading. Co-managed files are updated in the same grouping in which they were checked in; co-managed behavior applies only if G_gdmSpec consists of library elements.")
("gdmExecute"
"gdmExecute(
g_general
)
=> t / nil"
"Command line executable.")
("gdmRemovename"
"gdmRemovename(
G_gdmSpec
[ g_version ]
[ g_name ]

)
=> t / nil"
"Requests that GDM removes a name from the specified files.")
("gdmObjIsCreated"
"gdmObjIsCreated(
g_name

)
=> t / nil"
"Checks whether a view or file has already been created by another user in the same DM.")
("nmpGetSpaceNames"
"nmpGetSpaceNames()
=> l_namespaces"
"Returns a list of name spaces used by Cadence applications.")
("nmpIsLegal<NameSpace>"
"nmpIsLegal<NameSpace> (
t_identifier
)
=> t / nil"
"Checks if the identifier you specify is legal in the name space. In the function name, substitute <NameSpace> with any of the name spaces returned by the function nmpGetSpaceNames(). For example, nmpIsLegalVerilog() or nmpIsLegalVHDL().")
("nmp<NameSpace>To<NameSpace>"
"nmp<NameSpace>To<NameSpace>(
t_identifier
)
=> t_identifier"
"Maps t_identifier from the first name space to the second name space. In the function name, substitute the first <NameSpace> with the name space to which the identifier belongs and substitute the second <NameSpace> with the name space to which you want to convert the identifier. For example, nmpCDBAToVerilog() or nmpVHDLAMSToVHDL().")
("nmp<Namespace>ToIdent"
"nmp<NameSpace>ToIdent(
t_identifier
)
=> m_Ident"
"Maps t_identifier from a name space to an nmp Ident. In the function name, substitute <NameSpace> with the name space to which the identifier belongs. For example, nmpCDBAToIdent(). You can get a list of Cadence name spaces from the nmpGetSpaceNames() function.")
("nmpIdentTo<NameSpace>"
"nmpIdentTo<NameSpace>(
m_Ident
)
=> t_identifier"
"Maps an nmp Ident to a name space. In the function name, substitute <NameSpace> with the name space to which you want to map the Ident. For example, nmpIdentToSpectre(). You can get a list of Cadence name spaces from the nmpGetSpaceNames() function.")
("nmpPathNameSpaceToNameSpace"
"nmpPath<NameSpace>To<NameSpace>(
t_Inst
)
=> t_Inst / nil"
"Converts a simple instance vector from the first name space to the second name space.")
("nmpIsLegalCDBA"
"nmpIsLegalCDBA()"
"Checks if the identifier you specify is legal in CDBA.")
("nmpIsLegalConcept"
"nmpIsLegalConcept()"
"Checks if the identifier you specify is legal in Concept.")
("nmpIsLegalDef"
"nmpIsLegalDef()"
"Checks if the identifier you specify is legal in DEF.")
("nmpIsLegalGcf"
"nmpIsLegalGcf()"
"Checks if the identifier you specify is legal in GCF.")
("nmpIsLegalGenesis"
"nmpIsLegalGenesis()"
"Checks if the identifier you specify is legal in Genesis.")
("nmpIsLegalLef"
"nmpIsLegalLef()"
"Checks if the identifier you specify is legal in LEF.")
("nmpIsLegalPrint"
"nmpIsLegalPrint()"
"Checks if the identifier you specify is legal in Print.")
("nmpIsLegalSdf"
"nmpIsLegalSdf()"
"Checks if the identifier you specify is legal in SDF.")
("nmpIsLegalSpf"
"nmpIsLegalSpf()"
"Checks if the identifier you specify is legal in SPF.")
("nmpIsLegalSpectre"
"nmpIsLegalSpectre()"
"Checks if the identifier you specify is legal in Spectre.")
("nmpIsLegalSpectreHDL"
"nmpIsLegalSpectreHDL()"
"Checks if the identifier you specify is legal in SpectreHDL.")
("nmpIsLegalSpef"
"nmpIsLegalSpef()"
"Checks if the identifier you specify is legal in SPEF.")
("nmpIsLegalSpice"
"nmpIsLegalSpice()"
"Checks if the identifier you specify is legal in Spice.")
("nmpIsLegalSysVerilog"
"nmpIsLegalSysVerilog()"
"Checks if the identifier you specify is legal in SysVerilog.")
("nmpIsLegalVerilog"
"nmpIsLegalVerilog()"
"Checks if the identifier you specify is legal in Verilog.")
("nmpIsLegalVerilogA"
"nmpIsLegalVerilogA()"
"Checks if the identifier you specify is legal in VerilogA.")
("nmpIsLegalVerilogAMS"
"nmpIsLegalVerilogAMS()"
"Checks if the identifier you specify is legal in VerilogAMS.")
("nmpIsLegalVHDL"
"nmpIsLegalVHDL()"
"Checks if the identifier you specify is legal in VHDL.")
("nmpIsLegalVHDLAMS"
"nmpIsLegalVHDLAMS()"
"Checks if the identifier you specify is legal in VHDLAMS.")
("nmpIsLegalVHDL87"
"nmpIsLegalVHDL87()"
"Checks if the identifier you specify is legal in VHDL87.")
("nmpCDBAToIdent"
"nmpCDBAToIdent()"
"Maps identifier from CDBA to an nmp Ident.")
("nmpConceptToIdent"
"nmpConceptToIdent()"
"Maps identifier from Concept to an nmp Ident.")
("nmpDefToIdent"
"nmpDefToIdent()"
"Maps identifier from Def to an nmp Ident.")
("nmpGcfToIdent"
"nmpGcfToIdent()"
"Maps identifier from Gcf to an nmp Ident.")
("nmpGenesisToIdent"
"nmpGenesisToIdent()"
"Maps identifier from Genesis to an nmp Ident.")
("nmpLefToIdent"
"nmpLefToIdent()"
"Maps identifier from Lef to an nmp Ident.")
("nmpPrintToIdent"
"nmpPrintToIdent()"
"Maps identifier from Print to an nmp Ident.")
("nmpSdfToIdent"
"nmpSdfToIdent()"
"Maps identifier from Sdf to an nmp Ident.")
("nmpSpfToIdent"
"nmpSpfToIdent()"
"Maps identifier from Spf to an nmp Ident.")
("nmpSpectreToIdent"
"nmpSpectreToIdent()"
"Maps identifier from Spectre to an nmp Ident.")
("nmpSpectreHDLToIdent"
"nmpSpectreHDLToIdent()"
"Maps identifier from SpectreHDL to an nmp Ident.")
("nmpSpefToIdent"
"nmpSpefToIdent()"
"Maps identifier from Spef to an nmp Ident.")
("nmpSpiceToIdent"
"nmpSpiceToIdent()"
"Maps identifier from Spice to an nmp Ident.")
("nmpSysVerilogToIdent"
"nmpSysVerilogToIdent()"
"Maps identifier from SysVerilog to an nmp Ident.")
("nmpVerilogToIdent"
"nmpVerilogToIdent()"
"Maps identifier from Verilog to an nmp Ident.")
("nmpVerilogAToIdent"
"nmpVerilogAToIdent()"
"Maps identifier from VerilogA to an nmp Ident.")
("nmpVerilogAMSToIdent"
"nmpVerilogAMSToIdent()"
"Maps identifier from VerilogAMS to an nmp Ident.")
("nmpVHDLToIdent"
"nmpVHDLToIdent()"
"Maps identifier from VHDL to an nmp Ident.")
("nmpVHDLAMSToIdent"
"nmpVHDLAMSToIdent()"
"Maps identifier from VHDLAMS to an nmp Ident.")
("nmpVHDL87ToIdent"
"nmpVHDL87ToIdent()"
"Maps identifier from VHDL87 to an nmp Ident.")
("nmpIdentToCDBA"
"nmpIdentToCDBA()"
"Maps an nmp Ident to CDBA.")
("nmpIdentToConcept"
"nmpIdentToConcept()"
"Maps an nmp Ident to Concept.")
("nmpIdentToDef"
"nmpIdentToDef()"
"Maps an nmp Ident to Def.")
("nmpIdentToGcf"
"nmpIdentToGcf()"
"Maps an nmp Ident to Gcf.")
("nmpIdentToGenesis"
"nmpIdentToGenesis()"
"Maps an nmp Ident to Genesis.")
("nmpIdentToLef"
"nmpIdentToLef()"
"Maps an nmp Ident to Lef.")
("nmpIdentToPrint"
"nmpIdentToPrint()"
"Maps an nmp Ident to Print.")
("nmpIdentToSdf"
"nmpIdentToSdf()"
"Maps an nmp Ident to Sdf.")
("nmpIdentToSpf"
"nmpIdentToSpf()"
"Maps an nmp Ident to Spf.")
("nmpIdentToSpectre"
"nmpIdentToSpectre()"
"Maps an nmp Ident to Spectre.")
("nmpIdentToSpectreHDL"
"nmpIdentToSpectreHDL()"
"Maps an nmp Ident to SpectreHDL.")
("nmpIdentToSpef"
"nmpIdentToSpef()"
"Maps an nmp Ident to Spef.")
("nmpIdentToSpice"
"nmpIdentToSpice()"
"Maps an nmp Ident to Spice.")
("nmpIdentToSysVerilog"
"nmpIdentToSysVerilog()"
"Maps an nmp Ident to SysVerilog.")
("nmpIdentToVerilog"
"nmpIdentToVerilog()"
"Maps an nmp Ident to Verilog.")
("nmpIdentToVerilogA"
"nmpIdentToVerilogA()"
"Maps an nmp Ident to VerilogA.")
("nmpIdentToVerilogAMS"
"nmpIdentToVerilogAMS()"
"Maps an nmp Ident to VerilogAMS.")
("nmpIdentToVHDL"
"nmpIdentToVHDL()"
"Maps an nmp Ident to VHDL.")
("nmpIdentToVHDLAMS"
"nmpIdentToVHDLAMS()"
"Maps an nmp Ident to VHDLAMS.")
("nmpIdentToVHDL87"
"nmpIdentToVHDL87()"
"Maps an nmp Ident to VHDL87.")
("nmpAsciiToSysVerilog"
"nmpAsciiToSysVerilog()"
"Maps identifier from Ascii to SysVerilog.")
("nmpCDBAToConcept"
"nmpCDBAToConcept()"
"Maps identifier from CDBA to Concept.")
("nmpCDBAToCDBAFlat"
"nmpCDBAToCDBAFlat()"
"Maps identifier from CDBA to CDBAFlat.")
("nmpCDBAToDef"
"nmpCDBAToDef()"
"Maps identifier from CDBA to Def.")
("nmpCDBAToGcf"
"nmpCDBAToGcf()"
"Maps identifier from CDBA to Gcf.")
("nmpCDBAToGenesis"
"nmpCDBAToGenesis()"
"Maps identifier from CDBA to Genesis.")
("nmpCDBAToLef"
"nmpCDBAToLef()"
"Maps identifier from CDBA to Lef.")
("nmpCDBAToPrint"
"nmpCDBAToPrint()"
"Maps identifier from CDBA to Print.")
("nmpCDBAToSdf"
"nmpCDBAToSdf()"
"Maps identifier from CDBA to Sdf.")
("nmpCDBAToSpf"
"nmpCDBAToSpf()"
"Maps identifier from CDBA to Spf.")
("nmpCDBAToSpectre"
"nmpCDBAToSpectre()"
"Maps identifier from CDBA to Spectre.")
("nmpCDBAToSpectreHDL"
"nmpCDBAToSpectreHDL()"
"Maps identifier from CDBA to SpectreHDL.")
("nmpCDBAToSpef"
"nmpCDBAToSpef()"
"Maps identifier from CDBA to Spef.")
("nmpCDBAToSpice"
"nmpCDBAToSpice()"
"Maps identifier from CDBA to Spice.")
("nmpCDBAToSysVerilog"
"nmpCDBAToSysVerilog()"
"Maps identifier from CDBA to SysVerilog.")
("nmpCDBAToVerilog"
"nmpCDBAToVerilog()"
"Maps identifier from CDBA to Verilog.")
("nmpCDBAToVerilogA"
"nmpCDBAToVerilogA()"
"Maps identifier from CDBA to VerilogA.")
("nmpCDBAToVerilogAMS"
"nmpCDBAToVerilogAMS()"
"Maps identifier from CDBA to VerilogAMS.")
("nmpCDBAToVHDL"
"nmpCDBAToVHDL()"
"Maps identifier from CDBA to VHDL.")
("nmpCDBAToVHDLAMS"
"nmpCDBAToVHDLAMS()"
"Maps identifier from CDBA to VHDLAMS.")
("nmpCDBAToVHDL87"
"nmpCDBAToVHDL87()"
"Maps identifier from CDBA to VHDL87.")
("nmpCDBAFlatToCDBA"
"nmpCDBAFlatToCDBA()"
"Maps identifier from CDBAFlat to CDBA.")
("nmpConceptToCDBA"
"nmpConceptToCDBA()"
"Maps identifier from Concept to CDBA.")
("nmpConceptToDef"
"nmpConceptToDef()"
"Maps identifier from Concept to Def.")
("nmpConceptToGcf"
"nmpConceptToGcf()"
"Maps identifier from Concept to Gcf.")
("nmpConceptToGenesis"
"nmpConceptToGenesis()"
"Maps identifier from Concept to Genesis.")
("nmpConceptToLef"
"nmpConceptToLef()"
"Maps identifier from Concept to Lef.")
("nmpConceptToPrint"
"nmpConceptToPrint()"
"Maps identifier from Concept to Print.")
("nmpConceptToSdf"
"nmpConceptToSdf()"
"Maps identifier from Concept to Sdf.")
("nmpConceptToSpf"
"nmpConceptToSpf()"
"Maps identifier from Concept to Spf.")
("nmpConceptToSpectre"
"nmpConceptToSpectre()"
"Maps identifier from Concept to Spectre.")
("nmpConceptToSpectreHDL"
"nmpConceptToSpectreHDL()"
"Maps identifier from Concept to SpectreHDL.")
("nmpConceptToSpef"
"nmpConceptToSpef()"
"Maps identifier from Concept to Spef.")
("nmpConceptToSpice"
"nmpConceptToSpice()"
"Maps identifier from Concept to Spice.")
("nmpConceptToSysVerilog"
"nmpConceptToSysVerilog()"
"Maps identifier from Concept to SysVerilog.")
("nmpConceptToVerilog"
"nmpConceptToVerilog()"
"Maps identifier from Concept to Verilog.")
("nmpConceptToVerilogA"
"nmpConceptToVerilogA()"
"Maps identifier from Concept to VerilogA.")
("nmpConceptToVerilogAMS"
"nmpConceptToVerilogAMS()"
"Maps identifier from Concept to VerilogAMS.")
("nmpConceptToVHDL"
"nmpConceptToVHDL()"
"Maps identifier from Concept to VHDL.")
("nmpConceptToVHDLAMS"
"nmpConceptToVHDLAMS()"
"Maps identifier from Concept to VHDLAMS.")
("nmpConceptToVHDL87"
"nmpConceptToVHDL87()"
"Maps identifier from Concept to VHDL87.")
("nmpDefToCDBA"
"nmpDefToCDBA()"
"Maps identifier from Def to CDBA.")
("nmpDefToConcept"
"nmpDefToConcept()"
"Maps identifier from Def to Concept.")
("nmpDefToGcf"
"nmpDefToGcf()"
"Maps identifier from Def to Gcf.")
("nmpDefToGenesis"
"nmpDefToGenesis()"
"Maps identifier from Def to Genesis.")
("nmpDefToLef"
"nmpDefToLef()"
"Maps identifier from Def to Lef.")
("nmpDefToPrint"
"nmpDefToPrint()"
"Maps identifier from Def to Print.")
("nmpDefToSdf"
"nmpDefToSdf()"
"Maps identifier from Def to Sdf.")
("nmpDefToSpf"
"nmpDefToSpf()"
"Maps identifier from Def to Spf.")
("nmpDefToSpectre"
"nmpDefToSpectre()"
"Maps identifier from Def to Spectre.")
("nmpDefToSpectreHDL"
"nmpDefToSpectreHDL()"
"Maps identifier from Def to SpectreHDL.")
("nmpDefToSpef"
"nmpDefToSpef()"
"Maps identifier from Def to Spef.")
("nmpDefToSpice"
"nmpDefToSpice()"
"Maps identifier from Def to Spice.")
("nmpDefToSysVerilog"
"nmpDefToSysVerilog()"
"Maps identifier from Def to SysVerilog.")
("nmpDefToVerilog"
"nmpDefToVerilog()"
"Maps identifier from Def to Verilog.")
("nmpDefToVerilogA"
"nmpDefToVerilogA()"
"Maps identifier from Def to VerilogA.")
("nmpDefToVerilogAMS"
"nmpDefToVerilogAMS()"
"Maps identifier from Def to VerilogAMS.")
("nmpDefToVHDL"
"nmpDefToVHDL()"
"Maps identifier from Def to VHDL.")
("nmpDefToVHDLAMS"
"nmpDefToVHDLAMS()"
"Maps identifier from Def to VHDLAMS.")
("nmpDefToVHDL87"
"nmpDefToVHDL87()"
"Maps identifier from Def to VHDL87.")
("nmpGcfToCDBA"
"nmpGcfToCDBA()"
"Maps identifier from Gcf to CDBA.")
("nmpGcfToConcept"
"nmpGcfToConcept()"
"Maps identifier from Gcf to Concept.")
("nmpGcfToDef"
"nmpGcfToDef()"
"Maps identifier from Gcf to Def.")
("nmpGcfToGenesis"
"nmpGcfToGenesis()"
"Maps identifier from Gcf to Genesis.")
("nmpGcfToLef"
"nmpGcfToLef()"
"Maps identifier from Gcf to Lef.")
("nmpGcfToPrint"
"nmpGcfToPrint()"
"Maps identifier from Gcf to Print.")
("nmpGcfToSdf"
"nmpGcfToSdf()"
"Maps identifier from Gcf to Sdf.")
("nmpGcfToSpf"
"nmpGcfToSpf()"
"Maps identifier from Gcf to Spf.")
("nmpGcfToSpectre"
"nmpGcfToSpectre()"
"Maps identifier from Gcf to Spectre.")
("nmpGcfToSpectreHDL"
"nmpGcfToSpectreHDL()"
"Maps identifier from Gcf to SpectreHDL.")
("nmpGcfToSpef"
"nmpGcfToSpef()"
"Maps identifier from Gcf to Spef.")
("nmpGcfToSpice"
"nmpGcfToSpice()"
"Maps identifier from Gcf to Spice.")
("nmpGcfToSysVerilog"
"nmpGcfToSysVerilog()"
"Maps identifier from Gcf to SysVerilog.")
("nmpGcfToVerilog"
"nmpGcfToVerilog()"
"Maps identifier from Gcf to Verilog.")
("nmpGcfToVerilogA"
"nmpGcfToVerilogA()"
"Maps identifier from Gcf to VerilogA.")
("nmpGcfToVerilogAMS"
"nmpGcfToVerilogAMS()"
"Maps identifier from Gcf to VerilogAMS.")
("nmpGcfToVHDL"
"nmpGcfToVHDL()"
"Maps identifier from Gcf to VHDL.")
("nmpGcfToVHDLAMS"
"nmpGcfToVHDLAMS()"
"Maps identifier from Gcf to VHDLAMS.")
("nmpGcfToVHDL87"
"nmpGcfToVHDL87()"
"Maps identifier from Gcf to VHDL87.")
("nmpGenesisToCDBA"
"nmpGenesisToCDBA()"
"Maps identifier from Genesis to CDBA.")
("nmpGenesisToConcept"
"nmpGenesisToConcept()"
"Maps identifier from Genesis to Concept.")
("nmpGenesisToDef"
"nmpGenesisToDef()"
"Maps identifier from Genesis to Def.")
("nmpGenesisToGcf"
"nmpGenesisToGcf()"
"Maps identifier from Genesis to Gcf.")
("nmpGenesisToLef"
"nmpGenesisToLef()"
"Maps identifier from Genesis to Lef.")
("nmpGenesisToPrint"
"nmpGenesisToPrint()"
"Maps identifier from Genesis to Print.")
("nmpGenesisToSdf"
"nmpGenesisToSdf()"
"Maps identifier from Genesis to Sdf.")
("nmpGenesisToSpf"
"nmpGenesisToSpf()"
"Maps identifier from Genesis to Spf.")
("nmpGenesisToSpectre"
"nmpGenesisToSpectre()"
"Maps identifier from Genesis to Spectre.")
("nmpGenesisToSpectreHDL"
"nmpGenesisToSpectreHDL()"
"Maps identifier from Genesis to SpectreHDL.")
("nmpGenesisToSpef"
"nmpGenesisToSpef()"
"Maps identifier from Genesis to Spef.")
("nmpGenesisToSpice"
"nmpGenesisToSpice()"
"Maps identifier from Genesis to Spice.")
("nmpGenesisToSysVerilog"
"nmpGenesisToSysVerilog()"
"Maps identifier from Genesis to SysVerilog.")
("nmpGenesisToVerilog"
"nmpGenesisToVerilog()"
"Maps identifier from Genesis to Verilog.")
("nmpGenesisToVerilogA"
"nmpGenesisToVerilogA()"
"Maps identifier from Genesis to VerilogA.")
("nmpGenesisToVerilogAMS"
"nmpGenesisToVerilogAMS()"
"Maps identifier from Genesis to VerilogAMS.")
("nmpGenesisToVHDL"
"nmpGenesisToVHDL()"
"Maps identifier from Genesis to VHDL.")
("nmpGenesisToVHDLAMS"
"nmpGenesisToVHDLAMS()"
"Maps identifier from Genesis to VHDLAMS.")
("nmpGenesisToVHDL87"
"nmpGenesisToVHDL87()"
"Maps identifier from Genesis to VHDL87.")
("nmpLefToCDBA"
"nmpLefToCDBA()"
"Maps identifier from Lef to CDBA.")
("nmpLefToConcept"
"nmpLefToConcept()"
"Maps identifier from Lef to Concept.")
("nmpLefToDef"
"nmpLefToDef()"
"Maps identifier from Lef to Def.")
("nmpLefToGcf"
"nmpLefToGcf()"
"Maps identifier from Lef to Gcf.")
("nmpLefToGenesis"
"nmpLefToGenesis()"
"Maps identifier from Lef to Genesis.")
("nmpLefToPrint"
"nmpLefToPrint()"
"Maps identifier from Lef to Print.")
("nmpLefToSdf"
"nmpLefToSdf()"
"Maps identifier from Lef to Sdf.")
("nmpLefToSpf"
"nmpLefToSpf()"
"Maps identifier from Lef to Spf.")
("nmpLefToSpectre"
"nmpLefToSpectre()"
"Maps identifier from Lef to Spectre.")
("nmpLefToSpectreHDL"
"nmpLefToSpectreHDL()"
"Maps identifier from Lef to SpectreHDL.")
("nmpLefToSpef"
"nmpLefToSpef()"
"Maps identifier from Lef to Spef.")
("nmpLefToSpice"
"nmpLefToSpice()"
"Maps identifier from Lef to Spice.")
("nmpLefToSysVerilog"
"nmpLefToSysVerilog()"
"Maps identifier from Lef to SysVerilog.")
("nmpLefToVerilog"
"nmpLefToVerilog()"
"Maps identifier from Lef to Verilog.")
("nmpLefToVerilogA"
"nmpLefToVerilogA()"
"Maps identifier from Lef to VerilogA.")
("nmpLefToVerilogAMS"
"nmpLefToVerilogAMS()"
"Maps identifier from Lef to VerilogAMS.")
("nmpLefToVHDL"
"nmpLefToVHDL()"
"Maps identifier from Lef to VHDL.")
("nmpLefToVHDLAMS"
"nmpLefToVHDLAMS()"
"Maps identifier from Lef to VHDLAMS.")
("nmpLefToVHDL87"
"nmpLefToVHDL87()"
"Maps identifier from Lef to VHDL87.")
("nmpPrintToCDBA"
"nmpPrintToCDBA()"
"Maps identifier from Print to CDBA.")
("nmpPrintToConcept"
"nmpPrintToConcept()"
"Maps identifier from Print to Concept.")
("nmpPrintToDef"
"nmpPrintToDef()"
"Maps identifier from Print to Def.")
("nmpPrintToGcf"
"nmpPrintToGcf()"
"Maps identifier from Print to Gcf.")
("nmpPrintToGenesis"
"nmpPrintToGenesis()"
"Maps identifier from Print to Genesis.")
("nmpPrintToLef"
"nmpPrintToLef()"
"Maps identifier from Print to Lef.")
("nmpPrintToSdf"
"nmpPrintToSdf()"
"Maps identifier from Print to Sdf.")
("nmpPrintToSpf"
"nmpPrintToSpf()"
"Maps identifier from Print to Spf.")
("nmpPrintToSpectre"
"nmpPrintToSpectre()"
"Maps identifier from Print to Spectre.")
("nmpPrintToSpectreHDL"
"nmpPrintToSpectreHDL()"
"Maps identifier from Print to SpectreHDL.")
("nmpPrintToSpef"
"nmpPrintToSpef()"
"Maps identifier from Print to Spef.")
("nmpPrintToSpice"
"nmpPrintToSpice()"
"Maps identifier from Print to Spice.")
("nmpPrintToSysVerilog"
"nmpPrintToSysVerilog()"
"Maps identifier from Print to SysVerilog.")
("nmpPrintToVerilog"
"nmpPrintToVerilog()"
"Maps identifier from Print to Verilog.")
("nmpPrintToVerilogA"
"nmpPrintToVerilogA()"
"Maps identifier from Print to VerilogA.")
("nmpPrintToVerilogAMS"
"nmpPrintToVerilogAMS()"
"Maps identifier from Print to VerilogAMS.")
("nmpPrintToVHDL"
"nmpPrintToVHDL()"
"Maps identifier from Print to VHDL.")
("nmpPrintToVHDLAMS"
"nmpPrintToVHDLAMS()"
"Maps identifier from Print to VHDLAMS.")
("nmpPrintToVHDL87"
"nmpPrintToVHDL87()"
"Maps identifier from Print to VHDL87.")
("nmpSdfToCDBA"
"nmpSdfToCDBA()"
"Maps identifier from Sdf to CDBA.")
("nmpSdfToConcept"
"nmpSdfToConcept()"
"Maps identifier from Sdf to Concept.")
("nmpSdfToDef"
"nmpSdfToDef()"
"Maps identifier from Sdf to Def.")
("nmpSdfToGcf"
"nmpSdfToGcf()"
"Maps identifier from Sdf to Gcf.")
("nmpSdfToGenesis"
"nmpSdfToGenesis()"
"Maps identifier from Sdf to Genesis.")
("nmpSdfToLef"
"nmpSdfToLef()"
"Maps identifier from Sdf to Lef.")
("nmpSdfToPrint"
"nmpSdfToPrint()"
"Maps identifier from Sdf to Print.")
("nmpSdfToSpf"
"nmpSdfToSpf()"
"Maps identifier from Sdf to Spf.")
("nmpSdfToSpectre"
"nmpSdfToSpectre()"
"Maps identifier from Sdf to Spectre.")
("nmpSdfToSpectreHDL"
"nmpSdfToSpectreHDL()"
"Maps identifier from Sdf to SpectreHDL.")
("nmpSdfToSpef"
"nmpSdfToSpef()"
"Maps identifier from Sdf to Spef.")
("nmpSdfToSpice"
"nmpSdfToSpice()"
"Maps identifier from Sdf to Spice.")
("nmpSdfToSysVerilog"
"nmpSdfToSysVerilog()"
"Maps identifier from Sdf to SysVerilog.")
("nmpSdfToVerilog"
"nmpSdfToVerilog()"
"Maps identifier from Sdf to Verilog.")
("nmpSdfToVerilogA"
"nmpSdfToVerilogA()"
"Maps identifier from Sdf to VerilogA.")
("nmpSdfToVerilogAMS"
"nmpSdfToVerilogAMS()"
"Maps identifier from Sdf to VerilogA.")
("nmpSdfToVHDL"
"nmpSdfToVHDL()"
"Maps identifier from Sdf to VHDL.")
("nmpSdfToVHDLAMS"
"nmpSdfToVHDLAMS()"
"Maps identifier from Sdf to VerilogAMS.")
("nmpSdfToVHDL87"
"nmpSdfToVHDL87()"
"Maps identifier from Sdf to VHDL87.")
("nmpSpfToCDBA"
"nmpSpfToCDBA()"
"Maps identifier from Spf to CDBA.")
("nmpSpfToConcept"
"nmpSpfToConcept()"
"Maps identifier from Spf to Concept.")
("nmpSpfToDef"
"nmpSpfToDef()"
"Maps identifier from Spf to Def.")
("nmpSpfToGcf"
"nmpSpfToGcf()"
"Maps identifier from Spf to Gcf.")
("nmpSpfToGenesis"
"nmpSpfToGenesis()"
"Maps identifier from Spf to Genesis.")
("nmpSpfToLef"
"nmpSpfToLef()"
"Maps identifier from Spf to Lef.")
("nmpSpfToPrint"
"nmpSpfToPrint()"
"Maps identifier from Spf to Print.")
("nmpSpfToSdf"
"nmpSpfToSdf()"
"Maps identifier from Spf to Sdf.")
("nmpSpfToSpectre"
"nmpSpfToSpectre()"
"Maps identifier from Spf to Spectre.")
("nmpSpfToSpectreHDL"
"nmpSpfToSpectreHDL()"
"Maps identifier from Spf to SpectreHDL.")
("nmpSpfToSpef"
"nmpSpfToSpef()"
"Maps identifier from Spf to Spef.")
("nmpSpfToSpice"
"nmpSpfToSpice()"
"Maps identifier from Spf to Spice.")
("nmpSpfToSysVerilog"
"nmpSpfToSysVerilog()"
"Maps identifier from Spf to SysVerilog.")
("nmpSpfToVerilog"
"nmpSpfToVerilog()"
"Maps identifier from Spf to Verilog.")
("nmpSpfToVerilogA"
"nmpSpfToVerilogA()"
"Maps identifier from Spf to VerilogA.")
("nmpSpfToVerilogAMS"
"nmpSpfToVerilogAMS()"
"Maps identifier from Spf to VerilogAMS.")
("nmpSpfToVHDL"
"nmpSpfToVHDL()"
"Maps identifier from Spf to VHDL.")
("nmpSpfToVHDLAMS"
"nmpSpfToVHDLAMS()"
"Maps identifier from Spf to VHDLAMS.")
("nmpSpfToVHDL87"
"nmpSpfToVHDL87()"
"Maps identifier from Spf to VHDL87.")
("nmpSpectreToCDBA"
"nmpSpectreToCDBA()"
"Maps identifier from Spectre to CDBA.")
("nmpSpectreToConcept"
"nmpSpectreToConcept()"
"Maps identifier from Spectre to Concept.")
("nmpSpectreToDef"
"nmpSpectreToDef()"
"Maps identifier from Spectre to Def.")
("nmpSpectreToGcf"
"nmpSpectreToGcf()"
"Maps identifier from Spectre to Gcf.")
("nmpSpectreToGenesis"
"nmpSpectreToGenesis()"
"Maps identifier from Spectre to Genesis.")
("nmpSpectreToLef"
"nmpSpectreToLef()"
"Maps identifier from Spectre to Lef.")
("nmpSpectreToPrint"
"nmpSpectreToPrint()"
"Maps identifier from Spectre to Print")
("nmpSpectreToSdf"
"nmpSpectreToSdf()"
"Maps identifier from Spectre to Sdf.")
("nmpSpectreToSpf"
"nmpSpectreToSpf()"
"Maps identifier from Spectre to Spf.")
("nmpSpectreToSpectreHDL"
"nmpSpectreToSpectreHDL()"
"Maps identifier from Spectre to SpectreHDL.")
("nmpSpectreToSpef"
"nmpSpectreToSpef()"
"Maps identifier from Spectre to Spef.")
("nmpSpectreToSpice"
"nmpSpectreToSpice()"
"Maps identifier from Spectre to Spice.")
("nmpSpectreToSysVerilog"
"nmpSpectreToSysVerilog()"
"Maps identifier from Spectre to SysVerilog.")
("nmpSpectreToVerilog"
"nmpSpectreToVerilog()"
"Maps identifier from Spectre to Verilog.")
("nmpSpectreToVerilogA"
"nmpSpectreToVerilogA()"
"Maps identifier from Spectre to VerilogA.")
("nmpSpectreToVerilogAMS"
"nmpSpectreToVerilogAMS()"
"Maps identifier from Spectre to VerilogAMS.")
("nmpSpectreToVHDL"
"nmpSpectreToVHDL()"
"Maps identifier from Spectre to VHDL.")
("nmpSpectreToVHDLAMS"
"nmpSpectreToVHDLAMS()"
"Maps identifier from Spectre to VHDLAMS.")
("nmpSpectreToVHDL87"
"nmpSpectreToVHDL87()"
"Maps identifier from Spectre to VHDL87.")
("nmpSpectreHDLToCDBA"
"nmpSpectreHDLToCDBA()"
"Maps identifier from SpectreHDL to CDBA.")
("nmpSpectreHDLToConcept"
"nmpSpectreHDLToConcept()"
"Maps identifier from SpectreHDL to Concept.")
("nmpSpectreHDLToDef"
"nmpSpectreHDLToDef()"
"Maps identifier from SpectreHDL to Def.")
("nmpSpectreHDLToGcf"
"nmpSpectreHDLToGcf()"
"Maps identifier from SpectreHDL to Gcf.")
("nmpSpectreHDLToGenesis"
"nmpSpectreHDLToGenesis()"
"Maps identifier from SpectreHDL to Genesis.")
("nmpSpectreHDLToLef"
"nmpSpectreHDLToLef()"
"Maps identifier from SpectreHDL to Lef.")
("nmpSpectreHDLToPrint"
"nmpSpectreHDLToPrint()"
"Maps identifier from SpectreHDL to Print.")
("nmpSpectreHDLToSdf"
"nmpSpectreHDLToSdf()"
"Maps identifier from SpectreHDL to Sdf.")
("nmpSpectreHDLToSpf"
"nmpSpectreHDLToSpf()"
"Maps identifier from SpectreHDL to Spf.")
("nmpSpectreHDLToSpectre"
"nmpSpectreHDLToSpectre()"
"Maps identifier from SpectreHDL to Spectre.")
("nmpSpectreHDLToSpef"
"nmpSpectreHDLToSpef()"
"Maps identifier from SpectreHDL to Spef.")
("nmpSpectreHDLToSpice"
"nmpSpectreHDLToSpice()"
"Maps identifier from SpectreHDL to Spice.")
("nmpSpectreHDLToSysVerilog"
"nmpSpectreHDLToSysVerilog()"
"Maps identifier from Spectre to SysVerilog.")
("nmpSpectreHDLToVerilog"
"nmpSpectreHDLToVerilog()"
"Maps identifier from SpectreHDL to Verilog.")
("nmpSpectreHDLToVerilogA"
"nmpSpectreHDLToVerilogA()"
"Maps identifier from SpectreHDL to VerilogA.")
("nmpSpectreHDLToVerilogAMS"
"nmpSpectreHDLToVerilogAMS()"
"Maps identifier from SpectreHDL to VerilogAMS.")
("nmpSpectreHDLToVHDL"
"nmpSpectreHDLToVHDL()"
"Maps identifier from SpectreHDL to VHDL.")
("nmpSpectreHDLToVHDLAMS"
"nmpSpectreHDLToVHDLAMS()"
"Maps identifier from SpectreHDL to VHDLAMS.")
("nmpSpectreHDLToVHDL87"
"nmpSpectreHDLToVHDL87()"
"Maps identifier from SpectreHDL to VHDL87.")
("nmpSpefToCDBA"
"nmpSpefToCDBA()"
"Maps identifier from Spef to CDBA.")
("nmpSpefToConcept"
"nmpSpefToConcept()"
"Maps identifier from Spef to Concept.")
("nmpSpefToDef"
"nmpSpefToDef()"
"Maps identifier from Spef to Def.")
("nmpSpefToGcf"
"nmpSpefToGcf()"
"Maps identifier from Spef to Gcf.")
("nmpSpefToGenesis"
"nmpSpefToGenesis()"
"Maps identifier from Spef to Genesis.")
("nmpSpefToLef"
"nmpSpefToLef()"
"Maps identifier from Spef to Lef.")
("nmpSpefToPrint"
"nmpSpefToPrint()"
"Maps identifier from Spef to Print.")
("nmpSpefToSdf"
"nmpSpefToSdf()"
"Maps identifier from Spef to Sdf.")
("nmpSpefToSpf"
"nmpSpefToSpf()"
"Maps identifier from Spef to Spf.")
("nmpSpefToSpectre"
"nmpSpefToSpectre()"
"Maps identifier from Spef to Spectre.")
("nmpSpefToSpectreHDL"
"nmpSpefToSpectreHDL()"
"Maps identifier from Spef to SpectreHDL.")
("nmpSpefToSpice"
"nmpSpefToSpice()"
"Maps identifier from Spef to Spice.")
("nmpSpefToSysVerilog"
"nmpSpefToSysVerilog()"
"Maps identifier from Spef to SysVerilog.")
("nmpSpefToVerilog"
"nmpSpefToVerilog()"
"Maps identifier from Spef to Verilog.")
("nmpSpefToVerilogA"
"nmpSpefToVerilogA()"
"Maps identifier from Spef to VerilogA.")
("nmpSpefToVerilogAMS"
"nmpSpefToVerilogAMS()"
"Maps identifier from Spef to VerilogAMS.")
("nmpSpefToVHDL"
"nmpSpefToVHDL()"
"Maps identifier from Spef to VHDL.")
("nmpSpefToVHDLAMS"
"nmpSpefToVHDLAMS()"
"Maps identifier from Spef to VHDLAMS.")
("nmpSpefToVHDL87"
"nmpSpefToVHDL87()"
"Maps identifier from Spef to VHDL87.")
("nmpSpiceToCDBA"
"nmpSpiceToCDBA()"
"Maps identifier from Spice to CDBA.")
("nmpSpiceToConcept"
"nmpSpiceToConcept()"
"Maps identifier from Spice to Concept.")
("nmpSpiceToDef"
"nmpSpiceToDef()"
"Maps identifier from Spice to Def.")
("nmpSpiceToGcf"
"nmpSpiceToGcf()"
"Maps identifier from Spice to Gcf.")
("nmpSpiceToGenesis"
"nmpSpiceToGenesis()"
"Maps identifier from Spice to Genesis.")
("nmpSpiceToLef"
"nmpSpiceToLef()"
"Maps identifier from Spice to Lef.")
("nmpSpiceToPrint"
"nmpSpiceToPrint()"
"Maps identifier from Spice to Print.")
("nmpSpiceToSdf"
"nmpSpiceToSdf()"
"Maps identifier from Spice to Sdf.")
("nmpSpiceToSpf"
"nmpSpiceToSpf()"
"Maps identifier from Spice to Spf.")
("nmpSpiceToSpectre"
"nmpSpiceToSpectre()"
"Maps identifier from Spice to Spectre.")
("nmpSpiceToSpectreHDL"
"nmpSpiceToSpectreHDL()"
"Maps identifier from Spice to SpectreHDL.")
("nmpSpiceToSpef"
"nmpSpiceToSpef()"
"Maps identifier from Spice to Spef.")
("nmpSpiceToSysVerilog"
"nmpSpiceToSysVerilog()"
"Maps identifier from Spice to SysVerilog.")
("nmpSpiceToVerilog"
"nmpSpiceToVerilog()"
"Maps identifier from Spice to Verilog.")
("nmpSpiceToVerilogA"
"nmpSpiceToVerilogA()"
"Maps identifier from Spice to VerilogA.")
("nmpSpiceToVerilogAMS"
"nmpSpiceToVerilogAMS()"
"Maps identifier from Spice to VerilogAMS.")
("nmpSpiceToVHDL"
"nmpSpiceToVHDL()"
"Maps identifier from Spice to VHDL.")
("nmpSpiceToVHDLAMS"
"nmpSpiceToVHDLAMS()"
"Maps identifier from Spice to VHDLAMS.")
("nmpSpiceToVHDL87"
"nmpSpiceToVHDL87()"
"Maps identifier from Spice to VHDL87.")
("nmpSysVerilogToAscii"
"nmpSysVerilogToAscii()"
"Maps identifier from SysVerilog to Ascii.")
("nmpSysVerilogToCDBA"
"nmpSysVerilogToCDBA()"
"Maps identifier from SysVerilog to CDBA.")
("nmpSysVerilogToConcept"
"nmpSysVerilogToConcept()"
"Maps identifier from SysVerilog to Concept.")
("nmpSysVerilogToDef"
"nmpSysVerilogToDef()"
"Maps identifier from SysVerilog to Def.")
("nmpSysVerilogToGcf"
"nmpSysVerilogToGcf()"
"Maps identifier from SysVerilog to Gcf.")
("nmpSysVerilogToGenesis"
"nmpSysVerilogToGenesis()"
"Maps identifier from SysVerilog to Genesis.")
("nmpSysVerilogToLef"
"nmpSysVerilogToLef()"
"Maps identifier from SysVerilog to Lef.")
("nmpSysVerilogToPrint"
"nmpSysVerilogToPrint()"
"Maps identifier from SysVerilog to Print.")
("nmpSysVerilogToSdf"
"nmpSysVerilogToSdf()"
"Maps identifier from SysVerilog to Sdf.")
("nmpSysVerilogToSpf"
"nmpSysVerilogToSpf()"
"Maps identifier from SysVerilog to Spf.")
("nmpSysVerilogToSpectre"
"nmpSysVerilogToSpectre()"
"Maps identifier from SysVerilog to Spectre.")
("nmpSysVerilogToSpectreHDL"
"nmpSysVerilogToSpectreHDL()"
"Maps identifier from SysVerilog to SpectreHDL.")
("nmpSysVerilogToSpef"
"nmpSysVerilogToSpef()"
"Maps identifier from SysVerilog to Spef.")
("nmpSysVerilogToSpice"
"nmpSysVerilogToSpice()"
"Maps identifier from SysVerilog to Spice.")
("nmpSysVerilogToVHDL"
"nmpSysVerilogToVHDL()"
"Maps identifier from SysVerilog to VHDL.")
("nmpSysVerilogToVHDL87"
"nmpSysVerilogToVHDL87()"
"Maps identifier from SysVerilog to VHDL87.")
("nmpSysVerilogToVHDLAMS"
"nmpSysVerilogToVHDLAMS()"
"Maps identifier from SysVerilog to VHDLAMS.")
("nmpSysVerilogToVerilog"
"nmpSysVerilogToVerilog()"
"Maps identifier from SysVerilog to Verilog.")
("nmpSysVerilogToVerilogA"
"nmpSysVerilogToVerilogA()"
"Maps identifier from SysVerilog to VerilogA.")
("nmpSysVerilogToVerilogAMS"
"nmpSysVerilogToVerilogAMS()"
"Maps identifier from SysVerilog to VerilogAMS.")
("nmpVerilogToCDBA"
"nmpVerilogToCDBA()"
"Maps identifier from Verilog to CDBA.")
("nmpVerilogToConcept"
"nmpVerilogToConcept()"
"Maps identifier from Verilog to Concept.")
("nmpVerilogToDef"
"nmpVerilogToDef()"
"Maps identifier from Verilog to Def.")
("nmpVerilogToGcf"
"nmpVerilogToGcf()"
"Maps identifier from Verilog to Gcf.")
("nmpVerilogToGenesis"
"nmpVerilogToGenesis()"
"Maps identifier from Verilog to Genesis.")
("nmpVerilogToLef"
"nmpVerilogToLef()"
"Maps identifier from Verilog to Lef.")
("nmpVerilogToPrint"
"nmpVerilogToPrint()"
"Maps identifier from Verilog to Print.")
("nmpVerilogToSdf"
"nmpVerilogToSdf()"
"Maps identifier from Verilog to Sdf.")
("nmpVerilogToSpf"
"nmpVerilogToSpf()"
"Maps identifier from Verilog to Spf.")
("nmpVerilogToSpectre"
"nmpVerilogToSpectre()"
"Maps identifier from Verilog to Spectre.")
("nmpVerilogToSpectreHDL"
"nmpVerilogToSpectreHDL()"
"Maps identifier from Verilog to SpectreHDL.")
("nmpVerilogToSpef"
"nmpVerilogToSpef()"
"Maps identifier from Verilog to Spef.")
("nmpVerilogToSpice"
"nmpVerilogToSpice()"
"Maps identifier from Verilog to Spice.")
("nmpVerilogToSysVerilog"
"nmpVerilogToSysVerilog()"
"Maps identifier from Verilog to SysVerilog.")
("nmpVerilogToVerilogA"
"nmpVerilogToVerilogA()"
"Maps identifier from Verilog to VerilogA.")
("nmpVerilogToVerilogAMS"
"nmpVerilogToVerilogAMS()"
"Maps identifier from Verilog to VerilogAMS.")
("nmpVerilogToVHDL"
"nmpVerilogToVHDL()"
"Maps identifier from Verilog to VHDL.")
("nmpVerilogToVHDLAMS"
"nmpVerilogToVHDLAMS()"
"Maps identifier from Verilog to VHDLAMS.")
("nmpVerilogToVHDL87"
"nmpVerilogToVHDL87()"
"Maps identifier from Verilog to VHDL87.")
("nmpVerilogAToCDBA"
"nmpVerilogAToCDBA()"
"Maps identifier from VerilogA to CDBA.")
("nmpVerilogAToConcept"
"nmpVerilogAToConcept()"
"Maps identifier from VerilogA to Concept.")
("nmpVerilogAToDef"
"nmpVerilogAToDef()"
"Maps identifier from VerilogA to Def.")
("nmpVerilogAToGcf"
"nmpVerilogAToGcf()"
"Maps identifier from VerilogA to Gcf.")
("nmpVerilogAToGenesis"
"nmpVerilogAToGenesis()"
"Maps identifier from VerilogA to Genesis.")
("nmpVerilogAToLef"
"nmpVerilogAToLef()"
"Maps identifier from VerilogA to Lef.")
("nmpVerilogAToPrint"
"nmpVerilogAToPrint()"
"Maps identifier from VerilogA to Print.")
("nmpVerilogAToSdf"
"nmpVerilogAToSdf()"
"Maps identifier from VerilogA to Sdf.")
("nmpVerilogAToSpf"
"nmpVerilogAToSpf()"
"Maps identifier from VerilogA to Spf.")
("nmpVerilogAToSpectre"
"nmpVerilogAToSpectre()"
"Maps identifier from VerilogA to Spectre.")
("nmpVerilogAToSpectreHDL"
"nmpVerilogAToSpectreHDL()"
"Maps identifier from VerilogA to SpectreHDL.")
("nmpVerilogAToSpef"
"nmpVerilogAToSpef()"
"Maps identifier from VerilogA to Spef.")
("nmpVerilogAToSpice"
"nmpVerilogAToSpice()"
"Maps identifier from VerilogA to Spice.")
("nmpVerilogAToSysVerilog"
"nmpVerilogAToSysVerilog()"
"Maps identifier from VerilogA to SysVerilog.")
("nmpVerilogAToVerilog"
"nmpVerilogAToVerilog()"
"Maps identifier from VerilogA to Verilog.")
("nmpVerilogAToVerilogAMS"
"nmpVerilogAToVerilogAMS()"
"Maps identifier from VerilogA to VerilogAMS.")
("nmpVerilogAToVHDL"
"nmpVerilogAToVHDL()"
"Maps identifier from VerilogA to VHDL.")
("nmpVerilogAToVHDLAMS"
"nmpVerilogAToVHDLAMS()"
"Maps identifier from VerilogA to VHDLAMS.")
("nmpVerilogAToVHDL87"
"nmpVerilogAToVHDL87()"
"Maps identifier from VerilogA to VHDL87.")
("nmpVerilogAMSToCDBA"
"nmpVerilogAMSToCDBA()"
"Maps identifier from VerilogAMS to CDBA.")
("nmpVerilogAMSToConcept"
"nmpVerilogAMSToConcept()"
"Maps identifier from VerilogAMS to Concept.")
("nmpVerilogAMSToDef"
"nmpVerilogAMSToDef()"
"Maps identifier from VerilogAMS to Def.")
("nmpVerilogAMSToGcf"
"nmpVerilogAMSToGcf()"
"Maps identifier from VerilogAMS to Gcf.")
("nmpVerilogAMSToGenesis"
"nmpVerilogAMSToGenesis()"
"Maps identifier from VerilogAMS to Genesis.")
("nmpVerilogAMSToLef"
"nmpVerilogAMSToLef()"
"Maps identifier from VerilogAMS to Lef.")
("nmpVerilogAMSToPrint"
"nmpVerilogAMSToPrint()"
"Maps identifier from VerilogAMS to Print.")
("nmpVerilogAMSToSdf"
"nmpVerilogAMSToSdf()"
"Maps identifier from VerilogAMS to Sdf.")
("nmpVerilogAMSToSpf"
"nmpVerilogAMSToSpf()"
"Maps identifier from VerilogAMS to Spf.")
("nmpVerilogAMSToSpectre"
"nmpVerilogAMSToSpectre()"
"Maps identifier from VerilogAMS to Spectre.")
("nmpVerilogAMSToSpectreHDL"
"nmpVerilogAMSToSpectreHDL()"
"Maps identifier from VerilogAMS to SpectreHDL.")
("nmpVerilogAMSToSpef"
"nmpVerilogAMSToSpef()"
"Maps identifier from VerilogAMS to Spef.")
("nmpVerilogAMSToSpice"
"nmpVerilogAMSToSpice()"
"Maps identifier from VerilogAMS to Spice.")
("nmpVerilogAMSToSysVerilog"
"nmpVerilogAMSToSysVerilog()"
"Maps identifier from VerilogAMS to SysVerilog.")
("nmpVerilogAMSToVerilog"
"nmpVerilogAMSToVerilog()"
"Maps identifier from VerilogAMS to Verilog.")
("nmpVerilogAMSToVerilogA"
"nmpVerilogAMSToVerilogA()"
"Maps identifier from VerilogAMS to VerilogA.")
("nmpVerilogAMSToVHDL"
"nmpVerilogAMSToVHDL()"
"Maps identifier from VerilogAMS to VHDL.")
("nmpVerilogAMSToVHDLAMS"
"nmpVerilogAMSToVHDLAMS()"
"Maps identifier from VerilogAMS to VHDLAMS.")
("nmpVerilogAMSToVHDL87"
"nmpVerilogAMSToVHDL87()"
"Maps identifier from VerilogAMS to VHDL87.")
("nmpVHDLToCDBA"
"nmpVHDLToCDBA()"
"Maps identifier from VHDL to CDBA.")
("nmpVHDLToConcept"
"nmpVHDLToConcept()"
"Maps identifier from VHDL to Concept.")
("nmpVHDLToDef"
"nmpVHDLToDef()"
"Maps identifier from VHDL to Def.")
("nmpVHDLToGcf"
"nmpVHDLToGcf()"
"Maps identifier from VHDL to Gcf.")
("nmpVHDLToGenesis"
"nmpVHDLToGenesis()"
"Maps identifier from VHDL to Genesis.")
("nmpVHDLToLef"
"nmpVHDLToLef()"
"Maps identifier from VHDL to Lef.")
("nmpVHDLToPrint"
"nmpVHDLToPrint()"
"Maps identifier from VHDL to Print.")
("nmpVHDLToSdf"
"nmpVHDLToSdf()"
"Maps identifier from VHDL to Sdf.")
("nmpVHDLToSpf"
"nmpVHDLToSpf()"
"Maps identifier from VHDL to Spf.")
("nmpVHDLToSpectre"
"nmpVHDLToSpectre()"
"Maps identifier from VHDL to Spectre.")
("nmpVHDLToSpectreHDL"
"nmpVHDLToSpectreHDL()"
"Maps identifier from VHDL to SpectreHDL.")
("nmpVHDLToSpef"
"nmpVHDLToSpef()"
"Maps identifier from VHDL to Spef.")
("nmpVHDLToSpice"
"nmpVHDLToSpice()"
"Maps identifier from VHDL to Spice.")
("nmpVHDLToSysVerilog"
"nmpVHDLToSysVerilog()"
"Maps identifier from VHDL to SysVerilog.")
("nmpVHDLToVerilog"
"nmpVHDLToVerilog()"
"Maps identifier from VHDL to Verilog.")
("nmpVHDLToVerilogA"
"nmpVHDLToVerilogA()"
"Maps identifier from VHDL to VerilogA.")
("nmpVHDLToVerilogAMS"
"nmpVHDLToVerilogAMS()"
"Maps identifier from VHDL to VerilogAMS.")
("nmpVHDLToVHDLAMS"
"nmpVHDLToVHDLAMS()"
"Maps identifier from VHDL to VHDLAMS.")
("nmpVHDLToVHDL87"
"nmpVHDLToVHDL87()"
"Maps identifier from VHDL to VHDL87.")
("nmpVHDLAMSToCDBA"
"nmpVHDLAMSToCDBA()"
"Maps identifier from VHDLAMS to CDBA.")
("nmpVHDLAMSToConcept"
"nmpVHDLAMSToConcept()"
"Maps identifier from VHDLAMS to Concept.")
("nmpVHDLAMSToDef"
"nmpVHDLAMSToDef()"
"Maps identifier from VHDLAMS to Def.")
("nmpVHDLAMSToGcf"
"nmpVHDLAMSToGcf()"
"Maps identifier from VHDLAMS to Gcf.")
("nmpVHDLAMSToGenesis"
"nmpVHDLAMSToGenesis()"
"Maps identifier from VHDLAMS to Genesis.")
("nmpVHDLAMSToLef"
"nmpVHDLAMSToLef()"
"Maps identifier from VHDLAMS to Lef.")
("nmpVHDLAMSToPrint"
"nmpVHDLAMSToPrint()"
"Maps identifier from VHDLAMS to Print.")
("nmpVHDLAMSToSdf"
"nmpVHDLAMSToSdf()"
"Maps identifier from VHDLAMS to Sdf.")
("nmpVHDLAMSToSpf"
"nmpVHDLAMSToSpf()"
"Maps identifier from VHDLAMS to Spf.")
("nmpVHDLAMSToSpectre"
"nmpVHDLAMSToSpectre()"
"Maps identifier from VHDLAMS to Spectre.")
("nmpVHDLAMSToSpectreHDL"
"nmpVHDLAMSToSpectreHDL()"
"Maps identifier from VHDLAMS to SpectreHDL.")
("nmpVHDLAMSToSpef"
"nmpVHDLAMSToSpef()"
"Maps identifier from VHDLAMS to Spef.")
("nmpVHDLAMSToSpice"
"nmpVHDLAMSToSpice()"
"Maps identifier from VHDLAMS to Spice.")
("nmpVHDLAMSToSysVerilog"
"nmpVHDLAMSToSysVerilog()"
"Maps identifier from VHDLAMS to SysVerilog.")
("nmpVHDLAMSToVerilog"
"nmpVHDLAMSToVerilog()"
"Maps identifier from VHDLAMS to Verilog.")
("nmpVHDLAMSToVerilogA"
"nmpVHDLAMSToVerilogA()"
"Maps identifier from VHDLAMS to VerilogA.")
("nmpVHDLAMSToVerilogAMS"
"nmpVHDLAMSToVerilogAMS()"
"Maps identifier from VHDLAMS to VerilogAMS.")
("nmpVHDLAMSToVHDL"
"nmpVHDLAMSToVHDL()"
"Maps identifier from VHDLAMS to VHDL.")
("nmpVHDLAMSToVHDL87"
"nmpVHDLAMSToVHDL87()"
"Maps identifier from VHDLAMS to VHDL87.")
("nmpVHDL87ToCDBA"
"nmpVHDL87ToCDBA()"
"Maps identifier from VHDL87 to CDBA.")
("nmpVHDL87ToConcept"
"nmpVHDL87ToConcept()"
"Maps identifier from VHDL87 to Concept.")
("nmpVHDL87ToDef"
"nmpVHDL87ToDef()"
"Maps identifier from VHDL87 to Def.")
("nmpVHDL87ToGcf"
"nmpVHDL87ToGcf()"
"Maps identifier from VHDL87 to Gcf.")
("nmpVHDL87ToGenesis"
"nmpVHDL87ToGenesis()"
"Maps identifier from VHDL87 to Genesis.")
("nmpVHDL87ToLef"
"nmpVHDL87ToLef()"
"Maps identifier from VHDL87 to Lef.")
("nmpVHDL87ToPrint"
"nmpVHDL87ToPrint()"
"Maps identifier from VHDL87 to Print.")
("nmpVHDL87ToSdf"
"nmpVHDL87ToSdf()"
"Maps identifier from VHDL87 to Sdf.")
("nmpVHDL87ToSpf"
"nmpVHDL87ToSpf()"
"Maps identifier from VHDL87 to Spf.")
("nmpVHDL87ToSpectre"
"nmpVHDL87ToSpectre()"
"Maps identifier from VHDL87 to Spectre.")
("nmpVHDL87ToSpectreHDL"
"nmpVHDL87ToSpectreHDL()"
"Maps identifier from VHDL87 to SpectreHDL.")
("nmpVHDL87ToSpef"
"nmpVHDL87ToSpef()"
"Maps identifier from VHDL87 to Spef.")
("nmpVHDL87ToSpice"
"nmpVHDL87ToSpice()"
"Maps identifier from VHDL87 to Spice.")
("nmpVHDL87ToSysVerilog"
"nmpVHDL87ToSysVerilog()"
"Maps identifier from VHDL87 to SysVerilog.")
("nmpVHDL87ToVerilog"
"nmpVHDL87ToVerilog()"
"Maps identifier from VHDL87 to Verilog.")
("nmpVHDL87ToVerilogA"
"nmpVHDL87ToVerilogA()"
"Maps identifier from VHDL87 to VerilogA.")
("nmpVHDL87ToVerilogAMS"
"nmpVHDL87ToVerilogAMS()"
"Maps identifier from VHDL87 to VerilogAMS.")
("nmpVHDL87ToVHDL"
"nmpVHDL87ToVHDL()"
"Maps identifier from VHDL87 to VHDL.")
("nmpVHDL87ToVHDLAMS"
"nmpVHDL87ToVHDLAMS()"
"Maps identifier from VHDL87 to VHDLAMS.")
("nmpPathCDBAToVHDL"
"nmpPathCDBAToVHDL()"
"Converts a simple instance vector in the CDBA namespace to the VHDL namespace.")
("nmpPathCDBAToVerilog"
"nmpPathCDBAToVerilog()"
"Converts a simple instance vector in the CDBA namespace to the Verilog namespace.")
("ccpCopy"
"ccpCopy(
q_src
q_dest
[ g_overWrite ]
[ s_expFlag ]
[ l_copyViewTypeList ]
[ l_copyViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ s_whatToUpdate ]
[ q_updateLibList ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Copies source data to another location.")
("ccpCopyDesign"
"ccpCopyDesign(
G_src
G_dest
[ g_overWrite ]
[ s_expFlag ]
[ q_copySkipLibList ]
[ l_copyViewTypeList ]
[ l_copyViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ s_whatToUpdate ]
[ q_updateLibList ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Copies a design, after expanding it, to the destination library you specify.")
("ccpCopyExactDesign"
"ccpCopyExactDesign(
G_src
G_dest
[ g_overWrite ]
[ s_expFlag ] 
[ q_copySkipLibList ]
[ l_copyViewTypeList ]
[ l_copyViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ s_whatToUpdate ]
[ q_updateLibList ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Copies a design, after expanding it, to the destination library you specify. This function is similar to ccpCopyDesign, except that it copies only the exact design-it does not copy any views that are not used in the design.")
("ccpCopyConfig"
"ccpCopyConfig(
G_src
G_dest
[ g_overWrite ]
[ s_expFlag ]
[ q_copySkipLibList ]
[ l_copyViewTypeList ]
[ l_copyViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ s_whatToUpdate ]
[ q_updateLibList ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Copies a design configuration. Expansion is based on configuration rules specified in the expand.cfg file in the source configuration view.")
("ccpDmHasRename"
"ccpDmHasRename(
t_dmName
)
=> t / nil"
"Checks whether a specified design management system (DMS) is loaded and enabled for GDM renaming. The DMS can be loaded either by Virtuoso at startup or by previously made successful calls to the DM objects from SKILL functions such as ddGetObjDMSys, ddIsPathManaged, or gdmstatus.")
("ccpDmRename"
"ccpDmRename(
G_src
G_dest
[ ?destLibPath t_destLibPath ]
[ ?whatToUpdate s_whatToUpdate ]
[ ?updateLibList q_updateLibList ]
[ ?existenceCheck x_existenceCheck ]
[ ?reReferenceCustomVias x_reReferenceCustomVias ]
[ ?tag t_tag ]
[ ?description t_description ]
[ ?xtraArgs t_xtraArgs ]
[ ?feedbackStyle x_feedbackStyle ]
[ ?limitChecks x_limitChecks ]
[ ?checkOnly g_checkOnly ]
[ ?returnGdmContext g_returnGdmContext ]
[ ?returnCcpResults g_returnCcpResults ]
[ ?feedbackCallback u_feedbackCallback ]
[ ?doneCallback u_doneCallback ]
[ ?gdmContextCallback u_gdmContextCallback ]
[ ?nconsTag l_nconsTag ]
[ ?dpl l_dpl ]
)
=> t / nil"
"Renames a specified gdmSpec object representing a cellview. The source object is deleted after a copy is created. When you copy a directory containing the cellview, all files in the directory are copied, regardless of whether they are co-managed or not.")
("ccpExpand"
"ccpExpand(
q_src
s_expFlag
[ l_expandViewTypeList ]
[ l_expandViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> q_expSpecList / nil"
"Does an expansion, given a list of source objects.")
("ccpExpandDesign"
"ccpExpandDesign(
G_src
s_expFlag
q_expandSkipLibList 
[ l_expandViewTypeList ]
[ l_expandViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> q_expSpecList / nil"
"Expands a design, given a source cell or cellview gdmSpec object.")
("ccpExpandExactDesign"
"ccpExpandExactDesign(
G_src
s_expFlag
q_expandSkipLibList 
[ l_expandViewTypeList ]
[ l_expandViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> q_expSpecList / nil"
"Expands a design, given a source cell or cellview gdmSpec object. This function is similar to ccpExpandDesign, except that the expansion list only includes those views that are used in the design.")
("ccpExpandConfig"
"ccpExpandConfig(
G_src
s_expFlag
[ q_expandSkipLibList ]
[ l_expandViewTypeList ]
[ l_expandViewNameList ]
[ t_vNameSimExp ]
[ t_vNameSpace ]
[ g_addProp ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> q_expSpecList / nil"
"Expands a configuration, based on configuration rules specified in the expand.cfg file in the source configuration view.")
("ccpGetAutoRename"
"ccpGetAutoRename()
=> t / nil"
"Gets the current status of the auto rename feature. Earlier, the status of this feature was controlled only by a single time evaluation of the CDS_COPY_AUTO_RENAME shell environment variable. This environment variable defines the initial status setting for this feature. Now, the ccpSetAutoRename function allows you to change the status after the startup initialization.")
("ccpSetAutoRename"
"ccpSetAutoRename(
g_general
)
=> t"
"Sets the status of the auto rename feature to on or off. Earlier, the status of this feature was controlled only by a single time evaluation of the CDS_COPY_AUTO_RENAME shell environment variable. This environment variable defines the initial status setting for this feature. Now, this function allows you to change the status after the startup initialization.")
("ccpRename"
"ccpRename(
G_src
G_dest
[ g_overWrite ]
[ s_expFlag ]
[ s_whatToUpdate ]
[ q_updateLibList ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Renames a library, cell, view, or file. The source library, cell, view, or file is copied, and then the original one is deleted. When you copy a directory (library, cell, or view), all the files in the directory are copied, regardless of whether they are co-managed or not.")
("ccpRenameReferenceLib"
"ccpRenameReferenceLib(
G_fromLib
G_toLib
q_updateList
[ s_whatCanChange ]
[ g_existenceCheck ]
[ g_reReferenceCustomVias ]
)
=> t / nil"
"Renames, in a library or a subset of a library, references to an external library. The external library is not changed.")
("ccpRegMonitor"
"ccpRegMonitor(
g_copyMonitor
)
=> oldCopyMonitor / nil"
"Registers the copy monitor that you create. A copy monitor is a program that displays the progress of the copy command while it is being executed. For an example of a copy monitor, see the copy monitor used in the Library Manager's Copy Wizard.")
("ccpRegTrigger"
"ccpRegTrigger(
t_copyPhaseStr
s_triggerFunction
[ g_canEditList ]
)
=> t / nil"
"Registers the copy trigger that you create. The copy trigger is called in the copy phase that you specify.")
("ccpRemoveTrigger"
"ccpRemoveTrigger(
t_copyPhaseStr
s_triggerFunction
)
=> t / nil"
"Removes the registered copy trigger function from the copy phase you specify.")
("lmgrAddMenuItems"
"lmgrAddMenuItems( 
t_menuName 
t_popupSet 
l_names 
) 
=> t / nil"
"Appends the named objects to the specified menu. An item can be another menu. Each menu item or menu can be added to only one menu. Likewise, any menu item can appear at most once in every pop-up menu. Menus cannot be added to a pop-up. Pop-ups must remain a flat structure only. Pop-ups cannot be added to menus.")
("lmgrCreateMenu"
"lmgrCreateMenu( 
t_menuName 
l_menuAttributes 
) 
=> t / nil"
"Creates a structure for a menu, which can be populated with menu items. Once this menu is created, you can install it into the top menu bar or into another parent menu using lmgrAddMenuItems.")
("lmgrCreateMenuItem"
"lmgrCreateMenuItem( 
t_itemName 
t_itemType 
l_itemAttributes 
) 
=> t / nil"
"Creates an instance of a menu item, which should be populated into a single menu. Once this menu item is created, you can install it into a menu using lmgrAddMenuItems().")
("lmgrDefineInits"
"lmgrDefineInits( 
l_initCallback 
l_termCallback 
) 
=> t / nil"
"Defines the initialization action to perform when the customization code begins (after parsing the extension file) and the termination action to perform immediately before Library Manager terminates. You must define the callback in the Virtuoso program before it starts. Otherwise, you get an error. No arguments are passed to either callback.")
("lmgrDeleteMenuItems"
"lmgrDeleteMenuItems( 
l_names 
) 
=> t / nil"
"Deletes the named objects from the menu/pop-up hierarchy. The object can be either a single item or an entire menu. There is no recovery or undo from this operation. If you merely wish to temporarily disable the view of an object, consider using lmgrManageMenuItems() instead.")
("lmgrDisplayMessage"
"lmgrDisplayMessage( 
t_text 
[ g_logOnly ]
) 
=> t / nil"
"Displays a string in the Message area on the Library Manager form and appends it to the Library Manager log file. If desired, the message can be written just to the Library Manager log file and not echoed to the user. Ensure that the string is terminated by a newline character, or the string might be confused with the output from other Library Manager commands or other calls to this function.")
("lmgrGetObject"
"lmgrGetObject( 
t_objName
) 
=> l_attrList / nil"
"Returns a list describing the state of the single named object or nil if the object does not exist. The format of the attribute list will be variable length list of tags (strings) paired with matching values that are either a string or Boolean value.")
("lmgrInsertMenuItems"
"lmgrInsertMenuItems( 
t_menuItem 
t_popupSet 
l_names
) 
=> t / nil"
"Inserts the named objects into the menudirectly before the indicated menu item. An object can be an entire menu. Each menu item or menu can be inserted or added to only one menu. Likewise, any menu item can appear at most once in each pop-up menu. Menus can not be inserted (added) to a pop-up. Pop-ups must remain a flat structure only. You cannot insert or add pop-ups to menus. This function is similar to lmgrAddMenuItems(), except in the meaning of the first argument.")
("lmgrLogShowPopup"
"lmgrLogShowPopup( )
=> t / nil"
"Restores the context for popup menus for Library Manager replay. This function is only intended for supporting replay and cannot be called from other SKILL engine programs. You do not need to use this function directly.")
("lmgrManageMenuItems"
"lmgrManageMenuItems( 
l_names 
g_manageOn 
) 
=> t / nil"
"Manages the named objects (enabling the display of named objects) inside their menu hierarchy and pop-up sets. Objects can be either a single item or an entire menu.")
("lmgrMenuSubsInPopup"
"lmgrMenuSubsInPopup( 
t_menuName 
g_isSubMenu 
) 
=> t / nil"
"This API is used only in the Library Manager's cdsLibMgr.il file for menu customization. The named menu may be placed into a sub-menu of a popup menu, which appears on clicking the right mouse button (RMB) in the Library Manager's window that lists the library, cell, and view items being browsed. This will be placed in a sub-popup if the boolean value was set to be true. In addition, menu items tagged for adding to the popup menus are displayed within its menu's sub-popup (if any). Sub-popup menus may be hierarchically nested per menu as they have been setup/defined through the customized menus' hierarchy.")
("lmgrQueryNamedObjects"
"lmgrQueryNamedObjects( 
[ t_menuName ] 
)
=> l_list / nil"
"Returns a list containing the names of all menu items in the Library Manager menu named t_menuName.")
("lmgrSensitizeMenuItems"
"lmgrSensitizeMenuItems( 
l_names 
g_sensitive 
) 
=> t / nil"
"Sensitizes the named objects (enabling the active state of named objects) inside their menu hierarchy and pop-up sets. Objects can be either a single item or an entire menu.")
("lmgrSetObject"
"lmgrSetObject( 
t_objName 
l_attrList 
) 
=> t / nil"
"Accepts a list describing the state of the named object. Returns nil if the object does not exist. The format of the attribute list is a variable-length list of tags (strings) paired with matching string or Boolean values.")
("lmgrVerbose"
"lmgrVerbose ( 
x_level 
) 
=> x_level / nil"
"To aid in debugging the callbacks registered in the cdsLibMgr.il file, it is possible to get additional informational messages to be output to the CIW.")
("psQueueStatus"
"psQueueStatus( ) 
=> t"
"Displays the plot jobs in the spooling queues.")
("psConfigLoaded"
"psConfigLoaded( ) 
=> t / nil"
"Indicates if the .cdsplotinit is already loaded.")
("psLoadCdsPlotInit"
"psLoadCdsPlotInit( ) 
=> t / nil"
"Indicates if the .cdsplotinit has successfully loaded or not.")
("psQueryPlotters"
"psQueryPlotters( ) 
=> l_plotters"
"Returns a list of plotter names from the loaded .cdsplotinit files.")
("psQueryPaperSizes"
"psQueryPaperSizes(
t_plotterName
) 
=> l_paperSizes"
"Returns the paper sizes (such as A size) and offset of the paper that the plotter uses.")
("psQueryPaperSize"
"psQueryPaperSize(
t_plotterName
t_paperSize
)
=> l_dimensions"
"Returns the dimensions of the specified paper size.")