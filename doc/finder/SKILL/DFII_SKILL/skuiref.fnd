;SKILL Language Functions
("dplp"
"dplp( 
g_arg 
) 
=> t / nil"
"This predicate function returns t if the argument passes a test to determine whether it is a disembodied property list, and returns nil otherwise.")
("hiAddNonRepeatPrefix"
"hiAddNonRepeatPrefix(
t_prefix
)
=> t / nil"
"Adds a string to the list of repeat filter strings. All strings will be compared on every command run.")
("hiBoxCenter"
"hiBoxCenter(
l_boundingBox
)
=> l_boxCenter"
"Returns the center point of a bounding box.")
("hiEditfile"
"hiEditfile()
=> t / nil"
"Brings up a form in which you can specify the file you want to edit and then calls the edit function on the file.")
("hiDisplaySaveForRestoreDialog"
"hiDisplaySaveForRestoreDialog( )
=> nil"
"Displays the Save Session Form, which lets you specify the file in which to save your session information. This function is the programmatic equivalent of selecting Options - Save Session in the CIW.")
("hiEnqueueCmd"
"hiEnqueueCmd(
t_command
[ g_logCommand ]
)
=> t"
"Adds t_command, which is to be executed after returning from the current function and re-entering the event loop, to the command queue.")
("hiFlush"
"hiFlush( )
=> t"
"Causes event queues to be synchronized and processes all exposure events. This ensures that newly exposed or updated windows and forms are drawn. This function is used primarily for quicktests.")
("hiFlushCIW"
"hiFlushCIW( ) 
=> t"
"Immediately flushes any buffered output to the CIW (Command Interpreter Window). The function also processes the input and timer events. To avoid any additional event processing use the hiFlushInfo function.")
("hiFlushInfo"
"hiFlushInfo(
)
=> t"
"Processes exposure events to allow the output of the previous program to be displayed in the CIW during the SKILL code processing.")
("hiFlushLogFile"
"hiFlushLogFile( ) 
=> t / nil"
"Flushes the contents of the main and any open secondary log files.")
("hiFocusToCIW"
"hiFocusToCIW(
[ w_windowId ] 
) 
=> t / nil"
"Temporarily refocuses the input window to the CIW until a return is entered. ")
("hiGetAttention"
"hiGetAttention( 
[ x_loudness ]
) 
=> t / nil"
"Rings the bell in the keyboard or terminal.")
("hiGetDisplayName"
"hiGetDisplayName( ) 
=> t_name / nil"
"Returns the current display name.")
("hiGetMouseMoveSampleRate"
"hiGetMouseMoveSampleRate( ) 
=> x_rate"
"Gets the current setting of the mouse sample rate.")
("hiGetMouseStopDetectTime"
"hiGetMouseStopDetectTime( ) 
=> x_time"
"Gets the current setting (in milliseconds) used to detect if a mouse has stopped moving.")
("hiGetMultiClickTime"
"hiGetMultiClickTime( ) 
=> x_milliseconds"
"Returns the number of milliseconds that must elapse before a mouse click is recognized as a separate single click rather than the second click of a double click.")
("hiGetNonRepeatPrefixes"
"hiGetNonRepeatPrefixes( 
[ g_includeInternalPrefixes ]
) 
=> l_prefixes"
"Returns list of hiRepeat filter strings.")
("hiGetScreenSize"
"hiGetScreenSize() 
=> l_sizes ( l_widthHeightPixels l_widthHeightMillimeters )"
"Returns the size of the current display screen as a list of two lists, the first being the width and height in pixels, the second being the width and height in millimeters.")
("hiGraphicMode"
"hiGraphicMode( ) 
=> t / nil"
"Returns t if the Virtuoso environment is currently running in graphical mode, nil if it is running in -nograph mode.")
("hiGetBeepVolume"
"hiGetBeepVolume( ) 
=> x_loudness"
"Retrieves the loudness of the beep.")
("hiGetCommandPoint"
"hiGetCommandPoint(
[ w_windowId ] 
[ g_dontAdjust ]
) 
=> pointList / nil"
"Gets the location where the cursor was the last time a mouse button or keyboard key was pressed, but only until the cursor leaves that window. ")
("hiGetCIWindow"
"hiGetCIWindow( ) 
=> w_windowId"
"Retrieves the window identity of the CIW.")
("hiGetBannerPoint"
"hiGetBannerPoint(
[ w_windowID ]
)
=> l_point / nil"
"Retrieves the X:Y location value stored in the banner of the specified window. If the window ID is not specified, Virtuoso returns the location of the current window.")
("hiGetPoint"
"hiGetPoint(
w_windowId 
) 
=> pointList / nil"
"Retrieves the xy position for the current location of the cursor within the boundaries of the window. It returns the xy position even if the cursor is in another window or form that is covering the specified window, as long as the cursor is within the boundaries of the specified window.")
("hiInsertBlankCIWOutputPage"
"hiInsertBlankCIWOutputPage(
)
=> t / nil"
"Inserts a blank page to the CIW output area.")
("hiQuit"
"hiQuit( )"
"Quits the Virtuoso session.")
("hiRegTimer"
"hiRegTimer(
t_callbackString
x_tenthsofSeconds
)
=> t / nil"
"Registers a SKILL function string that is executed after the specified time.")
("hiRemoveNonRepeatPrefix"
"RemoveNonRepeatPrefix(
t_prefix
) 
=> t / nil"
"Removes a repeat filter prefix that has been previously added using hiAddNonRepeatPrefix.")
("hiRepeat"
"hiRepeat( ) 
=> t"
"Re-executes the last command executed in the CIW.")
("hiGetRepeatCommand"
"hiGetRepeatCommand( )
=> t_SkillCommand / nil"
"Returns the command that would be executed by hiRepeat, that is, the command that was last executed in the CIW; or nil, in cases where hiRepeat will not execute a command.")
("hiAddExtraRepeatCommand"
"hiAddExtraRepeatCommand(
t_command
) 
=> t / nil"
"Adds the specified SKILL command to the extra repeat command list so that the command becomes repeatable next time the hiRepeat function is called. You can use this function to add those commands to the extra repeat command list that cannot be repeated automatically after they are run for the first time.")
("hiGetExtraRepeatCommands"
"hiGetExtraRepeatCommands(
) 
=> l_commands / nil"
"Retrieves all commands added by the hiAddExtraRepeatCommand SKILL function in the extra repeat command list.")
("hiIsExtraRepeatCommand"
"hiIsExtraRepeatCommand(
t_command
) 
=> t / nil"
"Checks whether the specified SKILL command is in the extra repeat command list.")
("hiRemoveExtraRepeatCommand"
"hiRemoveExtraRepeatCommand(
t_command
) 
=> t / nil"
"Removes the specified SKILL command from the extra repeat command list. The commands in this list are added using hiAddExtraRepeatCommand. When the command is removed it becomes unrepeatable.")
("hiSaveForRestore"
"hiSaveForRestore(
[ t_fileName ]
)
=> t / t_failedFilePath"
"Saves your session information in the file you specify. This function is the programmatic equivalent of selecting the Options - Save Sessions command in the CIW and saving a file in the Save Sessions form that appears.")
("hiScaleBox"
"hiScaleBox( 
l_boundingBox 
n_scale 
) 
=> l_scaledBBox"
"Returns a bounding box that has the same center point as the bounding box passed in, but whose sides are scaled by 1/n_scale.")
("hiSetBeepVolume"
"hiSetBeepVolume( 
[ x_loudness ]
) 
=> t"
"Sets the loudness of the beep.")
("hiSetMouseMoveSampleRate"
"hiSetMouseMoveSampleRate( 
x_rate
) 
=> t / nil"
"Sets how many mouse motion events will be processed.")
("hiSetMouseStopDetectTime"
"hiSetMouseStopDetectTime( 
x_time
) 
=> x_time / nil"
"Sets the stop detection time to detect if a mouse has stopped moving.")
("hiSetMultiClickTime"
"hiSetMultiClickTime( 
x_milliseconds 
) 
=> t"
"Sets the number of milliseconds that must elapse before a mouse click is recognized as a separate single click rather than the second click of a double click.")
("hiSetUserPreferences"
"hiSetUserPreferences( ) 
=> t / nil"
"Displays the User Preferences form with the latest values.")
("hiSetWindowDefaultPrompt"
"hiSetWindowDefaultPrompt(
w_windowId
t_prompt
)
=> t_prevPrompt / nil"
"Sets the prompt for the window associated with the given window ID instead of the default SKILL prompt. The function returns either the value of the previously set prompt or nil. If you specify an empty string for t_prompt, the function resets the prompt to the default value, which is the SKILL prompt.")
("hiSetWindowFocus"
"hiSetWindowFocus(
w_windowId
[ g_setCurrent ]
)
=> t / nil"
"Sets the focus to the window associated with the given window ID.")
("hiSynchronize"
"hiSynchronize( 
g_ignored 
) 
=> t"
"Flushes the event queue by calling QApplication::flush().")
("hiCheckAbort"
"hiCheckAbort( ) 
=> t / nil"
"Returns the value of the global abort flag.")
("hiGetUserAbort"
"hiGetUserAbort( ) 
=> t / nil"
"Returns t if the user has pressed Ctrl-C to abort a procedure, and nil otherwise.")
("hiResetAbort"
"hiResetAbort( ) 
=> t"
"Sets the global abort flag to nil.")
("hiSetAbort"
"hiSetAbort( ) 
=> t"
"Sets the global abort flag to t.")
("hiEndLog"
"hiEndLog( )
=> t / nil"
"Stops writing the transaction log to the file previously specified by hiStartLog.")
("hiGetLogFileName"
"hiGetLogFileName( ) 
=> t_logPath"
"Returns the rooted file name of the Virtuoso session log file.")
("hiIsInReplay"
"hiIsInReplay( )
=> t / nil"
"Indicates whether your Virtuoso session is in replay mode, that is, if commands are being executed from a replay file, which is typically a log file. Your session is in replay mode if you are running a Virtuoso workbench with the -replay logfile or -test option or if you are replaying a file with the hiReplayFile SKILL function.")
("hiLogDragEvents"
"hiLogDragEvents(
g_logDragEvents
g_logAllDragEvents
)
=> t"
"Starts logging drag events (mouse movements in a graphics window while an enter function is active) in the log file so that they can be replayed later.")
("hiPrintToLogFile"
"hiPrintToLogFile(
t_string
[ g_comment ]
)
=> t"
"Prints the specified string to the CDS.log file, and to any secondary log files that might have been opened with hiStartLog, without displaying it in the CIW output area.")
("hiReplayFile"
"hiReplayFile(
s_fileName 
) 
=> t / nil"
"Replays a log file. Use this function only for testing or debugging. In general, use the functions load or loadi instead of hiReplayFile. hiReplayFile is intended to be run only from a Command Interpreter Window.")
("hiSetFilter"
"hiSetFilter(
[ t_filter ]
) 
=> t / nil"
"Sets the output message filter for the CIW with the option specified by t_filter. The output area of the CIW is refreshed immediately. If no option is specified, the Set Log File Display Filter form appears allowing you to specify the display options you want. ")
("hiSetFilterOptions"
"hiSetFilterOptions(
g_accelInput
g_prompt
g_output
g_returnAccel
g_typedReturn
g_errorOutput
g_warnOutput
) 
=> t / nil"
"Sets the output message filter for the CIW with the specified options. This function corresponds to the Set Log File Display Filter form (displayed by choosing Options - Log Filter in the CIW). Standard message output, return values from typed-in commands, errors and warning messages are displayed by default.")
("hiStartLog"
"hiStartLog(
t_filename
) 
=> t / nil"
"Writes a transaction log to a file.")
("hiGetBBoxResource"
"hiGetBBoxResource(
t_resourceName
[ t_resourceClass ] 
) 
=> l_bBoxSpec"
"Returns the bounding box specification defined in the .Xdefaults file for the specified resource. ")
("hiGetGeometryResource"
"hiGetGeometryResource(
t_resourceName
[ t_resourceClass ]
)
=> l_resource"
"Gets geometry resources from the X resource database. ")
("hiGetStringResource"
"hiGetStringResource(
t_resourceName
[ t_resourceClass ]
)
=> g_resource / nil"
"Gets resources from the resource database of the X Window System.")
("hiGetFont"
"hiGetFont(
S_fontType 
) 
=> t_fontType / l_fontList / nil"
"Returns the font type (if valid), or a list of valid font types if t_fontType is all. This function is being provided for compatibility with previous releases and should no longer be used.")
("hiGetFontInfo"
"hiGetFontInfo(
S_fontType 
) 
=> l_fontInfoDpl / l_fontInfoDpls / nil"
"Returns the Disembodied Property List (DPL), which contains the name, size, weight, and italic style along with the description of the font.")
("hiGetXFontName"
"hiGetXFontName(
S_fontType 
) 
=> t_XLFD_font_name / nil"
"Returns the default font name for the specified font type that was used prior to TrueType fonts.")
("hiGetTextWidth"
"hiGetTextWidth(
S_fontType 
t_text 
) 
=> x_width / -1"
"Returns the width, in pixels, of a string of characters that has a specified font. ")
("hiQueryFont"
"hiQueryFont(
S_fontType 
) 
=> l_fontAttributes"
"Returns the values of the attributes of S_fontType. ")
("hiSetFont"
"hiSetFont(
[ S_fontType 
?name t_fontName 
?size x_fontSize 
?bold g_useBold 
?italic g_useItalics 
?fontInfo l_fontInfoDpl ] 
) 
=> t / nil"
"Sets the required font attributes, such as font name, font size, or font weight for label, text, or ciw. If no argument is specified, then the Set Fonts window is displayed. In this window, you can set any of the valid fonts and click the Apply button to save the changes.")
("hiTextWidth"
"hiTextWidth(
S_fontType
t_text
)
=> x_width / nil"
"Determines the width, in pixels, of a string of characters that has a specified font. Returns nil if the font type is not valid.")
("startCdsenvEditor"
"startCdsenvEditor(
)
=> t / nil"
"Starts Cdsenv Editor.")
("envCyclicStringToIndex"
"envCyclicStringToIndex(
t_tool[.Partition]
t_varName
t_cyclicString
) 
=> x_itemIndex"
"Returns the index of the string for the given cyclic variable. This order is determined by the order of choices specified in the tool's registration file. The index is 0-based. -1 will be returned for an invalid choice. ")
("envCyclicIndexToString"
"envCyclicIndexToString(
t_tool[.Partition]
t_varName
x_itemIndex
) 
=> t_stringChoice"
"Returns the string choice associated with a particular index. This order is determined by the order of choices specified in the tool's registration file. The index is 0-based. -1 will be returned for an invalid choice. ")
("envGetAvailableTools"
"envGetAvailableTools( )
=> l_availableTools"
"Allows users to know which tools are available to be loaded.")
("envGetDefVal"
"envGetDefVal(
t_tool[.Partition]
t_varName
[ s_varType ]
) 
=> g_data"
"Retrieves the registered default value for a variable. The tool will be faulted in if it is not already faulted in; faulting in is the process of reading the .cdsenv file and initializing the variables.")
("envGetLoadedTools"
"envGetLoadedTools( )
=> l_loadedTools"
"Allows users to know which tools have currently been loaded.")
("envGetModifiedTools"
"envGetModifiedTools( )
=> l_modToolList / nil"
"Returns a list of all tools with modified variables.")
("envGetVal"
"envGetVal(
t_tool[.Partition]
t_varName
[ s_varType ]
) 
=> g_data"
"Retrieves the value of an environment variable. The tool will be faulted in if it is not already faulted in; faulting in is the process of reading the .cdsenv file and initializing the variables.")
("envGetVarType"
"envGetVarType(
t_tool[.Partition]
t_varName
) 
=> s_varType"
"Returns the type of the variable specified. This query will cause the tool to be loaded, if it has not already been loaded. ")
("envIsToolModified"
"envIsToolModified(
t_toolName
)
=> t / nil"
"Checks if any of the variables for a specified tool have been modified.")
("envIsVal"
"envIsVal(
t_tool[.Partition]
t_varName
[ g_faultIn ]
)
=> t / nil"
"Indicates whether a particular variable has been loaded and whether it exists for the given tool[.partition].")
("envLoadFile"
"envLoadFile(
t_fileName 
)
=> t / nil"
"Specifies that a set of environment variables is to be loaded from a specified file. This function is equivalent to calling envLoadVals( ) with the ?tool argument set to ALL. All values loaded will be marked as modified.")
("envLoadVals"
"envLoadVals(
?envFile t_fileName 
[ ?tool t_toolName ] 
)
=> t / nil"
"Specifies that a set of environment variables is to be loaded from a specified file.")
("envRegLoadDumpTrigger"
"envRegLoadDumpTrigger(
?tool t_toolName 
?loadFunc s_loadFunc 
?dumpFunc s_dumpFunc
?preDumpFunc s_preDumpFunc
)
=> t / nil"
"Registers the trigger function to be called when a tool's environment variables are loaded or saved to a file. Both the load and dump trigger functions are called after the load or dump of the environment variables, respectively. The preDump trigger is called just before the dump occurs. The dump trigger can be used to update the defValues of forms when a saving of defaults is performed.")
("envRegSetTrigger"
"envRegSetTrigger(
t_tool
s_triggerFunc 
)
=> t / nil"
"Registers a set trigger function for a tool. This trigger will be called after an environment variable is set. You can set only one trigger for a tool. Subsequent calls to envRegSetTrigger for the same t_tool will return nil, indicating that the trigger was not set.")
("envSetToolCurrValToDefault"
"envSetToolCurrValToDefault(
t_tool[.Partition]
)
=> t / nil"
"Sets the current value of all the environment variables to the default values.")
("envSetToolDefaultToCurrVal"
"envSetToolDefaultToCurrVal(
t_tool[.Partition]
)
=> t / nil"
"Sets the default value of all the environment variables to the current value of the variables.")
("envSetVal"
"envSetVal(
t_tool[.Partition]
t_varName
s_varType
g_newVal
) 
=> t / nil"
"Sets an environment variable value in the setup database. The tool will be faulted in if it is not already faulted in; faulting in is the process of reading the .cdsenv file and initializing the variables. If a set trigger function is registered for this variable (see the  envRegSetTrigger function), it will be called after the value is set.")
("envSetVarCurrValToDefault"
"envSetVarCurrValToDefault(
t_tool[.Partition]
t_varName
)
=> t / nil"
"Sets the current value of the environment variable you specify to the default value.")
("envSetVarDefaultToCurrVal"
"envSetVarDefaultToCurrVal(
t_tool[.Partition]
t_varName
)
=> t / nil"
"Sets the default value of the environment variable you specify to the current value of the variable.")
("envStoreEnv"
"envStoreEnv(
[ ?envFile t_fileName ] 
[ ?tool t_tool[.partition] ] 
[ ?toolStatus t_toolStatus ]
[ ?varStatus s_varStatus ]
[ ?fileStatus t_fileStatus ]
)
=> t / nil"
"Stores environment variables associated with tools to a specific file. You can choose to save variables for a specific tool, all loaded tools, or all possible tools. You can also specify whether you want to save all the variables for a tool, the variables that have been modified, or only the variables that have been modified and that are different from the default value.")
("envUnregLoadDumpTrigger"
"envUnregLoadDumpTrigger(
?tool t_toolName 
?loadFunc s_loadFunc 
?dumpFunc s_dumpFunc
?preDumpFunc s_preDumpFunc
)
=> t / nil"
"Deregisters the specified trigger functions for the specified tool. The specified functions are deleted from the corresponding list of the trigger functions for the tool.")
("envUnregSetTrigger"
"envRegSetTrigger(
t_tool
s_triggerFunc 
)
=> t / nil"
"Deregisters the specified set trigger function for the specified tool. The specified function is deleted from the list of the set trigger functions for the tool.")
("perfDiagInstall"
"perfDiagInstall
g_RdOnly
[ ?g_openCallstack g_openCallstack | ?g_loadOnly g_loadOnly ]
=> t / nil"
"Installs the Performance Diagnosis tools and places its submenu under the Tools menu in CIW. You can use this tool to diagnose various performance issues in Virtuoso custom IC design platform, typically starting with the PerfDiagnosis control form to record callstacks.")
("hiAddMenuItem"
"hiAddMenuItem(
r_hiMenu 
r_menuItem
) 
=> t / nil"
"Adds the menu item or action to the end of all instances of the specified hiMenu.")
("hiCreate2DMenu"
"hiCreate2DMenu(
s_menuHandle
t_menuTitle
l_menuItems
) 
=> r_hiMenu"
"Creates a two-dimensional popup menu. Once this menu is created, you can display it with hiDisplayMenu or associate it with a window using hiSetWindowMenu.")
("hiCreateHorizontalFixedMenu"
"hiCreateHorizontalFixedMenu(
s_menuHandle 
l_menuItems 
x_rows 
x_cols 
[ S_doneCallback ]
[ s_showTextWithIcon ]
) 
=> r_hiMenu"
"Creates a horizontal fixed menu that is a free-floating menu unattached to any application window. The fixed menu is created as a grid of row x column dimensions, and contains menu item objects created by hiCreateMenuItem. An additional Done item is added as the last item. Selecting Done removes the fixed menu from the screen.")
("hiCreateMenu"
"hiCreateMenu(
s_menuHandle 
t_menuTitle 
l_menuItems 
) 
=> r_hiMenu"
"Returns the SKILL representation of a popup menu. Once this menu is created, you can display it with hiDisplayMenu or associate it with a window using hiSetWindowMenu. ")
("hiCreateMenuItem"
"hiCreateMenuItem(
?name s_itemHandle 
?itemText t_menuItemText 
[ ?itemIcon g_menuIcon ] 
[ ?callback t_itemCallback ]
[ ?disable g_disabled ] 
[ ?statusTip t_statusTip ]
[ ?font t_font ]
) 
=> r_hiMenuItem"
"Creates a menu item that can be used in any type of menu, except two-dimensional menus and simple menus.")
("hiCreatePulldownMenu"
"hiCreatePulldownMenu( 
s_menuHandle 
g_menuTitle 
l_menuItems 
) 
=> r_hiMenu"
"Creates a pulldown menu that contains text, icon, or slider menu items. s_menuHandle is the SKILL symbol set to the created menu.")
("hiCreateSimpleMenu"
"hiCreateSimpleMenu(
s_menuHandle 
t_menuTitle 
l_menuItems 
l_menuItemCallbacks 
) 
=> r_hiMenu"
"Returns the SKILL description of a simple menu, which is a single level menu containing only text menu items, none of which invoke a submenu. Once this menu is created, you can display it with hiDisplayMenu or associate it with a window using hiSetWindowMenu.")
("hiCreateSeparatorMenuItem"
"hiCreateSeparatorMenuItem(
?name s_itemHandle
)
=> r_hiSeparatorMenuItem"
"Creates a menu separator-a horizontal line that separates menu items. This menu item is used in the l_menuItems argument of the hiCreateMenu and hiCreatePulldownMenu functions. You can use the separator menu item in more than one menu or in multiple locations in the same menu.")
("hiCreateSliderMenuItem"
"hiCreateSliderMenuItem(
?name s_itemHandle 
?itemText t_menuItemText 
?subMenu r_pulldownMenu 
[ ?itemIcon l_menuIcon ]
[ ?disable g_disabled ]
[ ?statusTip t_statusTip ]
[ ?font t_font ]
) 
=> r_hiSliderItem"
"Creates a slider menu item that is used in functions that create a menu (all menus except simple or 2D menus). Slider menu items bring up submenus when selected. They can contain text (t_menuItemText) or icon (l_menuIcon) information.")
("hiCreateTypeinMenuItem"
"hiCreateTypeinMenuItem(
?name s_name 
[ ?itemIcon g_icon ] 
[ ?itemText t_text ] 
[ ?callback S_funcname ] 
[ ?disable g_disable ] 
[ ?statusTip t_statusTip ] 
[ ?toolTip t_toolTip ] 
[ ?completerType s_type ] 
[ ?completerList l_list ]
) 
=> r_menuItem / nil"
"Creates a type-in menu item that can receive user inputs. When a user types text in the type-in menu item created using this function and presses Enter, the specified callback function (S_funcname) is executed.")
("hiSetTypeinMenuItemCompleterList"
"hiSetTypeinMenuItemCompleterList(
r_menu 
s_menuItem 
l_completerList 
) 
=> t / nil"
"Replaces the list of strings that store the history of user inputs for the specified type-in menu item. This list is used to assist user inputs in the type-in menu item.")
("hiCreateVerticalFixedMenu"
"hiCreateVerticalFixedMenu(
s_menuHandle 
l_menuItems 
x_rows 
x_cols 
[ S_doneCallback ]
[ s_showTextWithIcon ]
) 
=> r_hiMenu"
"Creates a vertical fixed menu that can be displayed in the root window. Fixed menus can no longer be displayed in application windows; use the new toolbar functions to create toolbars for windows instead.")
("hiDeleteMenu"
"hiDeleteMenu(
r_hiMenu 
) 
=> t / nil"
"Destroys the menu given by hiMenu, which must be a valid data structure. Individual menu items contained in this menu are also destroyed.")
("hiDeleteMenuItem"
"hiDeleteMenuItem(
r_hiMenu 
s_itemHandle
) 
=> t / nil"
"Deletes a menu item or action from all instances of the specified r_hiMenu. ")
("hiDisableMenuItem"
"hiDisableMenuItem(
r_hiMenu 
s_itemHandle
[ w_windowId ] 
) 
=> t / nil"
"Grays out a menu item on pull-down, pop-up, or fixed menus, making it unselectable.")
("hiDisplayFixedMenu"
"hiDisplayFixedMenu(
r_hiMenu 
g_menuLocation
[ x_width ]
[ x_height ] 
[ g_staysOnTop }
) 
=> t / nil"
"Displays the specified fixed menu in the default root window (screen). The menu appears on a side of the screen, to be shared among Cadence application windows contained within the screen. The x_width and y_height arguments are ignored and currently exist only for compatability reasons. x_width and y_height of the menu are automatically determined by the size of the menu items and the number of columns and rows.")
("hiDisplayMenu"
"hiDisplayMenu(
r_hiMenu 
[ l_position ] 
) 
=> t / nil"
"Displays a menu created by hiCreateMenu, hiCreateSimpleMenu, or hiCreate2DMenu. For non-2D menus, the menu is always displayed at the current cursor's position at the time hiDisplayMenu is called. ")
("hiDisplayWindowMenu"
"hiDisplayWindowMenu(
w_windowId 
) 
=> t / nil"
"Displays the popup menu associated with the given w_windowId, which must be a valid data structure returned by a call to hiOpenWindow or hiCreateWindow. ")
("hiEnableMenuItem"
"hiEnableMenuItem(
r_hiMenu 
s_itemHandle
[ w_windowId ] 
) 
=> t / nil"
"Makes unselectable menu items in pull-down, pop-up, or fixed menus selectable.")
("hiFixedMenuDown"
"hiFixedMenuDown(
r_hiMenu 
) 
=> t / nil"
"Removes the specified fixed menu from the screen.")
("hiGetMenuItems"
"hiGetMenuItems(
r_hiMenu
)
=> l_menuItems / nil"
"Returns a list of the menu items in the specified menu.")
("hiGetWindowMenu"
"hiGetWindowMenu(
w_windowId 
) 
=> s_hiMenu / nil"
"Returns the symbol of the menu associated with the specified window. This menu was associated with a window by using hiSetWindowMenu.")
("hiInsertMenuItem"
"hiInsertMenuItem(
r_hiMenu 
r_menuItem
g_position 
) 
=> t / nil"
"Inserts a menu item or action into a specified position of all instances of r_hiMenu.")
("hiIs2DMenu"
"hiIs2DMenu(
g_menu 
) 
=> non-nil / nil"
"Determines whether the specified argument is a valid 2D menu. ")
("hiIsIcon"
"hiIsIcon(
g_icon 
) 
=> t / nil"
"Determines whether the specified argument is a valid icon.")
("hiIsMenu"
"hiIsMenu(
g_menu 
) 
=> non-nil / nil"
"Determines whether the specified argument is a valid menu.")
("hiIsMenuItemEnabled"
"hiIsMenuItemEnabled(
r_hiMenu
s_itemHandle
[ w_windowId ]
) 
=> t / nil"
"Determines whether a menu item is enabled. ")
("hiSetMenuItemCallback"
"hiSetMenuItemCallback(
r_hiMenu 
s_itemHandle 
t_callback 
) 
=> t / nil"
"Changes the callback associated with all instances of a specified menu item.")
("hiSetMenuItemStatusTip"
"hiSetMenuItemStatusTip(
r_hiMenu
s_itemHandle
t_statusTip
)
=> t / nil"
"Sets the status tip for the specified menu item. The status tip is displayed on the status bar at the bottom of the window when the mouse hovers over the menu item.")
("hiSetMenuItemText"
"hiSetMenuItemText(
r_hiMenu 
s_itemHandle 
t_itemText 
) 
=> t / nil"
"Changes the text associated with all instances of a specified menu item.")
("hiSetWindowMenu"
"hiSetWindowMenu(
g_menu 
w_windowId 
) 
=> t / nil"
"Associates the given menu with the specified window.")
("ddHiCreateCellToolbarComboBox"
"ddHiCreateCellToolbarComboBox(
?name s_name 
[ ?prompt t_prompt ] 
[ ?value t_currentValue ]
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?width x_width ]
[ ?statusTip t_statusTip ]
[ ?toolTip t_toolTip ] 
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> o_comboBox"
"Creates a customized Cell combo-toolbar item, which is an extension of a regular toolbar combo box item, for selecting cells.")
("ddHiCreateLibraryToolbarComboBox"
"ddHiCreateLibraryToolbarComboBox(
?name s_name 
[ ?prompt t_prompt ] 
[ ?value t_currentValue ]
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?width x_width ]
[ ?statusTip t_statusTip ]
[ ?toolTip t_toolTip ] 
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> o_comboBox"
"Creates a customized Library combo-toolbar item, which is an extension of a regular toolbar combo box item, for selecting libraries.")
("ddHiCreateViewToolbarComboBox"
"ddHiCreateViewToolbarComboBox(
?name s_name 
[ ?prompt t_prompt ] 
[ ?value t_currentValue ]
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?width x_width ]
[ ?statusTip t_statusTip ]
[ ?toolTip t_toolTip ] 
[ ?viewTypes l_viewTypes ]
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> o_comboBox"
"Creates a customized View combo-toolbar item, which is an extension of a regular toolbar combo box item, for selecting views.")
("hiCreateToolbar"
"hiCreateToolbar(
?name s_name
[ ?title t_title ]
[ ?toolButtonStyle s_buttonStyle ]
[ ?toolTip t_toolTip ]
[ ?items l_toolbarItems ]
[ ?invisible g_invisible ]
[ ?contextMenuItems l_contextMenuItems ]
)
=> o_hiToolbar"
"Creates a toolbar that you can add to windows and session windows. A toolbar is a container object that can contain combo boxes, type-in items, actions, and separators.")
("hiPlaceToolbar"
"hiPlaceToolbar(
w_windowID
o_hiToolbar
[ s_toolbarArea ]
)
=> t / nil"
"Adds a toolbar to the specified toolbar area of a window. If the toolbar already exists on the window, this function moves it to the specified area. The toolbar is placed at the end of the current toolbars in that area.")
("hiInsertToolbar"
"hiInsertToolbar(
w_windowID
o_hiToolbar
s_toolbar
)
=> t / nil"
"Inserts a toolbar into the toolbar area of a window before s_toolbar.")
("hiDeleteToolbar"
"hiDeleteToolbar(
w_windowID
s_toolbar
)
=> t / nil"
"Deletes a toolbar from a window.")
("hiHideToolbar"
"hiHideToolbar(
o_hiToolbar
[ g_detach ]
)
=> t / nil"
"Hides a toolbar. If g_detach is set to t, this function removes the toolbar from the window.")
("hiShowToolbar"
"hiShowToolbar(
o_hiToolbar
)
=> t / nil"
"Displays a hidden toolbar.")
("hiSetToolbarObjName"
"hiSetToolbarObjName(
o_hiToolbar
t_name
)
=> t / nil"
"Sets a name for the toolbar that is used for storing window configuration information about the toolbar. Every toolbar must have a unique name that does not change. Do not use this function with toolbars provided by Cadence.")
("hiGetToolbarObjName"
"hiGetToolbarObjName(
o_hiToolbar
)
=> t"
"Gets the name that is used to store the toolbar's window configuration information. This name is set with the hiSetToolbarObjName function.")
("hiGetWindowToolbars"
"hiGetWindowToolbars(
w_windowId
)
=> l_toolbars"
"Gets the list of toolbars that a window contains. The toolbars are listed in the order in which they were placed in the window with hiPlaceToolbar.")
("hiCreateToolbarComboBox"
"hiCreateToolbarComboBox(
?name s_name
?items l_items
[ ?prompt t_prompt ]
[ ?value t_value ]
[ ?toolTip t_tooltip ]
[ ?callback t_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?width x_width ]
[ ?statusTip t_statusTip ]
[ ?CBOnEnter g_cbOnEnter ]
)
=> o_comboBox"
"Creates a drop-down list box item (popularly called a combo box) to be added to the toolbar created using hiCreateToolbar. The drop-down list box has a type-in field as well as a drop-down list. You can either type in a value or select an item from the list.")
("hiCreateToolbarTypein"
"hiCreateToolbarTypein(
?name s_name
[ ?prompt t_prompt ]
[ ?value t_value ]
[ ?tooltip t_tooltip ]
[ ?callback t_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?width x_width ]
[ ?statusTip t_statusTip ]
[ ?CBOnEnter g_cbOnEnter ]
)
=> o_typein"
"Creates a type-in field to be added to the toolbar created using hiCreateToolbar.")
("hiCreateToolbarSeparator"
"hiCreateToolbarSeparator(
?name s_name
)
=> o_separator"
"Creates a separator that is used to separate the items in a toolbar created using hiCreateToolbar.")
("hiCreateAction"
"hiCreateAction(
?name s_name
[ ?callback t_callback ]
[ ?icon g_icon ]
[ ?iconText t_iconText ]
[ ?toolTip t_tooltip ]
[ ?enabled g_enabled ]
[ ?checkable g_checkable ]
[ ?checked g_checked ]
[ ?defAction g_defaultAction ]
[ ?actionList l_actionList ]
[ ?statusTip t_statusTip ]
[ ?useNameForIconText g_useNameForIconText ]
)
=> o_action"
"Creates an action for a toolbar or menu. An action is a toolbar or menu item that, when clicked, triggers a callback. Actions are typically used for common commands that are added to multiple places in the user interface, such as toolbars and menus. An action present in both a toolbar and a menu remains synchronized. For example, if it is selected from the toolbar, the corresponding menu item is also checked.")
("hiSetActionChecked"
"hiSetActionChecked(
o_action
g_checkState
[ g_triggerCB ]
)
=> t / nil"
"Sets an action's checked state (checked or unchecked) and triggers the action's callback, unless you specify otherwise by setting g_triggerCB to nil.")
("hiGetSharedIcon"
"hiGetSharedIcon(
t_callback
)
=> g_icon / nil"
"Gets the icon associated with an action. The icon is in the format in which it was originally specified: an image file name or an hiIcon list.")
("hiAddToolbarItem"
"hiAddToolbarItem(
o_hiToolbar
o_hiToolbarItem
)
=> t / nil"
"Adds one toolbar item to a toolbar. The item is added to the end of the toolbar.")
("hiAddToolbarItems"
"hiAddToolbarItems(
o_hiToolbar
l_toolbarItems
)
=> t / nil"
"Adds a list of toolbar items to a toolbar. The items are added at the end of the toolbar.")
("hiInsertToolbarItem"
"hiInsertToolbarItem(
o_hiToolbar
o_hiToolbarItem
s_toolbarItemBefore
)
=> t / nil"
"Inserts a toolbar item before a specific item in a toolbar.")
("hiInsertToolbarItems"
"hiInsertToolbarItems(
o_hiToolbar
l_hiToolbarItems
s_toolbarItemBefore
)
=> t / nil"
"Inserts toolbar items before a specific item in a toolbar.")
("hiDeleteToolbarItem"
"hiDeleteToolbarItem(
o_hiToolbar
s_toolbarItem
)
=> t / nil"
"Deletes a toolbar item from a toolbar.")
("hiDeleteToolbarItems"
"hiDeleteToolbarItems(
o_hiToolbar
l_toolbarItems
)
=> t / nil"
"Removes toolbar items from a toolbar.")
("hiReattachToolbar"
"hiReattachToolbar(
o_toolbar
)
=> t / nil"
"Reattaches a given toolbar to its parent main window without showing it.")
("hiFocusToToolbarItem"
"hiFocusToToolbarItem(
?toolbar S_toolbar 
?item S_toolbarItem 
[?warpPointer g_warp] 
[?window w_window]
)
=> t / nil"
"Sets the keyboard focus on a visible, enabled, and editable toolbar type-in or combo item.")
("hiListFocusableToolbarItems"
"hiListFocusableToolbarItems( 
[w_window] 
)
=> t / nil"
"Lists all type-in and combo toolbar items that are currently defined in the specified window and can be used as arguments for the function hiFocusToToolbarItem.")
("hiDeleteToolbarBreak"
"hiDeleteToolbarBreak(
w_windowID 
s_toolbar 
) 
=> t / nil"
"Deletes the toolbar break before the specified toolbar from the toolbar area of a window.")
("hiHasToolbarBreak"
"hiHasToolbarBreak( 
w_windowID 
s_toolbar 
) 
=> t / nil"
"Returns a Boolean value indicating whether there was a toolbar break before the specified toolbar.")
("hiInsertToolbarBreak"
"hiInsertToolbarBreak(
w_windowID
s_toolbar 
) 
=> t / nil"
"Inserts a toolbar break into the toolbar area of a window before the specified toolbar.")
("hiPlaceToolbarBreak"
"hiPlaceToolbarBreak
w_windowID
s_toolbarArea
)
=> t / nil"
"Adds a toolbar break to the specified toolbar area of a window.")
("hiDisplayAppDBox"
"hiDisplayAppDBox(
?name s_dboxHandle 
[ ?dboxBanner t_dboxBanner ]
[ ?dboxText t_dboxText ]
[ ?callback g_callback ]
[ ?dialogType x_dialogType ]
[ ?dialogStyle s_dialogStyle ] 
[ ?buttonLayout s_buttonLayout ]
[ ?buttons g_buttons ]
[ ?dontPopdowns g_dontPopdowns ]
[ ?defaultButton x_defaultButton ]
[ ?location l_location ]
[ ?help g_help ]
) 
=> t / nil / cancel"
"Creates and displays a dialog box. You can add a pre-defined set of buttons to the dialog box or you can specfiy your own buttons. The dialog box is destroyed when it is removed from the screen.")
("hiDisplayUserDBox"
"hiDisplayUserDBox(
?name s_dboxHandle
[ ?dboxBanner t_dboxBanner ]
[ ?dboxText t_dboxText ]
[ ?location l_location ]
[ ?dialogType x_dialogType ]
[ ?dialogStyle s_dialogStyle ]
[ ?defaultButton x_defaultButton ]
?buttons g_buttons
[ ?callbacks g_callbacks ]
[ ?dontPopdowns g_dontPopdowns ]
[ ?help g_help ]
)
=> buttonIndex / callbackReturnVal / t / nil"
"Creates and displays a dialog box. This function lets you customize buttons in the dialog box. You can also choose whether the dialog box is removed from the screen or not when a button is pressed. Using this function is equivalent to using hiDisplayAppDBox with s_buttonLayout set to 'UserDefined.")
("hiDBoxCancel"
"hiDBoxCancel( 
g_dboxID 
[ g_cancelFromCancel ] 
) 
=> t / nil"
"Function logged when either the Cancel or the No button is pressed on a dialog box. This function can also be called directly from SKILL to simulate pressing No or Cancel.")
("hiDBoxOK"
"hiDBoxOK( 
g_dboxID 
[ g_dontUnmanage ] 
) 
=> t / nil"
"Function logged when the OK, Yes or Done button is pressed in a dialog box. This function can also be called directly from SKILL to simulate pressing OK, Yes or Done.")
("hiSetDBoxDefaultLocation"
"hiSetDBoxDefaultLocation(
l_location
[ g_autoUpdate { t | nil } ]
)
=> t / nil"
"Sets the default location for all dialog boxes created with hiDisplayAppDBox, hiDisplayUserDBox, hiDisplayProgressBox, and hiDisplayFileDialog. This setting is used if the l_location argument of those functions has not been set or has been set incorrectly.")
("hiGetDBoxDefaultLocation"
"hiGetDBoxDefaultLocation( )
=> l_location / nil"
"Gets the default location of all dialog boxes, which has been set with the hiSetDBoxDefaultLocation function.")
("hiDisplayFileDialog"
"hiDisplayFileDialog(
[ ?dialogName s_dialogName ]
[ ?workingDir t_workingDir ]
[ ?filter t_filter ]
[ ?mode s_mode ]
[ ?modal g_modal ]
[ ?defaultValue t_defaultValue ]
[ ?callback t_callback ]
[ ?userData s_userData ]
[ ?caption t_caption ]
[ ?location l_location ]
[ ?acceptMode s_acceptMode ]
[ ?labelText t_labelText ]
[ ?confirmOverwrite g_confirmOverwrite ]
)
=> l_userSelection / nil"
"Creates and displays a file selection dialog box, which lets users select a file or directory. The dialog box is destroyed when it is removed from the screen.")
("hiFileDialogSelection"
"hiFileDialogSelection(
&_dialogName
)
=> l_userSelection / nil"
"Returns the selection made by the user in the file dialog box. This function is typically called from a user callback.")
("hiFileDialogSetSelection"
"hiFileDialogSetSelection(
&_dialogName
l_selection
s_event
)
=> t / nil"
"This function is logged when a selection is made from a file dialog.")
("hiFileDialogDone"
"hiFileDialogDone(
&_dialogName
g_accept
)
=> t / nil"
"This function is logged when a file dialog box is dismissed. Applications do not need to call this function; it is provided for replay purposes.")
("hiGetExistingFile"
"hiGetExistingFile(
[ ?workingDir t_workingDir ]
[ ?filter t_filter ]
[ ?dialogName s_dialogName ]
[ ?defaultValue t_defaultValue ]
[ ?callback t_callback ]
[ ?userData s_userData ]
[ ?caption t_caption ]
[ ?location l_location ]
[ ?modal g_modal ]
)
=> l_userSelection / nil"
"Calls hiDisplayFileDialog with the mode set to 'existingFile. Use this function to ask the user to select a file to open.")
("hiGetExistingFiles"
"hiGetExistingFiles(
[ ?workingDir t_workingDir ]
[ ?filter t_filter ]
[ ?dialogName s_dialogName ]
[ ?callback t_callback ]
[ ?userData s_userData ]
[ ?caption t_caption ]
[ ?location l_location ]
[ ?modal g_modal ]
)
=> l_userSelection / nil"
"Calls hiDisplayFileDialogBox with the mode set to 'existingFiles. Use this function to ask the user to select the files to open.")
("hiGetAnyFile"
"hiGetAnyFile(
[ ?workingDir t_workingDir ]
[ ?filter t_filter ]
[ ?dialogName s_dialogName ]
[ ?defaultValue t_defaultValue ]
[ ?callback t_callback ]
[ ?userData s_userData ]
[ ?caption t_caption ]
[ ?location l_location ]
[ ?modal g_modal ]
[ ?acceptMode s_acceptMode ]
[ ?confirmOverwrite g_confirmOverwrite ]
)
=> l_userSelection / nil"
"Calls hiDisplayFileDialogBox with the mode set to 'anyFile. Use this function to prompt the user to specify the name of a file to open or save.")
("hiGetExistingDirectory"
"hiGetExistingDirectory(
[ ?workingDir t_workingDir ]
[ ?dirOnly g_dirOnly ]
[ ?dialogName s_dialogName ]
[ ?defaultValue t_defaultValue ]
[ ?callback t_callback ]
[ ?userData s_userData ]
[ ?caption t_caption ]
[ ?location l_location ]
[ ?modal g_modal ]
)
=> l_userSelection / nil"
"Calls hiDisplayFileDialogBox with the mode set to 'dirOnly. If the ?dirOnly argument is nil, calls hiDisplayFileDialogBox with the mode set to 'directory. Use this function to ask the user to select a directory.")
("hiDisplayProgressBox"
"hiDisplayProgressBox(
?name s_name
[ ?banner t_banner ]
[ ?text t_text ]
[ ?location l_location ]
[ ?callback g_callback ]
[ ?totalSteps x_totalSteps ]
[ ?delay x_delay ]
[ ?autoClose g_autoClose ]
)
=> t / nil"
"Creates a progress dialog box that displays the progress of a command. The progress dialog box is always modeless (non-blocking).")
("hiCancelProgressBox"
"hiCancelProgressBox(
g_dboxID
)
=> t / nil"
"Programmatically cancels a progress dialog box. The callback procedure for the dialog box, if any, will be called.")
("hiIsProgressBoxCancelled"
"hiIsProgressBoxCancelled(
g_dboxID
)
=> t / nil"
"Checks whether a progress box is canceled. A progress box is considered canceled if it is canceled with the Cancel button, canceled with the hiCancelProgressBox function, closed from the window manager, or automatically closed when the progress bar reaches 100% (if it was created with the ?autoClose argument set to t).")
("hiGetProgress"
"hiGetProgress(
g_dboxID
)
=> x_currentProgress"
"Gets the current progress (that is, the current step) from a progress dialog box.")
("hiGetProgressTotalSteps"
"hiGetProgressTotalSteps(
g_dboxID
)
=> x_totalSteps"
"Gets the total number of steps of the progress bar in a progress dialog box.")
("hiSetProgress"
"hiSetProgress(
g_dboxID
x_step
)
=> t / nil"
"Sets the progress bar in a progress dialog box to the step you specify. Note, however, that the text above the progress bar remains the same; use hiSetProgressText to update the text or hiSetProgressAndText to update both the step and the text.")
("hiSetProgressText"
"hiSetProgressText(
g_dboxID
t_text
)
=> t / nil"
"Sets the text that is displayed above the progress bar in a progress dialog box.")
("hiSetProgressTotalSteps"
"hiSetProgressTotalSteps(
g_dboxID
x_totalSteps
x_step
)
=> t / nil"
"Sets the total number of steps on the progress bar in a progress dialog box. This function also sets the current step.")
("hiSetProgressAndText"
"hiSetProgressAndText(
g_dboxID
x_step
t_text
)
=> t / nil"
"In a progress dialog box, sets the current step of the progress bar as well as the text that is displayed above the progress bar.")
("hiSetProgressButtonText"
"hiSetProgressButtonText(
g_dboxID
t_buttonText
)
=> t / nil"
"Changes the text of the button on a progress dialog box. Progress dialog boxes, created with hiDisplayProgressBox, have one button, whose default text is Cancel.")
("hiSetProgressBannerText"
"hiSetProgressBannerText(
g_dboxID
t_banner
)
=> t / nil"
"Sets the text that is displayed on the window banner of a progress dialog box.")
("hiResetProgressBox"
"hiResetProgressBox(
g_pboxID
x_totalSteps
t_text
g_autoClose
)
=> t / nil"
"Resets a progess dialog box to the new values you specify. The progress bar is also reset to 0%.")
("hiShowProgressBar"
"hiShowProgressBar(
w_windowID
[ x_totalSteps ]
[ x_delay ]
[ t_label ]

)
=> t / nil"
"Displays a progress bar in the status bar of a window, typically in the bottom-right corner. The progress bar displays the progress of a command.")
("hiSetProgressBar"
"hiSetProgressBar(
w_windowID
x_step
)
=> t / nil"
"Sets the progress (the current step) of the progress bar in the window you specify.")
("hiSetProgressLabel"
"hiSetProgressLabel(
w_window
t_label
)
=> t / nil"
"Sets the label of the progress bar in the specified window. An empty string removes the label.")
("hiHideProgressBar"
"hiHideProgressBar(
w_windowID
)
=> t / nil"
"Removes the progress bar (and its label) from the window you specify.")
("hiGetProgressBarCurrentStep"
"hiGetProgressBarCurrentStep(
w_window
)
=> t / nil"
"Returns the current step of the progress bar from the window specified.")
("hiGetProgressBarTotalSteps"
"hiGetProgressBarTotalSteps(
w_window
)
=> t / nil"
"Returns the maximum number of total steps for the  progress bar from the window specified.")
("hiAdvanceProgressBarOneStep"
"hiAdvanceProgressBarOneStep(
w_window
)
=> t / nil"
"Increments the  progress bar by one step for the window specified.")
("hiDisplayColorDialog"
"hiDisplayColorDialog(
[ ?initialColor l_initialColor ]
[ ?alpha g_alpha ]
)
=> l_RGBandAlpha / nil"
"Displays the Select color dialog, which lets you select a color. This function returns the RGB (Red, Green, and Blue) value of the color you select as well as the alpha channel value, if the ?alpha argument was t. The Select color dialog is a modal dialog.")
("hiDisplayBlockingDBox"
"	hiDisplayBlockingDBox( )"
"Use hiDisplayAppDBox, which is the recommended dialog box interface function.")
("hiDisplayModalDBox"
"hiDisplayModalDBox(
s_dBoxHandle 
t_dBoxBannerText 
t_dBoxMsg 
g_dBoxHelp 
t_confirmAction
[ l_location ]
[ x_dboxType ]
) 
=> t / nil"
"Use hiDisplayAppDBox, which is the recommended dialog box interface function.")
("hiDisplayModelessDBox"
"hiDisplayModelessDBox(
s_dBoxHandle 
t_dBoxBannerText 
t_dBoxMsg 
g_dBoxHelp 
t_confirmAction
[ l_location ]
[ x_dboxType ] 
) 
=> t / nil"
"Use hiDisplayAppDBox, which is the recommended dialog box interface function. Additionally, set ?dialogStyle to 'modeless.")
("hiDisplayNonBlockingDBox"
"hiDisplayNonBlockingDBox( )"
"Use hiDisplayAppDBox, which is the recommended dialog box interface function.")
("hiDisplayListBox"
"hiDisplayListBox(
s_listBoxHandle 
t_listBoxTitle 
l_listItems 
t_help
) 
=> t / nil"
"Creates and displays a list box. The list box will display a list of strings. The user can select one of these strings by clicking over the item with the left mouse button. The list box remains on the screen until the user selects OK or Cancel. The list box is destroyed when it is removed from the screen ")
("hiGetListBoxFieldFit"
"hiGetListBoxFieldFit( 
x_numRows 
x_numColumns 
[ g_ignored ]
) 
=> l_widthHeight"
"Returns the width and height necessary for displaying a list box with the specified number of rows and columns and the specified font.")
("hiListBoxCancel"
"hiListBoxCancel(
o_listBox 
) 
=> t / nil"
"Performs the same action as the Cancel button on the listbox. ")
("hiListBoxDone"
"hiListBoxDone(
o_listBox 
) 
=> t / nil"
"Performs the same action as the OK button on the listbox. ")
("hiShowListBox"
"hiShowListBox(
?name s_listBoxHandle 
?choices lt_listItems 
?callback s_callback 
[?title t_listBoxTitle] 
[?multipleSelect g_multiSelect]
[?value lt_selectedItem]
[?appData g_appData]
[?applyButton g_applyButton]
) 
=> t / nil"
"Creates and displays a list box. The list box displays a list of strings. The list box can be created so that one item is selectable or multiple items are selectable. While the list box is displayed on the screen, the user may change the items in the list box, or change the item(s) selected. The list box remains on the screen until the user selects OK or Cancel. The list box is destroyed when it is removed from the screen.")
("hiLoadIconFile"
"hiLoadIconFile(
t_fileName
x_width
x_height
)
=> l_hiIcon / nil"
"Loads an icon file of any format, such as PNG, and returns the icon in a format that can be used with hi functions that accept icons. If t_fileName is a relative path, the Cadence Search File mechanism (CSF) is used to search for the file.")
("hiLoadImageFile"
"hiLoadImageFile(
t_fileName
x_width
x_height
)
=> l_hiImage / nil"
"Loads an image file of any format, such as PNG, and returns the image in a format that can be used with hi functions that accept icons. If t_fileName is a relative path, the Cadence Search File mechanism (CSF) is used to search for the file.")
("hiLoadIconData"
"hiLoadIconData(
t_fileName
[ t_formatName ]
)
=> l_hiIcon / nil"
"Loads a pixmap and returns it in a format that can be used with any hi function that accepts icons, such as hiCreateMenuItem or hiCreateButton. This function can load files that are in any of the image formats supported by Qt; currently these are:  BMP, JPG, PNG, PPM, XBM, and XPM. PNG is the recommended format.")
("hiSaveIconData"
"hiSaveIconData(
l_hiIcon
t_fileName
[ t_formatName ]
)
=> t / nil"
"Saves a loaded pixmap to a file in the format that you specify. This function accepts an hi pixmap description and converts it to any of the image formats supported by Qt; currently, these are: BMP, JPG, PNG, PPM, XBM, and XPM. However, PNG is the recommended format.")
("colorIndex"
"colorIndex( 
l_rgb 
) 
=> x_index"
"Returns the pixel value for the colormap index of the specified RGB value. This function is an alias for hiMatchColor.")
("nameToColor"
"nameToColor( 
S_colorName 
) 
=> l_RGBColor / nil"
"Specifies the color name as string or symbol.")
("hiCreateColorArray"
"hiCreateColorArray( ) 
=> a_iconColorArray"
"Example: colorArray[0] is represented by a or A; colorArray[12] is represented by m or M; colorArray[26] is represented by a period (.).")
("hiMatchColor"
"hiMatchColor( 
l_RGBcolor 
) 
=> x_colormapIndex"
"Returns a layer color index corresponding to the specified RGB color. It creates a new color index if the color specified does not have any corresponding index.")
("hiMatchColorByName"
"hiMatchColorByName(  
t_colorName 
) 
=> x_colormapIndex"
"Returns a layer color index corresponding to the specified color name.")
("hiStringToIcon"
"hiStringToIcon(  
a_colorArray 
t_iconString 
x_width 
x_height 
) 
=> l_hiIcon / nil"
"Returns an icon description that can be used in hi functions that accept icons, such as  hiCreatePulldownMenu, hiCreateMenuItem, hiCreateSliderMenuItem, hiCreateButton, hiCreateCyclicField, hiCreateLabel, and hiAddCyclicChoice.")
("hiSetDisabledIcon"
"hiSetDisabledIcon(
g_icon
g_disabledIcon
)
=> t / nil"
"Specifies a disabled icon for an icon, which will be displayed whenever the icon is disabled. This function only applies to icons used in menus, not to icons used in form fields or buttons.")
("hiAddIconOverrides"
"hiAddIconOverrides
l_list
)
=> t / nil"
"Adds names to the list of icons that will be loaded using CSF search results directly, bypassing the hierarchy files. If the CSF search fails, the files in the hierarchy are loaded.")
("hiRemoveIconOverrides"
"hiRemoveIconOverrides
l_list
)
=> t / nil"
"Removes names from the list of icons that are loaded using the CSF search results directly, bypassing the hierarchy files. If the CSF search fails, the files in the hierarchy are loaded.")
("hiGetIconOverrides"
"hiGetIconOverrides(
)
=> l_list"
"Returns the list of icon names that will be loaded by the CSF search results directly, bypassing the hierarchy files. If the CSF search fails, the files in the hierarchy are loaded.")
("hiCreateFormLayout"
"hiCreateFormLayout( 
s_name 
[ ?items l_items ] 
[ ?frame g_frame ] 
[ ?margins l_margins ] 
[ ?spacing g_spacing ] 
[ ?label_align g_labelAlign ]
[ ?horiz_align g_horizAlign ] 
[ ?vert_align g_vertAlign ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?scrollable g_scrollable]
) 
=> r_hiLayout"
"Creates a form layout by specifying the labels, margins, spacing, and alignment.")
("hiCreateGridLayout"
"hiCreateGridLayout( 
s_name 
[ ?items l_items ] 
[ ?frame g_frame ] 
[ ?margins l_margins ] 
[ ?spacing g_spacing ] 
[ ?horiz_align g_horizAlign ] 
[ ?vert_align g_vertAlign ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?scrollable g_scrollable]
) 
=> r_hiLayout"
"Creates a grid layout by specifying the margins, spacing, and alignment.")
("hiCreateHorizontalBoxLayout"
"hiCreateHorizontalBoxLayout( 
s_name 
[ ?items l_items ] 
[ ?frame g_frame ] 
[ ?margins l_margins ] 
[ ?spacing g_spacing ] 
[ ?horiz_align g_horizAlign ] 
[ ?vert_align g_vertAlign ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?scrollable g_scrollable ]
) 
=> r_hiLayout"
"Creates a horizontal box layout by specifying the margins, spacing, and alignment.")
("hiCreateVerticalBoxLayout"
"hiCreateVerticalBoxLayout( 
s_name 
[ ?items l_items ] 
[ ?frame g_frame ] 
[ ?margins l_margins ] 
[ ?spacing g_spacing ] 
[ ?horiz_align g_horizAlign ] 
[ ?vert_align g_vertAlign ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?scrollable g_scrollable ]
) 
=> r_hiLayout"
"Creates a vertical box layout by specifying the margins, spacing, and alignment.")
("hiCreateLayoutForm"
"hiCreateLayoutForm( 
s_name 
t_title 
r_layout 
[ ?callback g_callback ]
[ ?mapCB g_mapCallback ]
[ ?help g_help ]
[ ?unmapAfterCB g_unmapAfterCB ] 
[ ?buttonLayout g_buttonLayout ]
[ ?buttonDisabled l_buttonDisabled ]
[ ?formType s_formType ]
[ ?dialogStyle s_dialogStyle ]
[ ?baseName s_baseName ]
[ ?plist g_plist ]
[ ?initialSize l_initialSize ]
[ ?minSize l_minimumSize ] 
[ ?maxSize l_maximumSize ]
[ ?sizePolicy s_sizePolicy ]

) 
=> r_form / nil"
"Returns the SKILL representation of a layout form with the specified field entries and sets it to the specified name.")
("hiAddItemToLayout"
"hiAddItemToLayout( 
g_formRegionOrLayout 
g_item 
[ ?layoutControls l_layoutControls ] 
[ ?toLayout s_layoutName ] 
) 
=> t / nil"
"Adds the required controls to the layout.")
("hiAddField"
"hiAddField( 
g_formRegionOrLayout
g_field 
[ x_attachment | s_layout [ l_field_controls ] ] 
)
=> t / nil"
"Adds a field to a form. The form must already exist, and the field must have been created with one of the field creation routines.")
("hiAddFields"
"hiAddFields( 
g_formRegionOrLayout
l_items
[ g_attachmentsOrLayout ]
) 
=> t / nil"
"Adds fields to a form. The form must already exist, and the fields must have been created with one of the field creation routines.")
("hiDeleteField"
"hiDeleteField( 
g_formRegionOrLayout 
s_fieldOrLayout 
) 
=> t / nil"
"Deletes a field from a form.")
("hiDeleteFields"
"hiDeleteFields( 
g_formRegionOrLayout 
l_fieldsOrLayouts 
) 
=> t / nil"
"Deletes multiple fields from a form.")
("hiDeleteItemFromLayout"
"hiDeleteItemFromLayout( 
x_index
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> x_index / nil"
"Deletes an item from hiLayout using the specified index.")
("ddHiCreateCellComboField"
"ddHiCreateCellComboField(
?name s_fieldName 
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentValue ]
[ ?defValue t_defaultValue ] 
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
[ ?toolTip t_toolTip ] 
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> r_comboField"
"Creates a customized Cell combo field, which is an extension of a regular combo field, for selecting cells.")
("ddHiCreateLibraryComboField"
"ddHiCreateLibraryComboField(
?name s_fieldName 
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentValue ]
[ ?defValue t_defaultValue ] 
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
[ ?toolTip t_toolTip ] 
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> r_comboField"
"Creates a customized Library combo field, which is an extension of a regular combo field, for selecting libraries.")
("ddHiCreateViewComboField"
"ddHiCreateViewComboField(
?name s_fieldName 
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentValue ]
[ ?defValue t_defaultValue ] 
[ ?callback g_callback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
[ ?toolTip t_toolTip ] 
[ ?viewTypes l_viewTypes ]
[ ?validationType g_validationType ] 
[ ?highlightType g_highlightType ] 
) 
=> r_comboField"
"Creates a customized View combo field, which is an extension of a regular combo field, for selecting views.")
("ddoAccepts"
"ddoAccepts(
g_filter
g_obj
)"
"This function is a method of ddHiObjFilter that is called with a specified dd object argument to get listed in the associated combo box.")
("ddoPreferred"
"ddoPreferred(
g_filter
l_obj
)"
"This function is a method of ddHiObjFilter that returns the preferred dd view object only for the View combo box. This return value is called after a linked cell ID is changed, and the value of the View combo box is not valid. The function is called with a list of dd object IDs and is expected to return a valid dd-view-id or nil.")
("ddHiLinkFields"
"ddHiLinkFields(
o_libraryComboBox
o_cellCombobox
o_viewComboBox
)"
"Connects the given combo boxes, where the value changes in one combo box triggers re-populating of the next combo box.")
("hiAddCyclicChoice"
"hiAddCyclicChoice( 
r_form 
s_cyclicField 
g_newChoice 
) 
=> t / nil"
"Adds the new entry to the end of the list of choices in the cyclic field in the form.")
("hiChangeFormCallback"
"hiChangeFormCallback(  
r_form
g_newCallback
) 
=> t"
"Changes the doneAction and/or the cancelAction of the specified form to the SKILL callback procedure defined by newCallback. newCallback can be a symbol, a string, a function object,or a list of two symbols/strings/function objects. The first callback will be taken as the doneAction. The second callback will be taken as the cancelAction. After this routine is called, if the OK or Apply button of the form is pressed, the doneAction is executed, and if the Cancel button is pressed, the cancelAction is executed.")
("hiChangeFormTitle"
"hiChangeFormTitle( 
r_form 
t_newTitle
) 
=> t / nil"
"Changes the window manager title of the specified form to t_newTitle.")
("hiCollapseTreeItem"
"hiCollapseTreeItem(
g_item
[ g_notify ]
)
=> t / nil"
"Collapses the tree item you specify. This function also executes the collapse callback of the tree table field if you specify t as the value of the g_notify argument.")
("hiCreateAppForm"
"hiCreateAppForm( 
?name s_name 
?fields l_fieldEntries 
[ ?attachmentList l_fieldAttachments ]
[ ?tabOrderIsAddOrder g_tabOrderIsAddOrder ]
[ ?formTitle t_formTitle ] 
[ ?callback g_callback ]
[ ?unmapAfterCB g_unmapAfterCB ] 
[ ?mapCB g_mapCallback ]
[ ?formType s_formType ] 
[ ?dialogStyle s_dialogStyle ]
[ ?buttonLayout g_buttonLayout ] 
[ ?buttonDisabled s_buttonDisabled ]
[ ?help g_help ] 
[ ?initialSize g_initialSize ]
[ ?minSize g_minSize ]
[ ?maxSize g_maxSize ]
[ ?dontBlock g_dontBlock ]
[ ?fieldFocus s_fieldFocus ]
[ ?plist g_plist ]
[ ?baseName s_baseName ]
) 
=> r_form"
"Returns the SKILL representation of a form with the specified field entries, setting it to the specified name. All standard forms, from simple forms to property lists, are generated using hiCreateAppForm, with varying field entries. Use this function instead of hiCreateForm.")
("hiCreateBBoxField"
"hiCreateBBoxField( 
?name s_fieldName 
[ prompt t_fieldPrompt ] 
[ ?value l_currentValue ]
[ ?help g_fieldHelp ] 
[ ?defValue l_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?editable g_editable ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a bounding box field for a form.")
("hiCreateBooleanButton"
"hiCreateBooleanButton(
?name s_fieldName 
?buttonText t_buttonText
[ ?buttonLocation s_buttonLocation ]
[ ?callback g_callback ]
[ ?value g_booleanValue ]
[ ?defValue g_defaultValue ]
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
) 
=> r_fieldHandle"
"Creates a single Boolean button for a form. The button text appears as a prompt next to the button; the button is on the left of the button text if the ?buttonLocation argument is 'left and on the right of the button text if the ?buttonLocation argument is 'right. A Boolean field consists of a single toggle button which may have an associated callback procedure executed when the Boolean state changes.")
("hiCreateButton"
"hiCreateButton(
?name s_fieldName 
?callback g_callback 
[ ?buttonText t_buttonText ] 
[ ?buttonIcon g_buttonIcon ] 
[ ?showTextWithIcon g_showTextWithIcon ]
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
) 
=> r_fieldHandle"
"Creates a standalone push button for a form or two-dimensional menu. The button must have an associated callback procedure to be executed when the button is selected. A button-only field differs from a button box field in that there is no prompt associated with this button.")
("hiCreateButtonBoxField"
"hiCreateButtonBoxField(
?name s_fieldName 
?choices l_buttonText 
?callback l_callbackList 
?prompt t_fieldPrompt
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
) 
=> r_fieldHandle"
"Creates a button box field for a form. A button box field contains individual buttons to be displayed in one row. Each button in the button box will have an associated callback procedure that is executed when that button is selected. A prompt is displayed on this row as well.")
("hiCreateComboField"
"hiCreateComboField(
?name s_fieldName 
?items g_choices
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentValue ]
[ ?help g_fieldHelp ] 
[ ?defValue t_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ]
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?format t_fieldFormat ] 
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a drop-down combination field, which is a type-in field with an attached drop-down list. Users can either select an item from the list or type in a value.")
("hiCreateCyclicField"
"hiCreateCyclicField( 
?name s_fieldName 
?choices l_enumerations 
?prompt t_fieldPrompt 
[ ?value g_currentValue ] 
[ ?defValue g_defaultValue ] 
[ ?callback g_callback ] 
[ ?help g_fieldHelp ] 
[ ?font t_font ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?keepHistory g_keepHistory ]
) 
=> r_fieldHandle"
"Creates a cyclic field for a form. A cyclic field contains a list of string or icon enumerations, which are displayed in a drop-down list. Only one item can be selected at a time.")
("hiCreateFileSelectorField"
"hiCreateFileSelectorField(
?name s_fieldName 
?mode s_mode
[ ?prompt t_prompt ] 
[ ?value t_currentValue ]
[ ?defValue t_defaultValue ] 
[ ?callback g_callback ]
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
[ ?confirmOverwrite g_confirmOverwrite ]
) 
=> r_fieldHandle"
"Creates a type-in field similar to a string field, except that it also has a Browse button at the right of the type-in box. The Browse button, when pressed, brings up a file dialog box that lets users select a file or directory. You can use the ?mode argument to specify what the user is allowed to select. The file dialog is modal, that is, it blocks access to the application while it is open. When the user makes a selection and closes the file dialog, the selection is entered into the type-in box.")
("hiCreateDisclosureButton"
"hiCreateDisclosureButton(  
?name s_name
[ ?callback g_callback ]
[ ?value g_value ]
[ ?defValue g_defValue ]
[ ?help S_help ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?onFields l_onFields ]
[ ?offFields l_offFields ]
)
=> r_fieldHandle"
"A disclosure button is a button without a label used for displaying the additional information or functionality associated with another widget.")
("hiCreateDisclosureTriangle"
"hiCreateDisclosureTriangle(  
?name s_name
[ ?labelText t_labelText ]
[ ?callback g_callback ]
[ ?value g_value ]
[ ?defValue g_defValue ]
[ ?help S_help ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?onFields l_onFields ]
[ ?offFields l_offFields ]
)
=> r_fieldHandle"
"A disclosure triangle is a low profile widget for displaying the additional information or functionality embedded in a form.")
("hiCreateFloatField"
"hiCreateFloatField( 
?name s_fieldName 
[ ?value f_currentValue ]
[ ?acceptNil g_acceptNil ]
[ ?prompt t_fieldPrompt ] 
[ ?defValue f_defaultValue ] 
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?range l_fieldRange ] 
[ ?format t_fieldFormat ] 
[ ?editable g_editable ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a float field for a form. A float field is a field which accepts floating-point input only. A format string can be specified which will automatically be imposed on any user input. An optional range can be specified and enforced for this field as well.")
("hiCreateFrameField"
"hiCreateFrameField(
?name s_fieldName 
[ ?labelText t_labelText ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
)
=> r_fieldHandle"
"Creates a frame field for a two-dimensional form. A frame field is a border that surrounds a group of related fields so they are easier to see.")
("hiCreateScrollRegion"
"hiCreateScrollRegion(
?name s_name
[ ?fields l_fieldEntries ]
[ ?attachmentList l_fieldAttachments ]
[ ?tabOrderIsAddOrder g_tabOrderIsAddOrder ]
[ ?labelText t_labelText ] 
[ ?borderWidth x_borderWidth ] 
[ ?scrollBars g_scrollBars ]
[ ?rightMargin x_rightMargin ]
[ ?bottomMargin x_bottomMargin ]
[ ?help g_help ]
[ ?invisible g_invisible ]
[ ?enabled g_enabled ]
)
=> r_fieldHandle"
"Creates a scroll region field, which can be scrolled and can contain any type of field. A scroll region field is like a sub-form within a form.")
("hiCreateStackedLayout"
"hiCreateStackedLayout( 
s_name 
[ ?items l_items ] 
[ ?frame g_frame ] 
[ ?margins l_margins ] 
[ ?currentIndex g_currentIndex ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?scrollable g_scrollable ]
) 
=> r_hiLayout"
"Creates a stacked layout defstruct of the first field in the stack.")
("hiIsScrollRegion"
"hiIsScrollRegion(
g_item
)
=> t / nil"
"Returns t if the item is a scroll region field, nil if it is not a scroll region field.")
("hiCreateForm"
"hiCreateForm( 
s_formHandle 
t_formName 
g_formAction 
l_fieldEntries 
g_formHelp
[ g_unmapAfterCB ] 
) 
=> r_form"
"Use hiCreateAppForm instead of this function.")
("hiCreateFormButton"
"hiCreateFormButton(
?name s_fieldName 
?buttonText t_buttonText 
?callback g_callback 
[ ?buttonIcon g_buttonIcon ] 
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?showTextWithIcon g_showTextWithIcon ]
) 
=> r_fieldHandle"
"Creates a standalone push button for a form or two-dimensional menu. This function is the same as hiCreateButton.")
("hiCreateFormLabel"
"hiCreateFormLabel(
?name s_name
[ ?labelText t_labelText ]
[ ?labelIcon g_labelIcon ]
[ ?help g_fieldHelp ]
[ ?font t_font ] 
[ ?justification s_justification ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
)"
"This function is an alias for hiCreateLabel. Use hiCreateLabel instead of this function.")
("hiCreateHypertextField"
"hiCreateHypertextField(
?name s_name
[ ?title t_title ]
[ ?titleAlignment g_titleAlignment ]
[ ?value t_value ]
[ ?pos t_position ]
[ ?defValue t_defaultValue ]
[ ?help g_fieldHelp ]
[ ?callback g_callback ]
[ ?enabled g_enabled ]
[ ?shadowed g_shadowed ]
[ ?hasVerticalScrollbar g_hasVerticalScrollbar ]
[ ?hasHorizontalScrollbar g_hasHorizontalScrollbar ]
[ ?invisible g_invisible ]
)
=> r_fieldHandle"
"Creates a hypertext field, which displays rich text with hypertext navigation. You can also specify hyperlinks to execute SKILL commands. See also hiCreateSimpleHypertextField().")
("hiCreateIntField"
"hiCreateIntField( 
?name s_fieldName 
[ ?prompt t_fieldPrompt ] 
[ ?value x_currentValue ]
[ ?acceptNil g_acceptNil ]
[ ?help g_fieldHelp ] 
[ ?defValue x_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?format t_fieldFormat ] 
[ ?range l_fieldRange ] 
[ ?editable g_editable ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates an integer field entry for a form. An int field is a field that accepts integer input only. A format string can be specified which will automatically be imposed on any user input. An optional range can be specified and enforced for this field as well.")
("hiCreateLabel"
"hiCreateLabel(
?name s_fieldName 
[?labelText t_labelText] 
[?labelIcon g_labelIcon]
[?justification s_justification] 
[?font t_font] 
[?enabled g_enabled]
[?invisible g_invisible]
[?help g_fieldHelp]
) 
=> r_fieldHandle"
"Creates a standalone label entry for a form or two-dimensional menu. This label-only field contains a descriptive label and can provide additional features to a form or two-dimensional menu.")
("hiCreateLayerCyclicField"
"hiCreateLayerCyclicField(
d_techFileId 
t_fieldPrompt 
t_callback 
l_layers 
[ l_LPpair ]
[ s_fieldName ]
) 
=> r_fieldHandle"
"Creates a cyclic field entry containing icon representations of specified layers for a form.")
("hiCreateListField"
"hiCreateListField( 
?name s_fieldName 
[ ?value l_currentValue ]
[ ?help g_fieldHelp ] 
[ ?prompt t_fieldPrompt ] 
[ ?defValue l_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a list field entry for a form. A list field accepts a valid SKILL expression as input. SKILL's linereadstring determines if the expression is valid. The list expression ID is not evaluated; it is only checked to see if it is valid.")
("hiCreateListBoxField"
"hiCreateListBoxField(
?name s_fieldName
?choices l_listItems
[ ?prompt t_prompt ]
[ ?value l_selectedItem ] 
[ ?defValue l_defSelectedItem ] 
[ ?valueByPosition g_valueByPosition ]
[ ?callback g_callback ]
[ ?changeCB g_changeCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect g_multipleSelect ]
[ ?doubleClickCB g_doubleClickCB ]
[ ?CBOnReselect g_CBOnReselect ]
[ ?keepHistory g_keepHistory ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?help g_fieldHelp ]
)
=> r_fieldHandle"
"Creates a list box field for a form.")
("hiCreateMLTextField"
"hiCreateMLTextField( 
?name s_fieldName 
[ ?prompt t_prompt ] 
[ ?value t_value ] 
[ ?help g_fieldHelp ]
[ ?defValue t_defaultValue ] 
[ ?font t_font ] 
[ ?hasVerticalScrollbar g_hasVerticalScrollbar ]
[ ?hasHorizontalScrollbar g_hasHorizontalScrollbar ]
[ ?enableWordWrap g_enableWordWrap ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?callback g_callback ]
[ ?focusInCallback g_focusInCallback ]
[ ?changeCB g_changeCB ]
[ ?nextField g_nextField ] 
) 
=> r_fieldHandle"
"Creates a multiline text field entry for a form. Any input typed into this field will be converted to a single string accessible through SKILL.")
("hiCreateOptionsForm"
"hiCreateOptionsForm(
s_formHandle 
t_formName 
l_fieldEntries 
g_help 
)
=> r_form"
"Generates a form with the specified field entries, setting it to formHandle.")
("hiCreateOutputStringField"
"hiCreateOutputStringField(
?name s_fieldName
[ ?value t_currentValue ]
[ ?prompt t_fieldPrompt ]
[ ?help g_fieldHelp ]
[ ?defValue t_defaultValue ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
)
=> r_fieldHandle"
"Creates a field that displays text. You cannot type into this field.")
("hiCreatePointField"
"hiCreatePointField( 
?name s_fieldName 
[ ?value l_currentValue ]
[ ?help g_fieldHelp ] 
[ ?prompt t_fieldPrompt ] 
[ ?defValue l_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a point field entry for a form.")
("hiCreatePointListField"
"hiCreatePointListField( 
?name s_fieldName 
[ ?value l_currentValue ]
[ ?help g_fieldHelp ] 
[ ?prompt t_fieldPrompt ] 
[ ?defValue l_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ] 
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a point list field entry for a form.")
("hiCreateRadioField"
"hiCreateRadioField( 
?name s_fieldName 
?choices l_radioList 
[ ?help g_fieldHelp ] 
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentSelection ] 
[ ?defValue t_defaultSelection ] 
[ ?itemsPerRow x_itemsPerRow ] 
[ ?font t_font ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?callback l_radioListCallbacks ] 
) 
=> r_fieldHandle"
"Creates a radio field for a form.")
("hiCreateReportField"
"hiCreateReportField(
?name s_fieldName
[ ?title t_title ]
[ ?titleAlignment g_titleAlignment ]
[ ?headers g_headers ]
[ ?choices l_choices ]
[ ?value g_value ]
[ ?defValue g_defaultValue ]
[ ?returnPackedValue g_returnPackedValue ]
[ ?help g_fieldHelp ]
[ ?callback g_callback ]
[ ?enableDeselectCB S_enableDeselectCB ]
[ ?doubleClickCB g_doubleClickCB ]
[ ?sortCallback g_sortCallback ]
[ ?sort l_sort ]
[ ?selectMode s_selectMode ]
[ ?invisible g_invisible ]
[ ?enabled g_enabled ]
[ ?nextField g_nextField ]
[ ?altRowHilight g_rowHighlight ]
)
=> r_fieldHandle"
"Creates a report field, which you can use to display information in a complex format. For example, you can display a table with sortable columns. The items in a report field can be selected but they cannot be edited.")
("hiCreateScaleField"
"hiCreateScaleField(
?name s_fieldName 
[ ?prompt t_prompt ] 
[ ?value x_currentValue ]
[ ?callback g_callback ] 
[ ?isContinuous g_isContinuous ]
[ ?range l_range ]
[ ?defValue x_defaultValue ]
[ ?help g_fieldHelp ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?precision x_precision ]
) 
=> r_fieldHandle"
"Creates a scale field for a form.")
("hiCreateSeparatorField"
"hiCreateSeparatorField(
?name s_fieldName
[ ?invisible g_invisible ]
)
=> r_fieldHandle"
"Creates a separator field for a form.")
("hiCreateSimpleHypertextField"
"hiCreateSimpleHypertextField(
s_name
t_text
t_link
[ g_newWindow ]
)
=> r_fieldHandle"
"Creates a simple one-line hypertext field, which displays a hyperlink to a Web page. See hiCreateHypertextField() for information on how to create a more complex hypertext field.")
("hiCreateSpinBox"
"hiCreateSpinBox(
?name s_fieldName
[ ?prompt t_prompt ]
[ ?help g_fieldHelp ]
[ ?value g_value ]
[ ?defValue g_defaultValue ]
[ ?font t_fontName ]
[ ?callback g_callback ]
[ ?range l_rangeOfItems ]
[ ?arrowOrientation g_arrowOrientation ]
[ ?shadowed g_shadowed ]
[ ?enabled g_enabled ]
[ ?editable g_editable ]
[ ?obeyWidth g_obeyWidth ]
[ ?invisible g_invisible ]
[ ?wrapAround g_wraparound ]
)
=> r_fieldHandle"
"Creates a spin box field, which contains a range of items that users can cycle through. The spin box field can only contain integers. For floating point numbers, use hiCreateFloatSpinBox.")
("hiCreateFloatSpinBox"
"hiCreateFloatSpinBox(
?name s_fieldName
[ ?prompt t_prompt ]
[ ?help g_fieldHelp ]
[ ?value g_value ]
[ ?defValue g_defaultValue ]
[ ?font t_fontName ]
[ ?callback g_callback ]
[ ?range l_rangeOfItems ]
[ ?shadowed g_shadowed ]
[ ?enabled g_enabled ]
[ ?editable g_editable ]
[ ?precision x_precision ]
[ ?step f_step ]
[ ?obeyWidth g_obeyWidth ]
[ ?invisible g_invisible ]
[ ?wrapAround g_wraparound ]
[ ?arrowOrientation g_arrowOrientation ]
)
=> r_fieldHandle"
"Creates a float spin box field, which contains a range of items that users can cycle through. The spin box field can only contain floating point numbers. For integers, use hiCreateSpinBox.")
("hiCreateStringField"
"hiCreateStringField( 
?name s_fieldName 
[ ?prompt t_fieldPrompt ] 
[ ?value t_currentValue ]
[ ?help g_fieldHelp ] 
[ ?defValue t_defaultValue ] 
[ ?font t_font ] 
[ ?callback g_callback ]
[ ?modifyCallback g_modifyCallback ]
[ ?focusInCallback g_focusInCallback ]
[ ?format t_fieldFormat ] 
[ ?editable g_editable ]
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?nextField g_nextField ]
) 
=> r_fieldHandle"
"Creates a string field entry for a form. Any input typed into this field is surrounded by double quotation marks before being passed to SKILL to interpret.")
("hiCreateTabField"
"hiCreateTabField(
?name s_name
?fields l_fieldEntries
[ ?attachmentList l_fieldAttachments ]
[ ?tabs g_tabs ]
[ ?pageBase g_pageBase ]
[ ?value g_currentValue ]
[ ?defValue g_defaultValue ]
[ ?tabPlacement g_tabPlacement ]
[ ?tabOrderIsAddOrder g_tabOrderIsAddOrder ]
[ ?callback g_callback ]
[ ?pageScroller g_pageScroller ]
[ ?notebookStyle g_notebookStyle ]
[ ?help g_fieldHelp ]
[ ?invisible g_invisible ]
)
=> r_fieldHandle"
"Creates a tab field, which can have multiple pages. You can change the pages interactively by selecting the tab attached to each page, or programmatically by using the form->field->value property.")
("hiCreateTree"
"hiCreateTree(
s_treeName
)
=> r_tree / nil"
"Creates a new tree or sub-tree, to which you then add items you create with the hiCreateTreeItem function. You add the tree to a tree table field created with the hiCreateTreeTable function.")
("hiCreateTreeItem"
"hiCreateTreeItem(
s_itemName
[ g_description ]
[ g_itemIcon ]
[ g_selectionIcon ]
[ g_expandedIcon ]
[ g_expandedSelectionIcon ]
)
=> r_treeItem / nil"
"Creates a new item for a tree. Use hiTreeAppendItem or hiTreePrependItem to attach the item to a tree.")
("hiCreateTreeTable"
"hiCreateTreeTable(
?name s_name
[ ?title t_title ]
[ ?choice g_choice ]
[ ?value g_value ]
[ ?defValue g_defaultValue ]
[ ?help g_fieldHelp ]
[ ?headers g_headers ]
[ ?sort l_sort ]
[ ?callback g_callback ]
[ ?enableDeselectCB g_enableDeselectCB ]
[ ?expandCallback g_expandCallback ]
[ ?collapseCallback g_collapseCallback ]
[ ?sortCallback g_sortCallback ]
[ ?nextField g_nextField ]
[ ?titleAlignment g_titleAlignment ]
[ ?selectMode s_selectMode ]
[ ?invisible g_invisible ]
[ ?enabled g_enabled ]
[ ?altRowHilight g_rowHighlight ]
[ ?expandCollapseOnDoubleClick g_expandCollapseOnDoubleClick ]
)
=> r_fieldHandle"
"Creates a tree table field. If you have already created a tree, you can specify it when you create the field; otherwise you can add a tree later to the field. To create a tree, use hiCreateTree and other tree table field functions.")
("hiCreateToggleField"
"hiCreateToggleField( 
?name s_fieldName 
?choices l_toggleList 
[ ?help g_fieldHelp ] 
[ ?numSelect x_numSelectable ] 
[ ?prompt t_fieldPrompt ] 
[ ?value l_currentValues ] 
[ ?defValue l_defaultValues ]
[ ?itemsPerRow x_itemsPerRow ] 
[ ?font t_font ] 
[ ?enabled g_enabled ]
[ ?invisible g_invisible ]
[ ?callback l_toggleListCallbacks ] 
) 
=> r_fieldHandle"
"Creates a toggle field entry for a form.")
("hiDeleteForm"
"hiDeleteForm( 
r_form 
) 
=> t / nil"
"Deletes the form specified and any fields the form contains.")
("hiDisplayForm"
"hiDisplayForm( 
g_form 
[ l_location ] 
) 
=> t / nil"
"Displays a form. Do not use hiDisplayForm for displaying options forms. You can also use this function to bring a form to the top of the screen if the form is covered by other windows.")
("hiEditPropList"
"hiEditPropList(
g_object 
[ t_title ]
[ g_modifiable ] 
) 
=> t / nil"
"Invokes the property list editor for the given g_object.")
("hiEscapeStringChars"
"hiEscapeStringChars(
S_stringOrSymbol
)
=> s_stringResult"
"Escapes certain characters (backslash and double quote characters) in a string by preceding them with a backslash so that they do not cause errors when the string is evaluated in SKILL. You can use this function to prepare strings that will be evaluated in callbacks.")
("hiEscapeHTMLTags"
"hiEscapeHTMLTags(
t_string
)
=> t_escString"
"Returns a string in which HTML tags such as greater-than and less-than are replaced with (or converted to) character directives such as ampersand-g-t-semicolon and ampersand-l-t-semicolon.This is done to preserve the display of the HTML tags in places such as field prompts.")
("hiExpandTreeItem"
"hiExpandTreeItem(
g_item
[ g_notify ]
)
=> t / nil"
"Expands the tree item you specify. This function also executes the expand callback of the tree table field if you specify t as the value of the g_notify argument.")
("hiFormApply"
"hiFormApply( 
r_form 
) 
=> t"
"Equivalent to clicking the Apply button on a form.")
("hiFormCancel"
"hiFormCancel ( 
r_form 
) 
=> t"
"Equivalent to clicking the Cancel button on a form.")
("hiFormClose"
"hiFormClose(
r_form
)
=> t"
"Equivalent to clicking the Close button on a form. This function is an alias for hiFormDone. The Close button is identical to the OK button, except that it triggers hiFormClose instead of hiFormDone.")
("hiFormDefaults"
"hiFormDefaults( 
r_form 
) 
= t / nil"
"Equivalent to clicking the Defaults button on a form. The value of each field on the form is compared to its default value and, if it is different, it is set to the default value and the value-change callback is invoked.")
("hiFormDone"
"hiFormDone( 
r_form 
) 
=> t"
"Equivalent to clicking the OK button on a form. This function is identical to the hiFormFinish function.")
("hiFormFinish"
"hiFormFinish(
r_form
)
=> t"
"Equivalent to clicking the OK button on a form. This function is identical to the  hiFormDone function.")
("hiFormList"
"hiFormList( 
) 
=> l_formSymbols"
"Returns a list of all form symbols currently defined in SKILL space.")
("hiFormUnmap"
"hiFormUnmap( 
r_form 
) 
=> t / nil"
"Unmaps the form from the screen before a callback is completed.")
("hiGetButtonAreaHeight"
"hiGetButtonAreaHeight(
r_form
)
=> x_height / nil"
"Returns the button area height of an instantiated form.")
("hiGetChoiceStrings"
"hiGetChoiceStrings(
o_field
)
=> l_string"
"Returns strings of all choices in a list box, radio button, or cyclic field.")
("hiGetCurrentField"
"hiGetCurrentField(
r_form
)
=> s_fieldName / nil"
"Returns the symbol name of the field that currently has input focus.")
("hiGetCurrentForm"
"hiGetCurrentForm( ) 
=> r_form"
"Returns the last active form, that is, the form that the cursor was last in.")
("hiGetCyclicValueString"
"hiGetCyclicValueString( 
o_cyclic
) 
=> t_value / nil"
"Returns the current value of a cyclic field as a string. This function returns nil if the specified value is an icon list without the fourth member (optional).")
("hiGetFieldAttachments"
"hiGetFieldAttachments(
g_formOrRegion 
s_field 
) 
=> x_attachments | nil"
"Returns the integer representing the combination of attachment bit values when the field is in an attachment form.")
("hiGetFieldInfo"
"hiGetFieldInfo( 
r_2DFormOr2DMenu 
s_field 
) 
=> l_dimensions / nil"
"Returns the dimensions of any form field or 2D menu item that is in an instantiated form. Do not use the return value of hiGetFieldInfo to restore a field to its original location. Instead, use the values you specified originally.")
("hiGetFieldMinSize"
"hiGetFieldMinSize( 
g_formRegionOrLayout 
s_fieldName 
) 
=> l_widthHeightPrompt / nil"
"Returns the minimum size for the field widget and prompt.")
("hiGetRadioValueString"
"hiGetRadioValueString( 
o_radio 
) 
=> t_value"
"Returns the current value of a radio field as a string.")
("hiLayoutUTp"
"hiLayoutUTp( 
g_layout 
) 
=> t / nil"
"Verifies that an argument is an instantiated hiLayout object.")
("hiGetFieldOverlaps"
"hiGetFieldOverlaps(
r_formHandle
)
=> t / nil"
"Generates warnings if the form specified contains any fields whose bounding boxes overlap with other fields, or any fields in which the bounding box for the prompt portion of the field overlaps with the main portion of the field. The function generates an initial warning that overlaps were found, then additional warnings for each overlap. Returns nil if the form is uninstantiated; t otherwise.")
("hiGetFieldScope"
"hiGetFieldScope(
g_field
)
=> g_returnField"
"Returns the scope containing the given field. The return value can be a scroll region, a tab page, a tab field, form, or nil.")
("hiGetFormLocation"
"hiGetFormLocation(
r_form
)
=> l_location / nil"
"Returns the x and y coordinates of the upper-left corner of the form you specify. If the form is not currently displayed, but has been displayed at least once, this function returns the last location at which it was displayed. If the form has never been displayed, this function returns nil.")
("hiGetFormSize"
"hiGetFormSize(
r_form
)
=> l_width_height / 0:0"
"Returns the width and height of the given form.")
("hiGetInsertionPosition"
"hiGetInsertionPosition(
g_form
s_field
)
=> x_position / nil"
"Gets the current position of the insertion cursor in a type-in field. You can use the hiSetInsertionPosition function to change the position of the cursor.")
("hiGetItemOfLayout"
"hiGetItemOfLayout( 
x_index
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> x_index / nil"
"Returns the description of all the items in the specified hiLayout as per the index order.")
("hiGetLayerCyclicValue"
"hiGetLayerCyclicValue( 
d_techFileId
r_form 
) 
=> d_layerId / nil"
"Returns the layer object associated with the current value of the layer cyclic field.")
("hiGetLayoutChildLayouts"
"hiGetLayoutChildLayouts( 
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> l_layouts / nil"
"Returns the list of symbolic names of child-hiLayout items in the hiLayout.")
("hiGetLayoutFields"
"hiGetLayoutFields( 
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> x_fields / nil"
"Returns the list of symbolic names of field items in hiLayout.")
("hiGetLayoutItems"
"hiGetLayoutItems( 
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> x_index / nil"
"Returns the description of all the items in the specified hiLayout in the index sequence.")
("hiGetListBoxValue"
"hiGetListBoxValue(
o_listBox
)
=> l_stringValues"
"Provides the value of a list box field as a list of strings. This function is useful when the valueByPosition property of a list box field is set to non-nil, which means its value is managed and reported as a list of integers (indicating position) instead of a list of strings.")
("hiGetLayoutFrame"
"hiGetLayoutFrame(
g_formRegionOrLayout 
[ s_layoutName ]
)
=> t_title / t / nil"
"Returns the frame title of a hiLayout form, a scroll region, or a tab page in the hiLayout form.")
("hiGetLayoutItemIndex"
"hiGetLayoutItemIndex(
g_formOrRegion 
s_layoutOrField 
)
=> l_layoutIndex / nil"
"Returns a list containing the symbol name of the layout, which contains s_layoutOrField, and the index of that item within the layout.")
("hiGetLayoutType"
"hiGetLayoutType( 
g_formRegionOrLayout 
[ s_layoutName ] 
) 
=> s_type / nil"
"Returns the type of hiLayout. The layout types that can be returned are 'hbox, 'vbox, 'grid, 'form, or 'stacked.")
("hiGetStackedLayoutCurrentIndex"
"hiGetStackedLayoutCurrentIndex( 
g_formRegionOrLayout 
[ s_layoutName ] 
) 
=> x_index / nil"
"Returns the index of the current top item.")
("hiSetFieldMinSize"
"hiSetFieldMinSize( 
g_formRegionOrLayout 
s_fieldName 
[ ?widgetWidth x_widgetWidth ] 
[ ?widgetHeight x_widgetHeight ] 
[ ?promptWidth x_promptWidth ] 
) 
=> t / nil"
"Sets the minimum width and height for the widget portion of a field.")
("hiSetKeyboardFocusField"
"hiSetKeyboardFocusField( 
g_formOrRegion 
s_field 
[ g_limitSearch [ g_onlyCurrentTabPage ]]
) 
=> t / nil"
"Sets the keyboard focus to field, s_field, if it is found in the form or region, g_formOrRegion and is allowed to have keyboard focus. It also enables you to do a hierarchical search if g_limitSearch is not specified or is set to nil. The search is limited to only the top-level of the form or scroll region field if, g_limitSearch is specified as a non-nil value.")
("hiSetLayoutFrameTitle"
"hiSetLayoutFrameTitle(
g_title 
g_formRegionOrLayout 
[ s_layoutName ]
)
=> t_title / t / nil"
"Sets the frame title of a hiLayout form, a scroll region, or a tab page in the hiLayout form.")
("hiSetLayoutMargins"
"hiSetLayoutMargins( 
l_margins 
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> t / nil"
"Set the top, bottom, left, and right margins of the layout.")
("hiGetGridLayoutItemLocation"
"hiGetGridLayoutItemLocation( 
g_formOrRegion 
s_layoutOrField 
) 
=> l_gridLayoutLocation | nil"
"Searches for a list containing the symbol name of the layout that contains s_layoutOrField, and the row, column, row span, and column span of that item within the layout.")
("hiGetKeyboardFocusField"
"hiGetKeyboardFocusField(
g_formOrRegion 
)
=> s_field / nil"
"Returns the field that currently has keyboard focus or is nil.")
("hiGetLayoutMargins"
"hiGetLayoutMargins( 
g_formRegionOrLayout 
[ s_layoutName ]
) 
=> l_margin / nil"
"Returns the top, bottom, left, and right margins of the layout.")
("hiGetNumVisibleItems"
"hiGetNumVisibleItems( 
o_listbox 
) 
=> x_count / nil"
"Returns the number of visible items for a list box field.")
("hiGetScrollBarInfo"
"hiGetScrollBarInfo(
g_formOrScrollRegion
)
=> l_scrollbarInfo"
"Provides information about the horizontal and vertical scroll bars on a form or scroll region field. You can use this information to set the position of scroll bars with the hiSetScrollBarValue function.")
("hiGetTextFieldFit"
"hiGetTextFieldFit( 
x_rows
x_columns
g_ignored
g_hasVerticalScrollbar
g_hasHorizontalScrollbar
) 
=> l_dimensions"
"Returns the size necessary for a multiline text field to display x_rows and x_columns of characters.")
("hiGetTopListItem"
"hiGetTopListItem( 
o_listbox
) 
=> x_position / nil"
"Returns the top item position of a listbox field.")
("hiGetTree"
"hiGetTree(
g_item
)
=> s_treeName / nil"
"Gets the tree that is inserted under the item you specify.")
("hiGetTreeItems"
"hiGetTreeItems(
g_tree
)
=> l_listofItems / nil"
"Gets a list of all the items in a tree.")
("hiGetTreeItemDescription"
"hiGetTreeItemDescription(
g_item
)
=> l_description / nil"
"Returns the description of an item. The description is set initially with the g_description argument of hiCreateTreeItem. You can reset the description with hiSetTreeItemDescription.")
("hiGetTreeItemIcons"
"hiGetTreeItemIcons(
r_treeItem
)
=> l_icons"
"Gets the following icons associated with a tree item: default icon, expanded icon (displayed when the item is expanded), selection icon (displayed when the item is selected), and expanded selection icon (displayed when the item is both expanded and selected).")
("hiGetTreeItemParent"
"hiGetTreeItemParent(
g_item
)
=> l_treeNames / nil"
"Gets the parent tree of an item, that is, the tree to which the item belongs. If the item is used in multiple places, this function returns all the parent trees.")
("hiGetTreeParent"
"hiGetTreeParent(
g_tree
)
=> l_itemNames / nil"
"Gets the parent of a tree, that is, the item under which the tree is inserted. If the tree is inserted in multiple places, this function returns all the items under which it is inserted.")
("hiHighlightField"
"hiHighlightField( 
g_form 
s_field 
g_highlightType 
) 
=> t / nil"
"Highlights a type-in field depending on the value of g_highlightType.")
("hiHypertextReadin"
"hiHypertextReadin(
g_hypertextField
t_textFile
)
=> t / nil"
"Reads in a text file, which can include hyperlinks, into a hypertext field. This function resets the value of the hypertext field.")
("hiHypertextReplace"
"hiHypertextReplace(
g_hypertextField
t_newText
)
=> t / nil"
"Replaces the text in a hypertext field with the new text that you provide. The text can contain hyperlinks. This function replaces the value of the hypertext field with the new text.")
("hiHypertextScroll"
"hiHypertextScroll(
g_hypertextField
t_linkName
)
=> t / nil"
"Scrolls a hypertext field to display the text containing the link you specify. This function updates the ?pos argument of hiCreateHypertextField().")
("hiIgnoreProp"
"hiIgnoreProp(
s_objType 
t_propName 
) 
=> t / nil"
"Does not display the specified property of a given object type in the Property List Editor form.")
("hiInFormApply"
"hiInFormApply(
r_form
)
=> t / nil"
"Checks whether the Apply button on a mapped form is selected.")
("hiInsertItemToLayout"
"hiInsertItemToLayout( 
g_formRegionOrLayout 
g_item 
[ ?layoutControls l_layoutControls ] 
[ ?index x_index ] 
[ ?toLayout s_layoutName ]
) 
=> t / nil"
"Inserts the required controls to the layout.")
("hiInstantiateForm"
"hiInstantiateForm( 
r_form 
) 
=> t / nil"
"Instantiates the C structure of a form from SKILL.")
("hiIsForm"
"hiIsForm( 
g_FormOrMenu 
) 
=> t / nil"
"Checks whether a form or menu is a valid one.")
("hiIsFormDisplayed"
"hiIsFormDisplayed( 
r_form 
) 
=> t / nil"
"Checks whether a form is displayed.")
("hiIsInstantiated"
"hiIsInstantiated( 
g_formRegionOrMenu 
) 
=> t / nil"
"Returns t if a form has been displayed at least once or a menu has been placed in a window. Returns nil if the form has been deleted or if g_formRegionOrMenu is not valid.")
("hiIsInFieldCancel"
"hiIsInFieldCancel(
)
=> r_formHandle / nil"
"Query this function during a field callback to determine if the form is currently being canceled (the callback may be initiated by the cancel operation). If the form is being canceled, the form handle is returned; otherwise nil is returned.")
("hiItemInsertTree"
"hiItemInsertTree(
g_item
g_tree
)
=> t / nil"
"Creates a sub-tree under an item. You need to specify the item and the sub-tree as the arguments for this function.")
("hiLayerMatchCyclicStr"
"hiLayerMatchCyclicStr( 
l_choices
t_layer 
) 
=> l_layerValue"
"Returns the layer cyclic value associated with the specified t_layer.")
("hiLaunchBrowser"
"hiLaunchBrowser(
t_url
[ g_browserHint ]
)
=> t / nil"
"Starts a Web browser, if needed, and opens the URL you specify.")
("hiLayerStringToLPP"
"hiLayerStringToLPP( 
d_techFileId
t_layer 
) 
=> d_layerId / nil"
"Returns the layer object in the specified d_techFileID associated with the specified t_layer.")
("hiMoveField"
"hiMoveField( 
r_2DFormOr2DMenu 
s_field 
l_location 
) 
=> t / nil"
"Moves the specified field to a new location. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments.")
("hiMoveToFormField"
"hiMoveToFormField( 
g_formOrRegion
s_field
) 
=> moved / focused / nil"
"If the specified field is a text field and can accept input focus, it is set as the current field and the input focus is set to it.")
("hiMoveInsBarToEnd"
"hiMoveInsBarToEnd(
r_form
s_field
)
=> t / nil"
"Places the cursor (insertion point) at the end of a text field, scrolling the field so the cursor is visible.")
("hiOffsetField"
"hiOffsetField( 
r_2DFormOr2DMenu 
s_field 
l_offsets 
) 
=> t / nil"
"Offsets one field from its current position. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments.")
("hiOffsetFields"
"hiOffsetFields( 
r_2DFormOr2DMenu 
l_fields
l_offsets 
) 
=> t / nil"
"Offsets several fields from their current positions. All fields are offset by the same distance (l_offsets); they move as a block. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments.")
("hiResizeField"
"hiResizeField( 
r_2DForm 
s_field 
l_resizeDescription 
) 
=> t / nil"
"Changes the width, height, or promptBox width of a specified field. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments.")
("hiReattachField"
"hiReattachField(
g_formOrScrollRegion
s_field
l_positionalInfo
i_fieldAttachment
)"
"Reattaches a field in a two-dimensional form or scroll region that has field attachments. This function places the field according to the new position and attachment information. This function can be used only with forms or scroll regions that already have field attachments. For forms or scroll regions that do not have field attachments, use the hiMoveField, hiResizeField, hiOffsetField, and hiOffsetFields functions.")
("hiReportSelectItem"
"hiReportSelectItem(
g_reportField
g_itemIndex
[ g_notify ]
)
=> t / nil"
"Selects an item in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportSelectItems"
"hiReportSelectItems(
g_reportField
l_itemIndexList
[ g_notify ]
)
=> t / nil"
"Selects items in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportSelectAllItems"
"hiReportSelectAllItems(
g_reportField
[ g_notify ]
)
=> t / nil"
"Selects all items in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportDeselectItem"
"hiReportDeselectItem(
g_reportField
g_itemIndex
[ g_notify ]
)
=> t / nil"
"Deselects an item in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportDeselectItems"
"hiReportDeselectItems(
g_reportField
l_itemIndexList
[ g_notify ]
)
=> t / nil"
"Deselects items in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportDeselectAllItems"
"hiReportDeselectAllItems(
g_reportField
[ g_notify ]
)
=> t / nil"
"Deselects all selected items in a report field. This function also executes the callback of the report field if you specify t as the value of the g_notify argument.")
("hiReportGetSelectedItems"
"hiReportGetSelectedItems(
g_reportField
)
=> l_selectedItemsIndex / nil"
"Gets a list of all the items that are currently selected in a report field.")
("hiSetButtonIcon"
"hiSetButtonIcon(
g_button
g_icon
)
=> t / nil"
"Changes a button's icon after the button is created. This function updates all instances of the button.")
("hiSetButtonLabel"
"hiSetButtonLabel(
g_Button
g_Label
)
=> t / nil"
"Changes a button's label text or icon after the button is created. This function updates all instances of the button.")
("hiSetCallbackStatus"
"hiSetCallbackStatus( 
r_form 
g_booleanStatus 
) 
=> t / nil"
"Overrides the removal (unmapping) of a form when the form's OK button is pressed.")
("hiSetCurrentField"
"hiSetCurrentField(
g_form 
s_fieldName
[ g_limitSearch ]
)
=> t / nil"
"Makes the specified type-in field the current field (sets input focus to the field). If the field is not visible, hiSetCurrentField scrolls the form or scroll region field so the field becomes visible.")
("hiSetCurrentForm"
"hiSetCurrentForm(
g_form
[ g_setIfNotDisplayed [ g_setIfNotInstantiated ] ]
)
=> t / nil"
"Makes the form you specify the current form. If the form is displayed, moves the focus to the form.")
("hiSetFieldEditable"
"hiSetFieldEditable( 
r_field 
g_editable 
) 
=> t / nil"
"Sets the specified field editable or noneditable, in all forms where it appears.")
("hiSetFieldEnabled"
"hiSetFieldEnabled(
g_field
g_enabled
)
=> t / nil"
"Enables or disables a form field. A disabled field is greyed-out. This function updates all instances of the field. You can use hiSetFieldEnabled with all types of fields except separator fields.")
("hiSetFormButtonEnabled"
"hiSetFormButtonEnabled(
r_form
s_buttonSym
g_enabled
)
=> t / nil"
"Enables or disables a button on a form. To enable or disable fields on a form, use the hiSetFieldEnabled function.")
("hiSetFormBlock"
"hiSetFormBlock(
r_form
[ g_blockUpdates ]
[ g_unmanage ]
)
=> t / nil"
"Prevents time-consuming multiple updates to a form during multiple changes (such as adding, deleting, moving, or resizing elements). You can also blank out the form during extensive changes. Updates are blocked until you call hiSetFormBlock( r_form nil) or hiUpdateFormBlock( r_form).")
("hiSetFormHighlights"
"hiSetFormHighlights( 
g_form 
g_highlightType
) 
=> t / nil"
"Highlights all type-in fields for form, depending on the value of highlightType.")
("hiSetFormMinMaxSize"
"hiSetFormMinMaxSize(
r_form
g_minSize
g_maxSize
)
=> t / nil"
"Sets the minimum or maximum size of the form. The size excludes the window manager's title and border.")
("hiSetFormName"
"hiSetFormName( 
r_form 
t_newTitle 
) 
=> t"
"Changes the form's title (which is displayed in the window frame banner). The function can be called by its alias hiChangeFormTitle.")
("hiSetFormPosition"
"hiSetFormPosition(
l_location
) 
=> t / nil"
"Sets the default initial location for forms displayed without an explicit location argument.")
("hiSetFormSize"
"hiSetFormSize(
r_form
l_size
[ g_reattachFields ]
)
=> t / nil"
"Resizes a form programmatically. If the optional argument g_reattachFields is non-nil, field attachments will be recalculated based on the new form size and original field sizes.")
("hiSetFormToDefaults"
"hiSetFormToDefaults( 
r_form 
) 
=> t / nil"
"Sets each field in the form to its default value, except the disclosure field value.")
("hiSetInsertionPosition"
"hiSetInsertionPosition(
g_form
s_field
x_newPosition
)
=> t / nil"
"Resets the position of the insertion cursor in a type-in field. You can use the hiGetInsertionPosition function to get the current position of the cursor.")
("hiSetLayerCyclicValue"
"hiSetLayerCyclicValue( 
d_techFileId
l_lpp
r_form 
) 
=> t / nil"
"Sets the current value of the layer cyclic field.")
("hiSetStackedLayoutCurrentIndex"
"hiSetStackedLayoutCurrentIndex( 
x_index 
g_formRegionOrLayout 
[ s_layoutName ] 
) 
=> x_index / nil"
"Sets the index of the current top item of a valid stacked hiLayout.")
("hiSetScrollBarValue"
"hiSetScrollBarValue(
g_formOrScrollRegion
l_newValues
)
=> l_values"
"Sets the horizontal and vertical scroll bars in a form or scroll region field to the position you specify, therefore allowing you to display a specific part of the form or scroll region field programmatically. Use hiGetScrollBarInfo to get information about the form or scroll region field's scroll bars before you use this function.")
("hiSetTopListItem"
"hiSetTopListItem( 
r_listBoxField
x_itemPosition
) 
=> t / nil"
"Sets the first visible item in a list box field to the specified position (x_itemPosition). A position value of 1 indicates the first item, a position value of 2 indicates the second item, and so on. A value of 0 (zero) specifies the last item in the list.")
("hiSetTreeItemDescription"
"hiSetTreeItemDescription(
g_item
g_description
)
=> t / nil"
"Changes the item description. The description is initially set with the g_description argument of  hiCreateTreeItem. To get the current description, use hiGetTreeItemDescription.")
("hiSetTreeItemIcons"
"hiSetTreeItemIcons(
r_treeItem
l_icons
)
=> t / nil"
"Sets the following icons for a tree item: default icon, expanded icon (displayed when the item is expanded), selection icon (displayed when the item is selected), and expanded selection icon (displayed when the item is both expanded and selected).")
("hiSetListItemVisible"
"hiSetListItemVisible(
o_listBoxField
x_position
)
=> t / nil"
"Brings the specified list box item into view in the list box. Takes a list box field of a form as the first argument and the numeric position of the item you want to bring into view as the second argument. If the numeric position specified is 0 or less than 0, the last item in the list is scrolled into view.")
("hiSetListItemCenter"
"hiSetListItemCenter(
o_listBoxField
x_position
)
=> t / nil"
"Brings the specified list box item into view in the center of the list box, if possible.  Takes a list box field of a form as the first argument and the numeric position of the item you want to bring into view as the second argument.")
("hiShowFieldBorders"
"hiShowFieldBorders( 
g_onOrOff 
) 
=> t / nil"
"Displays or hides borders around form fields. Used as a debugging aid to avoid overlapping fields when laying out forms.")
("hiStoreFormLocation"
"hiStoreFormLocation( 
s_formName 
l_location 
)
=> t"
"Stores a form's location coordinates so that the form can be restored later to the same position.")
("hiSwapTreeItemSelectionIcons"
"hiSwapTreeItemSelectionIcons(
r_treeItem
)
=> t / nil"
"Swaps the item icon and expanded icon with the selection icon and expanded selection icon respectively for the specified tree item. For information about setting these icons, see hiSetTreeItemIcons.")
("hiTreeAppendItem"
"hiTreeAppendItem(
g_tree
g_item
)
=> t / nil"
"Adds an item at the end of a tree. To add an item to the beginning of the tree, use hiTreePrependItem.")
("hiTreeAppendItems"
"hiTreeAppendItems(
r_tree
l_items
)
=> t / nil"
"Adds items at the end of a tree. To add items to the beginning of the tree, use hiTreePrependItems.")
("hiTreePrependItem"
"hiTreePrependItem(
g_tree
g_item
)
=> t / nil"
"Adds an item to the beginning of a tree. To add an item at the end of the tree, use hiTreeAppendItem.")
("hiTreePrependItems"
"hiTreePrependItems(
r_tree
l_items
)
=> t / nil"
"Adds items to the beginning of a tree. To add items at the end of the tree, use hiTreeAppendItems.")
("hiTreeRemoveItem"
"hiTreeRemoveItem(
g_tree
g_item
)
=> t / nil"
"Removes an item from a tree. To remove more than one item, use hiTreeRemoveItems; to remove all the items, use hiTreeRemoveAllItems.")
("hiTreeRemoveItems"
"hiTreeRemoveItems(
g_tree
g_itemList
)
=> t / nil"
"Removes the specified items from a tree. To remove a single item, use hiTreeRemoveItem; to remove all items, use hiTreeRemoveAllItems.")
("hiTreeRemoveAllItems"
"hiTreeRemoveAllItems(
g_tree
)
=> t / nil"
"Removes all the items from a tree. To remove a single item, use hiTreeRemoveItem; to remove more than one item, use hiTreeRemoveItems.")
("hiTreeTableDeselectItem"
"hiTreeTableDeselectItem(
g_treeField
g_item
[ g_notify ]
)
=> t / nil"
"Deselects an item in a tree table field. To deselect more than one item, use hiTreeTableDeselectItems; to deselect all selected items in a field, use hiTreeTableDeselectAllItems.")
("hiTreeTableDeselectAllItems"
"hiTreeTableDeselectAllItems(
g_treeField
[ g_notify ]
)
=> t / nil"
"Deselects all selected items in a tree table field. To deselect a single item, use hiTreeTableDeselectItem; to deselect more than one item, use hiTreeTableDeselectItems.")
("hiTreeTableDeselectItems"
"hiTreeTableDeselectItems(
g_treeField
l_items
[ g_notify ]
)
=> t / nil"
"Deselects items in a tree table field. To deselect a single item, use hiTreeTableDeselectItem; to deselect all items in a field, use hiTreeTableDeselectAllItems.")
("hiTreeTableGetExpandedItems"
"hiTreeTableGetExpandedItems(
g_treeField
)
=> l_expandedItems / nil"
"Gets a list of all the items that are currently expanded in a tree table field.")
("hiTreeTableGetExpandedItemCount"
"hiTreeTableGetExpandedItemCount(
g_treeField
)
=> x_expandedItemCount / nil"
"Returns the number of items that are currently expanded in a tree table field.")
("hiTreeTableGetItems"
"hiTreeTableGetItems(
g_treeField
)
=> l_listOfItems / nil"
"Gets a list of all the items in a tree table field.")
("hiTreeTableGetItemCount"
"hiTreeTableGetItemCount(
g_treeField
)
=> x_itemCount / nil"
"Returns the number of items in a tree table field.")
("hiTreeTableGetSelectedItems"
"hiTreeTableGetSelectedItems(
g_treeField
)
=> l_selectedItems / nil"
"Gets a list of all the items that are currently selected in a tree table field.")
("hiTreeTableGetSelectedItemCount"
"hiTreeTableGetSelectedItemCount(
g_treeField
)
=> x_selectedItemCount / nil"
"Returns the number of items that are currently selected in a tree table field.")
("hiTreeTableSelectItem"
"hiTreeTableSelectItem(
g_treeField
g_item
[ g_notify ]
)
=> t / nil"
"Selects an item in a tree table field. This function also executes the callback of the tree table field if you specify t as the value of the g_notify argument.")
("hiTreeTableSelectAllItems"
"hiTreeTableSelectAllItems(
g_treeField
[ g_notify ]
)
=> t / nil"
"Selects all items in a tree table field. This function also executes the callback of the tree table field if you specify t as the value of the g_notify argument.")
("hiTreeTableSelectItems"
"hiTreeTableSelectItems(
g_treeField
l_items
[ g_notify ]
)
=> t / nil"
"Selects items in a tree table field. This function also executes the callback of the tree table field if you specify t as the value of the g_notify argument.")
("hiItemRemoveTree"
"hiItemRemoveTree(
g_item
)
=> t / nil"
"Removes the sub-tree from an item in the tree. The item remains in the tree as a leaf; only the sub-tree under it is removed. The expansion icon next to the item is removed.")
("hiUpdateFormBlock"
"hiUpdateFormBlock(
r_form
)
=> t / nil"
"Used to reset a form if you have blocked multiple updates with the hiSetFormBlock function. Calling hiUpdateFormBlock( r_form) is equivalent to calling hiSetFormBlock( r_form nil).")
("hiGetDbuPoint"
"hiGetDbuPoint( 
w_windowId 
) 
=> l_point / nil"
"Returns the current location of the pointer, or nil if the pointer is not within the drawable area of the window or the window is hidden behind other tabs in a session window.")
("hiGetDrawThruDelta"
"hiGetDrawThruDelta( 
[ g_detail ]
) 
=> x_defaultDelta / ( x_defaultDelta ( x_highButton1Delta x_highButton2Delta x_highButton3Delta ) )"
"When no argument is presented, or if the g_detail argument is nil, will return the default draw-thru delta.")
("hiSetDrawThruDelta"
"hiSetDrawThruDelta(
x_defaultDelta
[ x_highDelta [ x_mouseButton ] ]
) 
=> t"
"Sets the default draw-thru delta and, optionally, the high draw-thru delta for mouse buttons 1, 2 or 3.")
("hiGetScreenPoint"
"hiGetScreenPoint( 
w_windowId 
) 
=> l_point / nil"
"Returns the current location of the pointer relative to the upper-left corner of the drawable area of a window. This function does not apply to session windows or dockable windows.")
("hiOpenWindow"
"hiOpenWindow(
[ ?bBox l_boxSpec ] 
[ ?type t_widgetType ] 
[ ?appType t_applicationType ] 
[ ?menus l_menus ] 
[ ?labels l_labels ] 
[ ?help t_helpString ] 
[ ?scroll g_scrollbars ]
[ ?form g_form ]
[ ?closeProc s_closeProc ]
[ ?iconPosition l_iconPosition ]
[ ?session g_sessionWindow ]
[ ?tabTitle g_tabTitle ]
[ ?tabIcon g_tabIcon ]
[ ?tabTip g_tabTip ]
) 
=> w_windowId / nil"
"Creates and displays a window. This function displays the new window in a session window if the session window argument is specified or if the new window is a graphics window.")
("hiCreateWindow"
"hiCreateWindow(
g_boxSpec 
t_widgetType 
t_appType 
[ t_help ]
[ g_scrollbars ]
[ g_form ] 
[ l_iconPosition ]
) 
=> w_windowId / nil"
"Creates, but does not display, a window of one of the following types: session, graphics, text, hypertext, html, encap, or form. This window becomes the current window.")
("hiCreateDockWindow"
"hiCreateDockWindow(
?appType t_appType
?widgetType t_widgetType
[ ?handle s_handle ]
[ ?dockSizeHint l_dockSizeHint ]
[ ?minimumSizeHint l_minimumSizeHint ]
[ ?floatSizeHint l_floatSizeHint ]
[ ?form g_form ]
[ ?help t_help ]
[ ?scrollBar g_scrollBar ]
[ ?title t_title ]
[ ?visibilityProc s_visibilityProc ]
)
=> w_dwindowID / nil"
"Creates a dockable window, which can be docked in a session window with the hiDockWindow function. Dockable windows can be of the following types: form, hypertext, html, or text. Dockable windows cannot be of type graphics.")
("hiDisplayWindow"
"hiDisplayWindow(
w_windowId | w_sessionWindowID
[ w_sessionWindowId ]
[ g_tabTitle ]
[ g_tabIcon ]
[ g_tabTip ]
) 
=> t / nil"
"Displays any window created by hiCreateWindow, including session windows; does not display dockable windows or empty session windows. This function always displays graphics windows in a session window-if you do not specify a session window, this function creates a new one and displays the graphics window in it.")
("hiDockWindow"
"hiDockWindow(
?window w_dwindowID
[ ?session g_sessionWindowID ]
[ ?side s_side ]
[ ?index x_index ]
[ ?unmapped g_unmapped ]
[ ?tabOnto w_dwindowID ]
)
=> t / nil"
"Docks a dockable window in a session window. You must specify the g_sessionWindowID argument the first time that you display a dock window with this function.")
("hiUndockWindow"
"hiUndockWindow(
x_dwindowID
)
=> t / nil"
"Undocks a dockable window from a session window. The window is floated. You can dock the window again with hiDockWindow.")
("hiGetHelp"
"hiGetHelp(
w_windowId
)
=> t_help"
"Retrieves the help string that is defined for the window.")
("window"
"window(
x_windowNumber 
) 
=> w_windowId / nil"
"Given a window number, gets the window ID. ")
("swindow"
"swindow(
x_windowNumber
)
=> w_sessionWindowID / nil"
"Gets the window ID of a session window.")
("dwindow"
"dwindow(
g_window
)
=> w_dockWindowID / nil"
"Gets the window ID of a dockable window.")
("wtypep"
"wtypep( 
g_object 
) 
=> t / nil"
"A predicate function that returns t if g_object is of type window, and nil otherwise.")
("windowp"
"windowp(
g_object 
) 
=> t / nil"
"Checks whether the specified object is a valid window.")
("swindowp"
"swindowp(
g_object
)
=> t / nil"
"Checks whether the specified object is a valid session window.")
("dwindowp"
"dwindowp(
g_object
)
=> t / nil"
"Checks whether the specified object is a valid dock window.")
("hiIsWindowSpecifier"
"hiIsWindowSpecifier(
g_winspec
)
=> g_winspec / nil"
"Validates a window specifier, which is passed as the boxSpec argument to the hiCreateWindow and hiOpenWindow functions.")
("hiGetActiveTabWindow"
"hiGetActiveTabWindow(
w_sessionWindowID
)
=> w_windowID / nil"
"Returns the window ID of the window that is the active tab in the session window.")
("hiGetSessionWindow"
"hiGetSessionWindow(
w_windowID
)
=> w_sessionWindowID / nil"
"Returns the ID of the session window that contains the specified window or dock window.")
("hiSetSessionFocus"
"hiSetSessionFocus(
w_dockWindowOrTabWindow
)
=> t / nil"
"Sets the keyboard focus to a session window's active tab window or docked window when the session window becomes active. The active tab window or docked window that you specify must be part of a session window and must contain a sub-widget that is enabled, visible, and that can get focus through the Tab key. The focus is set to a sub-widget.")
("hiSetTabWindowTitle"
"hiSetTabWindowTitle(
w_windowID
t_title
)
=> t / nil"
"Sets the title of the specified window's tab. Tabs are displayed when multiple windows are open in a session window.")
("hiSetTabWindowIcon"
"hiSetTabWindowIcon(
w_windowID
g_icon
)
=> t / nil"
"Sets the icon in the specified window's tab. Tabs are displayed when multiple windows are open in a session window.")
("hiSetTabWindowTip"
"hiSetTabWindowTip(
w_windowID
t_toolTip
)
=> t / nil"
"Sets the tooltip for the specified window's tab. Tabs are displayed when multiple windows are open in a session window.")
("hiSetWindowAtts"
"hiSetWindowAtts(
[ ?window w_windowId ] 
[ ?appType t_applicationType ] 
[ ?help t_help ] 
[ ?scroll g_scrollbars ]
) 
=> t / nil"
"Changes the application type, help string, or scroll bar attributes of a window. You must register the new application type before setting it with this function.")
("hiSetWinStyle"
"hiSetWinStyle( 
s_style 
) 
=> t / nil"
"Sets the window creation style to 'default, 'interactive or 'bBox.")
("hiCloseWindow"
"hiCloseWindow(
w_windowId 
) 
=> t / nil"
"Closes and destroys a window, dock window, or session window.")
("hiRegCloseProc"
"hiRegCloseProc(
w_windowId 
s_closeProc 
) 
=> t"
"Registers the procedure to be called when a window is closed. You can register closing procedures for windows, session windows, and dockable windows. A session window's closing procedure is called before the closing procedure of any of the windows it contains.")
("hiUnregCloseProc"
"hiUnregCloseProc(
w_windowId 
s_closeProc
) 
=> t / nil"
"Unregisters the closing procedure for a window.")
("hiGetWindowState"
"hiGetWindowState(
w_windowId
) 
=> s_state / nil"
"Returns the display state of a window: mapped, unmapped, or iconified.")
("hiGetWindowDisplayState"
"hiGetWindowDisplayState(
w_windowId
)
=> l_state / nil"
"Returns detailed information about the display state of a window.")
("hiSwitchWindowType"
"hiSwitchWindowType(
w_windowId 
t_widgetType
t_appType
t_help
[ g_scroll ] 
) 
=> t / nil"
"Switches the widget type of a window between graphics, text, or hypertext. The window must be in a session window.")
("hiIconifyWindow"
"hiIconifyWindow(
w_windowId 
) 
=> t / nil"
"Converts a window to its icon. If the window is contained in a session window, the session window is iconified.")
("hiDeiconifyWindow"
"hiDeiconifyWindow(
w_windowId 
) 
=> t / nil"
"Converts an icon to a window. If the window is contained in a session window, the session window is deiconified.")
("hiGetWindowIconifyState"
"hiGetWindowIconifyState( 
w_windowId 
)
=> l_iconPosition / nil"
"Returns the icon position of an iconified window. If the window is contained in a session window, this function returns the icon position of the session window.")
("hiLowerWindow"
"hiLowerWindow(
w_windowId 
) 
=> t / nil"
"Lowers a window to the bottom of the list of visible windows.")
("hiRaiseWindow"
"hiRaiseWindow(
w_window 
[ g_silent ]
) 
=> t / nil"
"Raises a window to the top of the list of visible windows. ")
("hiRaiseTab"
"hiRaiseTab(
w_windowID
)
=> t / nil"
"Raises a tab contained in a multi-tabbed session window to the top of the list and makes it the active tab. If there is only a single tab, the function does nothing.")
("hiLowerTab"
"hiLowerTab(
w_windowID
)
=> t / nil"
"Lowers a tabbed window contained in a session window to the bottom of the list of tabbed windows.

If there is only a single tab, the function does nothing.

If there are multiple tabs, and the function is passed the window ID of the current tab, and it cycles to the next tab in the sequence. 

If passed the window ID of one of the tabs that is not the current tab, the function does nothing.")
("hiPickWindow"
"hiPickWindow() 
=> w_windowId / nil"
"Lets you select a window without changing the current window. When this function is called, the pointer is grabbed and not released until either the mouse button or the Escape key is pressed. Any other keyboard event is ignored and the mouse click is not passed on to anything else.")
("hiMapWindow"
"hiMapWindow(
w_windowId 
) 
=> t / nil"
"Displays a window, dockable window, or session window on screen. ")
("hiUnmapWindow"
"hiUnmapWindow(
w_windowId 
) 
=> t / nil"
"Removes a window, dockable window, or session window from the screen without closing or destroying it. ")
("hiMoveWindow"
"hiMoveWindow(
w_windowId 
l_point 
) 
=> t / nil"
"Moves the lower left corner of a window to a new screen location. If w_windowId is a window contained in a session window, the session window is moved.")
("hiResizeWindow"
"hiResizeWindow(
w_windowId 
l_bBox 
) 
=> t / nil"
"Resizes a window to the size of a bounding box. If w_windowID is a window within a session window, the session window is resized.")
("hiFocusToCursor"
"hiFocusToCursor(
g_cursorFocus 
) 
=> t"
"Sets the window focus mechanism.")
("hiGetWindowList"
"hiGetWindowList(
[ s_windowType ]
) 
=> l_windowId"
"Returns a list of window IDs of all windows that have been created but not closed, including those that are not currently displayed. You can specify the type of window with the s_windowType argument. By default, all windows except session windows and dock windows are returned.")
("hiGetWindowName"
"hiGetWindowName(
w_windowId 
) 
=> t_windowName / nil"
"Returns the window name, which is displayed in the window manager frame of a window. This name is set with the hiSetWindowName function.")
("hiSetWindowName"
"hiSetWindowName(
w_windowId 
t_label 
) 
=> t / nil"
"Sets the window name, which is displayed in the window manager frame of a window. A session window displays the window name of the window that is currently active within it.")
("hiGetIconName"
"hiGetIconName(
w_windowId 
) 
=> t_iconName / nil"
"Gets the name that is displayed on a window's icon when the window is minimized. This name is set with the hiSetIconName function.")
("hiSetIconName"
"hiSetIconName(
w_windowId 
t_iconName 
) 
=> t / nil"
"Sets the name that is displayed on a window's icon when the window is minimized. A session window, when minimized, displays the icon name of the window that is currently active within it; if the window does not have an icon name set, then the session window's icon name is displayed.")
("hiSetWindowIcon"
"hiSetWindowIcon(
w_windowId 
g_icon 
) 
=> t / nil"
"Sets the icon of a window, which is displayed when the window is minimized. A session window, when minimized, displays the icon of the window that is currently active within it; if the window does not have an icon set, then the session window's icon is displayed.")
("hiGetWidgetType"
"hiGetWidgetType(
w_windowId 
) 
=> t_widgetType / nil"
"Returns the widget type of a window. Valid widget types are session, graphics, text, hypertext, html, encap, form, and none.")
("hiIsWidgetType"
"hiIsWidgetType(
t_widgetType 
) 
=> t / nil"
"Determines if a widget type is valid or not.")
("hiGetAppType"
"hiGetAppType(
w_windowId 
) 
=> t_applicationType / nil"
"Returns the application type of a window. The application type is set when the window is created.")
("hiGetCurrentEnterFunPoints"
"hiGetCurrentEnterFunPoints() 
=> l_points"
"Returns the list of points entered in the active enterfunction of the current window.")
("hiGetCurrentWindow"
"hiGetCurrentWindow() 
=> w_windowId / nil"
"Returns the ID of the current window. If the current window is in a session window, the ID of the window, not the session window, is returned. Session windows and dockable windows can never be the current window.")
("getCurrentWindow"
"getCurrentWindow"
"The getCurrentWindow function is an alias for the hiGetCurrentWindow function.")
("hiSetCurrentWindow"
"hiSetCurrentWindow(
w_windowId 
) 
=> t / nil"
"Sets the window you specify as the current window.")
("setCurrentWindow"
"setCurrentWindow"
"The setCurrentWindow function is an alias for the hiSetCurrentWindow function.")
("hiRegCurWindowTrigger"
"hiRegCurWindowTrigger(
S_functionName
)
=> t / nil"
"Registers the SKILL function to be called whenever the current window changes. The SKILL function will be called with one argument: an integer representing the window number of the new current window. If no window is current (for example, if all windows except the CIW are closed or if any open windows have the property neverCurrentWindow set to t), then the argument is 0.")
("hiUnregCurWindowTrigger"
"hiUnregCurWindowTrigger(
S_functionName
)
=> t / nil"
"Unregisters a SKILL function that was registered to be called whenever the current window changes.")
("hiGetMaxScreenCoords"
"hiGetMaxScreenCoords() 
=> l_coord_pair"
"Retrieves the screen coordinates of the upper-right corner of the display screen. The lower-left corner of the screen is assumed to be 0:0. This is the maximum size that you can specify for a window.")
("getMaxScreenCoords"
"getMaxScreenCoords"
"The getMaxScreenCoords function is an alias for the hiGetMaxScreenCoords function.")
("hiGetAbsWindowScreenBBox"
"hiGetAbsWindowScreenBBox(
w_windowId 
[ g_includeWMOffsets ]
) 
=> l_bBox"
"Returns the absolute screen coordinates of a window, assuming 0:0 is the lower-left corner of the screen. ")
("hiGetWMOffsets"
"hiGetWMOffsets() 
=> l_offsets"
"Returns a list of offsets (dimensions) of the window manager border placed around each window. ")
("hiAddFixedMenu"
"hiAddFixedMenu( 
[ ?window w_window ] 
?fixedMenu g_fixedMenu 
[ ?menuSide s_menuSide ] 
[ ?append g_append ]
[ ?newLine g_newLine ]
) 
=> t / nil"
"NOTE: Fixed menus are no longer supported in windows. Use the new toolbar functions to create toolbars instead for windows. Existing fixed menus that have been added to windows will no longer be displayed, although they will not generate any warnings. Replace these menus with toolbars.")
("hiRemoveFixedMenu"
"hiRemoveFixedMenu( 
[ w_window ] 
[ r_fixedMenu ]
) 
=> t / nil"
"Removes a fixed menu from a window. If you do not specify a menu, all fixed menus are removed. To delete a fixed menu, first use hiRemoveFixedMenu to remove the fixed menu from the window and then use hiDeleteMenu to destroy the fixed menu.")
("hiMoveFixedMenu"
"hiMoveFixedMenu( 
[ ?window w_window ] 
[ ?menuSide s_menuSide ] 
[ ?fixedMenu g_fixedMenu ]
) 
=> t / nil"
"Moves the fixed menu to the opposite side of the window. NOTE: Fixed menus are no longer supported in windows. Use the new toolbar functions to create toolbars instead for windows. Existing fixed menus that have been added to windows will no longer be displayed, although they will not generate any warnings. Replace these menus with toolbars.")
("hiGetWindowFixedMenu"
"hiGetWindowFixedMenu(
[ w_window ]
) 
=> r_fixMenu / nil"
"Identifies the fixed menu on a window.")
("hiSetCursor"
"hiSetCursor(
w_windowId
x_cursor
)
=> t / nil"
"Sets the cursor you specify for the window.")
("hiGetCursor"
"hiGetCursor(
w_windowId
)
=> x_cursor"
"Identifies the type of cursor that is currently set for the specified window.")
("hiGetCursorName"
"hiGetCursorName(
x_cursorID
)
=> t_cursorName"
"Returns the name of the cursor associated with the specified cursor ID.")
("hiGetCursorByName"
"hiGetCursorByName(
t_cursorName
) 
=> x_cursorID"
"Returns the ID associated with the specified cursor name.")
("hiSetShadowMode"
"hiSetShadowMode(
g_enabled
)
=> t / nil"
"Controls the display of unselected objects in a graphics window. When you enable shadow mode with this function, all unselected objects are dimmed and all selected objects are displayed at full brightness in their original layer color instead of the selection color. The shadow mode setting applies to all graphics in all windows of the application, not just to the current window.")
("hiRemovePromptLine"
"hiRemovePromptLine(
[ w_window ]
)
=> t / nil"
"Removes the prompt line from the graphics window you specify or, if you do not specify a window, from the current window.")
("hiSetEFunCursor"
"hiSetEFunCursor(
w_window
x_cursor
)
=> t / nil"
"Sets the cursor for an active enterfunction.")
("hiGetEFunCursor"
"hiGetEFunCursor(
w_window
)
=> t / nil"
"Gets the cursor for an active enterfunction.")
("hiGetEFDrawThruDelta"
"hiGetEFDrawThruDelta()
=> DrawThruDeltas / nil"
"Returns the list of EnterFunction draw-thru deltas for the three mouse buttons.")
("hiSetEFDrawThruDelta"
"hiSetEFDrawThruDelta(
x_EFdelta
{ x_button }
)
=> t"
"Sets the Enter Function draw-thru delta.")
("hiZoomIn"
"hiZoomIn(
[ w_window ]
[ l_bBox ] 
) 
=> t / nil"
"Zooms in to a design. ")
("hiZoomOut"
"hiZoomOut(
[ w_window ] 
[ l_bBox ] 
) 
=> t / nil"
"Zoom out of a design.")
("hiZoomRelativeScale"
"hiZoomRelativeScale(
[ w_window ] 
[ n_scale ] 
) 
=> t / nil"
"Zooms in or out with a scale relative to the current window.")
("hiZoomAbsoluteScale"
"hiZoomAbsoluteScale(
[ w_window ] 
[ n_scale ] 
[ g_ignoreEFunBBox ]
)
=> t / nil"
"Zooms in or out with an absolute scale. ")
("hiZoomWindowAtPoint"
"hiZoomWindowAtPoint(
w_window
f_scale
l_point
)
=> t / nil"
"Zooms in or out of a window, keeping the point you specify at its current location in the window.")
("hiZoomWindowAtMouse"
"hiZoomWindowAtMouse(
w_window
f_scale
)
=> t / nil"
"Zooms in or out of a window, keeping the point beneath the mouse at its current location in the window.")
("hiZoomInAtMouse"
"hiZoomInAtMouse(
[ w_window ]
)
=> t / nil"
"Zooms into a window by a scale factor of 2, keeping the point beneath the mouse at its current location in the window.")
("hiZoomOutAtMouse"
"hiZoomOutAtMouse(
[ w_window ]
)
=> t / nil"
"Zooms out of a window by a scale factor of 2, keeping the point beneath the mouse at its current location in the window.")
("hiZoomExpandAtPoint"
"hiZoomExpandAtPoint( 
w_window
f_zoomFactor
l_point
)
=> t / nil"
"Zooms out the image by keeping the mirror image point of l_point at the same location")
("hiZoomExpandAtMouse"
"hiZoomExpandAtMouse( 
[ w_window ]
)
=> t / nil"
"Zooms out by two in the specified window (or current window) expanding the zoom area in the direction of the mouse relative to the center of the window")
("hiGetViewBBox"
"hiGetViewBBox(
[ w_window ] 
) 
=> l_bBox"
"Returns the bounding box displayed in a window.")
("hiPan"
"hiPan(
[ w_window ] 
[ l_point ] 
) 
=> t / nil"
"Scrolls a window so that the display is centered on a point. ")
("hiVectorPan"
"hiVectorPan(
[ w_window ] 
[ l_refPt ] 
[ l_destPt ] 
) 
=> t / nil"
"Scrolls the view of the design in any direction by specifying two points in user units. ")
("hiDeltaPan"
"hiDeltaPan(
[ w_window ] 
[ n_deltax ] 
[ n_deltay ] 
) 
=> t / nil"
"Pans the view of a design in any direction by specifying the displacements in user units. ")
("hiAbsolutePan"
"hiAbsolutePan(
[ w_window ] 
[ n_%x ] 
[ n_%y ] 
) 
=> t / nil"
"Scrolls a window in any direction by specifying the amount to pan as a percentage of the window size.")
("hiDynamicPanAbsolute"
"hiDynamicPanAbsolute(
[ w_window ]
[ l_point ]
)
=> t / nil"
"Pans a design to display the specified point at the center of the window. This function is similar to hiPan, except that it pans dynamically, that is, it displays the panning movement.")
("hiDynamicPanRelative"
"hiDynamicPanRelative(
[ w_window ]
[ n_percentX ]
[ n_percentY ]
[ g_noAnimation { t | nil } ]
)
=> t / nil"
"Pans a design in the direction and distance specified in n_percentX and n_percentY. The distance is a percentage of the window size.")
("hiDynamicPanInteractive"
"hiDynamicPanInteractive(
[ w_window ]
[ n_scope ]
[ g_noAnimation { t | nil } ]
)
=> t / nil"
"Pans a design continuously when you place the cursor near the edge of a graphics window. You can control the speed at which the design is panned by varying the distance between the cursor and the edge of the window-the closer the cursor is to the edge of the window, the faster the speed.")
("hiDynamicPanGrabbing"
"hiDynamicPanGrabbing(
[ w_window ]
[ l_vector ]

)
=> t / nil"
"Pans (grabs and moves) a design in the specified (or current) window from one point to another. You can even pan the design when editing it. The panning operation ends when you release holding the mouse button or DrawThru bindkey.")
("hiRedraw"
"hiRedraw(
[ w_window ] 
) 
=> t / nil"
"Redraws the contents of a window. ")
("hiRegZoomPanProc"
"hiRegZoomPanProc(
t_procedureName
[ w_window ]
)
=> t / nil"
"Registers a SKILL procedure for a graphics window that will be called whenever a user uses a zoom, pan, fit, or redraw command in that window. If you do not specify a window while registering the procedure, the procedure will be called whenever the user uses these commands in any graphics window. The SKILL procedure is passed the window ID and the bounding box of the display in user units.")
("hiUnregZoomPanProc"
"hiUnregZoomPanProc(
t_procedure
)
=> t / nil"
"Unregisters a SKILL procedure that was registered with the hiRegZoomPanProc function and that is called whenever the user uses a zoom, pan, fit, or redraw command in a graphics window.")
("hiSaveView"
"hiSaveView(
t_viewName 
[ w_window ] 
) 
=> t / nil"
"Saves the current viewing parameters of a graphics window.")
("hiListView"
"hiListView( 
[ t_viewName ]
[ w_window ]
) 
=> l_viewList / nil"
"Lists the saved viewing parameters for a given view, or for all views if viewName is not specified. This function applies to graphics windows only")
("hiRestoreView"
"hiRestoreView(
t_viewName 
[ w_window ] 
) 
=> t / nil"
"Restores a graphics window to the view specified by viewName.")
("hiPrevWinView"
"hiPrevWinView(
w_window 
) 
=> t / nil"
"Restores a graphics window to the view displayed before the last zoom or pan command.")
("hiNextWinView"
"hiNextWinView(
w_window 
) 
=> t / nil"
"Undoes hiPrevWinView on a graphics window.")
("hiGetUndoLimit"
"hiGetUndoLimit(
) 
=> n_undoLimit"
"Returns the maximum number of hiUndo commands that can be performed in sequence. This number is set with the hiSetUndoLimit function or with the Undo Limit field in the CIW User Preferences form.")
("hiSetUndoLimit"
"hiSetUndoLimit(
n_undoLimit
) 
=> t / nil"
"Sets the maximum number of hiUndo commands that can be performed in sequence. Specify either 0 or 128; 0 disables the undo command and 128 sets the undo limit to 128. If you specify any number other than 0, the undo limit is 128.")
("hiUndo"
"hiUndo( ) 
=> t / nil"
"Undoes the last user command that modified the database and that has not been undone by a previous hiUndo. ")
("hiRedo"
"hiRedo( ) 
=> t / nil"
"Undoes the last hiUndo, assuming no other database modifications have occurred.")
("hiEnableBlink"
"hiEnableBlink(
g_blink
)
=> t / nil"
"Enables or disables blinking, depending on the value of the g_blink argument. When blinking is disabled, objects that would normally blink in graphics windows will not blink. In some cases, disabling blinking can improve graphics performance. You can also disable blinking by starting the application with the -noblink option.")
("hiIsBlinkEnabled"
"hiIsBlinkEnabled( )
=> t / nil"
"Checks whether blinking is enabled or not. You can use hiEnableBlink to enable or disable blinking in your current session.")
("hiCreateWorldView"
"hiCreateWorldView(
w_windowId
)
=> dwindowID / nil"
"Creates a World View assistant for your graphics window, which you can then display with hiDockWindow. World View assistant is a small window that shows you a picture of your entire design and marks the part of the design that is currently displayed in the graphics window. You can also use it to navigate the design or zoom in or out of it.")
("hiWorldViewFit"
"hiWorldViewFit(
[ w_windowId ]
)
=> t / nil"
"Fits the current canvas display area in the World View assistant of the specified graphics window.")
("hiWorldViewRedraw"
"hiWorldViewRedraw(
[ w_windowId ]
)
=> t / nil"
"Redraws the current canvas display area in the World View assistant of the specified graphics window.")
("hiWorldViewZoomIn"
"hiWorldViewZoomIn(
[ w_windowId ]
)
=> t / nil"
"Zooms into the current canvas display area open in the World View assistant of the specified graphics window.")
("hiWorldViewZoomOut"
"hiWorldViewZoomOut(
[ w_windowId ]
)
=> t / nil"
"Zooms out of the current canvas display area open in the World View assistant of the specified graphics window.")
("hiGenerateThumbnails"
"hiGenerateThumbnails(
?lib g_lib
[ ?cell g_cell ]
[ ?view g_view ]
[ ?sizes g_sizes ]
[ ?output g_output ]
[ ?verbose g_verbose ]
[ ?exportArgs g_exportArgs ]
[ ?filePath t_filePath ]
)
=> thumbnails / nil"
"Generates thumbnails for given library cellviews. Function behavior depends on arguments provided. All arguments can be lists in order to batch-generate thumbnails for a series of libraries, cells, views and sizes. At present, only the default 128x128 thumbnail is used by Cadence tools.")
("hiGetDefaultThumbnail"
"hiGetDefaultThumbnail(
?viewType t_viewType
[ ?size g_size ]
)
=> icon / nil"
"Displays a default cellview type thumbnail when a thumbnail is not available for that application. This prevents the thumbnail area of a dialog or window from being left blank.")
("hiGetDefaultThumbnailResolution"
"hiGetDefaultThumbnailResolution( )
=> x_width x_height / nil"
"Returns a list that comprises of a pair of integers that indicate the default thumbnail resolution that applications are currently using.")
("hiGetDefaultWidgetSpacing"
"hiGetDefaultWidgetSpacing(
[ ?widgetsAreRelated t | nil ]
)
=> x_value"
"Returns the recommended number of pixels between UI elements. The spacing between related elements, such as a group of Boolean buttons, is smaller than elements, which are not related.")
("hiGetThumbnailFilename"
"hiGetThumbnailFilename(
[ ?size g_size ]
)
=> s_filename / nil"
"Returns the name of a thumbnail file for a given resolution. If no specific size is requested, the filename for the default thumbnail resolution will be used (as set by hiGetThumbnailDefaultResolution).")
("hiGetWinConfig"
"hiGetWinConfig(
w_swindowID
)
=> n_configID / nil"
"Creates a new workspace based on the session window layout and returns its ID.")
("hiSaveWinConfig"
"hiSaveWinConfig(
n_configID
t_pathToFile
[ g_overwrite ]
)
=> t / nil"
"Saves a workspace to a file. The g_overwrite argument lets you specify whether or not to overwrite an existing file.")
("hiReadWinConfig"
"hiReadWinConfig(
t_pathToFile
)
=> n_configID / nil"
"Reads a workspace file previously saved by hiSaveWinConfig and returns the workspace ID.")
("hiApplyWinConfig"
"hiApplyWinConfig(
w_swindowID
n_configID
)
=> t / nil"
"Applies a workspace to a session window. If the session window has toolbars and dock assistants that were not present when the workspace was created, they will be hidden.")
("hiWinConfigModified"
"hiWinConfigModified(
w_swindowID
[ x_winConfigID ]
)
=> t / nil"
"Checks whether a workspace has been modified since it was last applied to the session window.")
("hiGetWinConfigInfo"
"hiGetWinConfigInfo(
n_configID
)
=> l_infoList / nil"
"Returns information about a workspace (window configuration): the list of dock assistants and toolbars that are are part of the workspace and whether they are visible, hidden, or floating.")
("hiSetWinObjName"
"hiSetWinObjName(
w_dockWindowID
t_name
)
=> t / nil"
"Sets the window name which is used for storing workspace information about a dock assistant. Every dock assistant must have a unique name that does not change. Do not use this function with dock assistants provided by Cadence.")
("hiGetWinObjName"
"hiGetWinObjName(
w_dockWindowID
)
=> t_name / nil"
"Gets the window name that is used to store the dock assistant's workspace information. This name is set with the hiSetWinObjName function.")
("hiWindowSaveImage"
"hiWindowSaveImage(
[ ?target g_target ]
[ ?path t_path ]
[ ?format t_format ]
[ ?toplevel g_toplevel ]
[ ?quality n_quality ]
[ ?delay n_delay ]
[ ?timeoutBeep g_timeoutBeep ]
[ ?grabFromScreen g_grabFromScreen ]
[ ?centralWidget g_centralWidget ]
)
=> t / nil"
"Takes a screen capture of a window, a region, or the entire screen. You can specify the object to capture either through the arguments or, in interactive mode, by selecting it with the mouse.")
("hiExportImage"
"hiExportImage(
?fileName t_filename
[?window w_window]
[?exportRegion s_exportRegion]
[?bBox l_bBox]
[?width n_width]
[?height n_height]
[?scaleFactor n_scaleFactor]
[?haloType s_haloType]
[?scaleHalos g_scaleHalos]
[?fileType g_fileType]
[?keepAspect g_keepAspect]
[?transparentBG g_transparentBG]
[?colorType s_colorType]
[?fgColor t_fgColor]		
[?verbose g_verbose]
[?windowProps g_windowProps]
[?decorations g_decorations]
)
=> t / nil"
"Takes a screen capture of a design in a graphics window and exports it to a standard image format such as PNG. This function can only be used with graphics windows.")
("hiExportImageDialog"
"hiExportImageDialog(
[ w_window ]
)
=> t / nil"
"Displays the Export Image dialog box, which lets you take a screen capture of the design contained in the specified window and save it to a standard image format. This function can only be called for graphics windows.")
("hiAbout"
"hiAbout(
w_windowId
)
=> t / nil"
"Displays an application's product information window, which includes the release version and copyright information. If w_windowId is a session window, the product information is about the window that is displayed in the top tab.")
("hiSetSplashBackground"
"hiSetSplashBackground(
t_fileName
)
=> t / nil"
"Sets the background for an application's splash screen. If the graphic you specify has too many colors, the background is not set.")
("hiSetSplashDefaultBackground"
"hiSetSplashDefaultBackground( )
=> t / nil"
"Sets the splash screen background to the default background.")
("hiSetSplashIcon"
"hiSetSplashIcon(
g_icon
)
=> t / nil"
"Sets a new icon for an application's splash screen. The icon is displayed between the product name and the license information and will always be set to a 48x48 size.")
("hiSetSplashFamily"
"hiSetSplashFamily(
t_string
)
=> t / nil"
"Sets the product family name on an application's splash screen.")
("hiSetSplashProduct"
"hiSetSplashProduct(
t_string
)
=> t / nil"
"Sets the product name on an application's splash screen.")
("hiSetSplashLicense"
"hiSetSplashLicense(
t_string
)
=> t / nil"
"Sets the license information in an application's splash screen. You can currently set only Cadence license information.")
("hiGetMagnifierSize"
"hiGetMagnifierSize(
w_window
)
=> size / nil"
"Returns a two element list for the currently opened magnifier for the specified graphics window.")
("hiIsMagnifierAnchored"
"hiIsMagnifierAnchored(
w_window
)
=> t / nil"
"Checks if the magnifier has been anchored inside the specified graphics window. If the magnifier has been anchored it will not move with the mouse cursor.")
("hiIsMagnifierOpened"
"hiIsMagnifierOpened(
w_window
)
=> t / nil"
"Indicates whether a magnifier is currently opened in the specified window.")
("hiResizeMagnifier"
"hiResizeMagnifier(
l_resizeBy
)
=> t / nil"
"Changes the magnifier size dynamically.")
("hiScaleMagnifier"
"hiScaleMagnifier(
n_scale
)
=> t / nil"
"Changes the zooming factor of the magnifier dynamically.")
("hiToggleAnchorMagnifier"
"hiToggleAnchorMagnifier( )
=> t / nil"
"Toggles the anchored state of the magnifier to anchored/un-anchored depending upon the current anchored state of the magnifier.")
("hiToggleMagnifier"
"hiToggleMagnifier( )
=> t / nil"
"Changes the visibility of the magnifier to on/off depending on the current visibility setting of the magnifier.")
("hiToggleMagnifierResolution"
"hiToggleMagnifierResolution( )
=> t"
"Turns on magnifier resolution in the canvas if the canvas is not currently using magnifier resolution. Otherwise will turn off magnifier resolution.")
("hiUpdateMagOptions"
"hiUpdateMagOptions(
)
=> t / nil"
"Update and display the Magnifier Options form with the magnifier values that are being used in the current window.")
("hiUseMagnifierResolution"
"hiUseMagnifierResolution(
w_window
g_use
)
=> t / nil"
"Alters the movement of the cursor within the canvas.")
("hiUsingMagnifierResolution"
"hiUsingMagnifierResolution(
w_window
)
=> t / nil"
"Returns whether mouse movement in the canvas is set to behave as if the mouse is located within the magnifier.")
("hiZoomInMagnifier"
"hiZoomInMagnifier(
w_window
)
=> t / nil"
"Zooms into the picture in canvas, as opposed to the picture in the magnifier, with the current magnifier zooming factor.")
("hiZoomOutMagnifier"
"hiZoomOutMagnifier(
w_window
)
=> t / nil"
"Backs out one call to the hiZoomInMagnifier command from the stack (similar to an undo action).")
("hiChangeBannerLabel"
"hiChangeBannerLabel(
w_windowId 
t_bannerLabel 
x_labelPosition 
) 
=> t / nil"
"Overwrites an existing label or adds a new label in the banner bar of a window.")
("hiDeleteBannerLabel"
"hiDeleteBannerLabel(
w_windowId 
x_labelPosition 
) 
=> t / nil"
"Deletes a label from the banner bar of a window.")
("hiDeleteBannerMenu"
"hiDeleteBannerMenu(
w_windowId 
x_menuPosition 
)
=> t / nil"
"Deletes a menu from the menu bar of a window.")
("hiDeleteBannerMenus"
"hiDeleteBannerMenus(
w_windowId 
)
=> t / nil"
"Deletes all menus from the menu bar of a window. ")
("hiGetBannerLabels"
"hiGetBannerLabels(
w_windowID
)
=> l_labels / nil"
"Returns the list of labels that are in the banner bar of a window. (These labels were added with the  ?labels argument to the hiOpenWindow function when the window was created or with the hiChangeBannerLabel function.)")
("hiGetBannerMenus"
"hiGetBannerMenus(
w_windowId 
)
=> l_menuSymbols / nil"
"Returns a list of the menus that are in the menu bar of a window.")
("hiGetNumMenus"
"hiGetNumMenus(
w_windowId 
)
=> x_numMenus"
"Returns the number of menus in the menu bar of a window. ")
("hiInsertBannerMenu"
"hiInsertBannerMenu(
w_windowId 
g_menu 
x_menuPosition 
) 
=> t / nil"
"Inserts a menu into the menu bar of a window. If the menu symbol that you specify already exists on the window, a warning message is issued and the menu is not placed on the window.")
("hiIsMenuSlotFilled"
"hiIsMenuSlotFilled(
w_windowId 
x_position
) 
=> t / nil"
"Checks whether a menu already exists in the specified position in the menu bar of a window. ")
("hiReplaceAllBannerMenus"
"hiReplaceAllBannerMenus(
w_windowId 
l_menulist
) 
=> t / nil"
"Replaces all menus in a window with new menus.")
("hiBindKeyModifiers"
"hiBindKeyModifiers(
[ s_type ]
)
=> l_modifiers"
"Returns the list of modifiers that can be used with bindkeys in the current session. You can specify the type of keys for which you want the list of legal modifiers: printable, mouse, or function.")
("hiSetBindKey"
"hiSetBindKey(
[ t_applicationType ] 
[ t_key ] 
[ t_skill_cmd ] 
) 
=> t / nil"
"Binds a SKILL command string to a keyboard key or a mouse sequence for an application. ")
("hiSetBindKeys"
"hiSetBindKeys(
t_applicationType 
l_bindKeyList 
) 
=> t / nil"
"Sets multiple bindkeys for an application at one time. For memory and performance efficiency, use this function instead of hiSetBindKey if you are setting multiple bindkeys. For information about restrictions, see hiSetBindKey.")
("hiRegSetBindKeyProc"
"hiRegSetBindKeyProc(
t_application
S_function
[ g_notInherited ]
)
=> t / nil"
"Registers a SKILL function that will be called after a bindkey is set for the specified application with the hiSetBindKey function or the CIW's Key or Mouse Binding form, or after a set of bindkeys is defined with the hiSetBindKeys function.")
("hiGetBindKey"
"hiGetBindKey(
[ t_applicationType ] 
[ t_key ] 
) 
=> t_skill_cmd / nil"
"Returns the SKILL command string bound to a key or mouse button for an application. ")
("hiGetBindKeys"
"hiGetBindKeys(
t_applicationType
[ g_alsoInherited ]
)
=> l_bindkeyList / nil"
"Returns the list of bindkeys that are set for an application.")
("hiShowBindKeys"
"hiShowBindKeys(
[ g_appTypeOrWindow ]
[ g_showInheritBindings ]
)
=> t / nil"
"Displays the bindkeys for an application type or window in a Viewfile window. ")
("hiShowBindKeysByAppType"
"hiShowBindKeysByAppType(
w_window1
t_applicationType
[ g_showInheritBindings ]
)
=> t / nil"
"Displays the bindkeys for an application in a Viewfile window. ")
("hiShowBindKeysByWindow"
"hiShowBindKeysByWindow(
[ w_window1 ]
[ w_window2 ]
)
=> t / nil"
"Displays the bindkeys for a window in a Viewfile window. ")
("hiRegisterBindKeyPrefix"
"hiRegisterBindKeyPrefix(
t_applicationType
[ t_ignored ]
) 
=> t / nil"
"Registers an application bindkey prefix. Use this function to register prefixes that you do not want to register with the Design Editor application. Cadence applications are already registered.")
("hiInheritBindKey"
"hiInheritBindKey(
t_applicationType 
t_from_app_type 
) 
=> t / nil"
"Causes a registered application to inherit bindkeys from another application. ")
("hiGetBindKeyInheritRoot"
"hiGetBindKeyInheritRoot(
t_applicationType 
) 
=> t_application / nil"
"Returns the application name from which t_applicationType inherits its bindkeys. ")
("hiGetBindKeyInheritAlias"
"hiGetBindKeyInheritAlias(
t_applicationType 
) 
=> l_application / nil"
"Returns a list of application names that inherit the bindkeys from t_applicationType. ")
("hiGetBindKeyPrefixList"
"hiGetBindKeyPrefixList() 
=> l_application"
"Returns a list of registered applications. This list is used to build the menu for the Cyclic button on the Bind Keys form. ")
("hiConfigureBindKeys"
"hiConfigureBindKeys(
?showOnlyApps l_apps
?showAllChildren g_showAllChildren
?selectApp t_appname
?selectKeyBinding t_keyBinding
?showEmptyApps g_showEmptyApps
?showInheritedBindings g_showInheritedBindings
) 
=> t / nil"
"Resets and displays the Bindkey Configuration form according to the supplied arguments. If the form is currently open, and contains unsaved changes, it will prompt before resetting the data.")
("hiEnableAsstBindKeyPrefix"
"hiEnableAsstBindKeyPrefix(
t_prefix 
)
=> t / nil"
"Removes the specified bindkey prefix (also known as an appType), which is associated with a dock window (assistant), from the list of disabled bindkey prefixes. For information about how to add a bindkey prefix to the list of disabled bindkey prefixes, see hiDisableAsstBindKeyPrefix.")
("hiDisableAsstBindKeyPrefix"
"hiDisableAsstBindKeyPrefix(
t_prefix 
)
=> t"
"Adds the specified bindkey prefix (also known as an appType), which is associated with a dock window (assistant), to the list of disabled bindkey prefixes. As a result, the bindkeys defined using that prefix are disabled.")
("hiGetDisabledAsstBindKeyPrefixes"
"hiGetDisabledAsstBindKeyPrefixes(
)
=> l_list / nil"
"Returns the list of bindkey prefixes disabled using hiDisableAsstBindKeyPrefix.")
("enterArc"
"enterArc(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Enters an arc into the current window. ")
("enterBox"
"enterBox(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_bBox / nil"
"Enters a box in the current window. ")
("enterCircle"
"enterCircle(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_bBox / nil"
"Enters a circle in the current window.")
("enterDonut"
"enterDonut(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Enter a donut in the current window.")
("enterEllipse"
"enterEllipse(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_bBox"
"Enters an ellipse in the current window. ")
("enterFunNestLevel"
"enterFunNestLevel()
=> x_value"
"Returns the current nesting level of the enter function.")
("enterLine"
"enterLine(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?wantPoints x_pointLimit ]
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
[ ?target l_point ]
) 
=> l_point_list / nil"
"Enters a multisegment line in the current window.")
("enterNumber"
"enterNumber(
[ ?prompts l_promptList ]
[ ?form s_form ]
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?alwaysMap g_alwaysMap ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> f_number"
"Prompts you to enter a number. ")
("enterPath"
"enterPath(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?wantPoints x_pointLimit ]
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?pathStyle t_pathStyle ]
[ ?pathWidth f_pathWidth ]
[ ?beginExtent f_beginExtent ]
[ ?endExtent f_endExtent ] 
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Enters a path in the current window. ")
("enterPoint"
"enterPoint(
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_coord_pair"
"Prompts you to enter a single point. ")
("enterPoints"
"enterPoints(
[ ?prompts l_promptList] 
[ ?points l_pointList]
[ ?form s_form] 
[ ?addPointProc t_addProcName] 
[ ?delPointProc t_delProcName] 
[ ?initProc t_initProcName] 
[ ?doneProc t_doneProcName]
[ ?formProc t_formProcName]
[ ?wantPoints x_pointLimit] 
[ ?alwaysMap g_alwaysMap]
[ ?acceptString g_acceptString]
[ ?acceptNumber g_acceptNumber]
[ ?noInfix g_noInfix]
[ ?cmdName t_cmdName]
[ ?cursor x_cursor]
) 
=> l_coord_pair"
"Prompts you to enter a list of points. ")
("enterPolygon"
"enterPolygon(
[ ?prompts l_promptList ] 
[ ?points l_pointList ]
[ ?wantPoints x_pointLimit ] 
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Digitizes a polygon in the current window. ")
("enterScreenBox"
"enterScreenBox( ) 
=> l_bBox"
"Lets you enter a box in screen coordinates. ")
("enterSegment"
"enterSegment(
[ ?prompts l_promptList ] 
[ ?points l_pointList ]
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Lets you enter a segment into the current window. ")
("enterMultiRep"
"enterMultiRep(
[ ?prompts l_promptList ] 
[ ?points l_pointList ]
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> l_point_list / nil"
"Identical to enterSegment except that the two points can be in windows viewing different cellviews. ")
("enterString"
"enterString(
[ ?prompts l_promptList ] 
[ ?form s_form ]
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?alwaysMap g_alwaysMap ]
[ ?cmdName t_cmdName ]
[ ?cursor x_cursor ]
) 
=> t_string"
"Prompts you to enter a string. ")
("addPoint"
"addPoint(
l_point
) 
=> t / nil"
"Adds the point to the enterfunction in the current window. ")
("preXY"
"preXY( 
l_point 
) 
=> t"
"Causes an addPoint( l_point ) command to be added to the command queue in order to be logged and executed at the next toplevel to simulate the user selecting a point.")
("deletePoint"
"deletePoint() 
=> t / nil"
"Deletes a point from the enterfunction in the current window. ")
("cancelEnterFun"
"cancelEnterFun(
[ g_form ]
) 
=> t / nil"
"Cancels the enterfunction in the current window.")
("finishEnterFun"
"finishEnterFun(
[ g_form ]
) 
=> t / nil"
"Completes an enterfunction if possible. ")
("applyEnterFun"
"applyEnterFun(
[ g_form ]
) 
=> t / nil"
"Calls doneProc, passes it the points you entered, resets the enterfunction, and calls initProc. ")
("changeEnterFun"
"changeEnterFun(
s_enterFun 
[ ?prompts l_promptList ] 
[ ?points l_pointList ] 
[ ?wantPoints x_pointLimit ]
[ ?form s_form ] 
[ ?addPointProc t_addProcName ] 
[ ?delPointProc t_delProcName ] 
[ ?initProc t_initProcName ] 
[ ?doneProc t_doneProcName ]
[ ?formProc t_formProcName ]
[ ?pathStyle t_pathStyle ]
[ ?cursor x_cursor ]
[ ?pathWidth f_pathWidth ]
[ ?beginExtent f_beginExtent ]
[ ?endExtent f_endExtent ] 
[ ?dontDraw g_dontDraw ]
[ ?alwaysMap g_alwaysMap ]
[ ?acceptString g_acceptString ]
[ ?acceptNumber g_acceptNumber ]
[ ?noInfix g_noInfix ]
[ ?cmdName t_cmdName ]
[ ?target l_point ]
) 
=> t / nil"
"Since this function uses the current window to determine which enterfunction to change, make sure to properly set the current window before using this function. See hiSetCurrentWindow for information about setting the current window.")
("changeNextEnterFun"
"changeNextEnterFun( 
[ w_window ] 
) 
=> t / nil"
"If an enterfunction is currently active, sets a flag that causes the next enterfunction invocation for the current window or a specified window to use the changeEnterFun logic rather than being nested.")
("clearAllEnterFunctions"
"clearAllEnterFunctions( ) 
=> t / nil"
"Cancels all nested enterfunctions associated with the current window.")
("hiGetCurrentCmd"
"hiGetCurrentCmd( 
w_window 
) 
=> t_commandName / nil"
"Returns the 	command name associated with the enterfunction currently running in a window, or nil if no enterfunction is running.")
("hiInEnterFun"
"hiInEnterFun(
[ w_wtype ]
)
=> s_enterFunction / nil"
"Returns the symbol of the enterfunction pending in the window.")
("hiMarkNestable"
"hiMarkNestable(
g_symbolOrList
)
=> t / nil"
"Makes enterfunctions nestable. When an enterfunction is running and a new one is called, the new enterfunction replaces the old enterfunction in the stack. When the new enterfunction is finished or canceled, the old enterfunction is resumed. This function reverses the effect of hiMarkNonNestable.")
("hiMarkNonNestable"
"hiMarkNonNestable( 
g_symbolOrList 
) 
=> t / nil"
"Makes enterfunctions non-nestable. When an enterfunction is running and a new one is called, the new enterfunction replaces it in the stack. When the new enterfunction is finished or canceled, the enterfunction it replaced will not be returned to, but will have been canceled by the new enterfunction.")
("hiUpdate"
"hiUpdate( ) 
=> t"
"Updates window prompts and application-specific state variables. Especially important if an enterfunction has been canceled in a window that is not the current window.")
("hiToggleEnterForm"
"hiToggleEnterForm(
[ g_form ]
) 
=> t / nil"
"Displays or removes the options form of the enterfunction in the current window. ")
("undrawEnterFun"
"undrawEnterFun( ) 
=> t / nil"
"Undraws any rubberbanding shapes. Called when an enterfunction is active. If you enter data in the window, rubberbanding resumes.")
("drawEnterFun"
"drawEnterFun( ) 
=> t / nil"
"Redraws rubberbanding shapes. Called when an enterfunction is active.")
("setEFunFlightLineTarget"
"setEFunFlightLineTarget() 
=> t / nil"
"Sets a target point for the enterLine function so that a flight line is drawn from the cursor to this point.")
("hiEncap"
"hiEncap(
[ g_boxSpec ]
[ t_cmd ]
[ t_title ]
) 
=> w_window / nil"
"Invokes an encapsulation session by creating and displaying an encapsulation window. ")
("hiSetEncapSkillCmd"
"hiSetEncapSkillCmd(
w_windowId
t_skillCmd 
) 
=> t / nil"
"Registers the SKILL function that wraps or embraces the input command line entered during the current encapsulation session. ")
("hiGetEncapSkillCmd"
"hiGetEncapSkillCmd(
w_window 
) 
=> t_skillCmd"
"Returns the SKILL function associated with a window. ")
("hiSetEncapPrompt"
"hiSetEncapPrompt(
w_window 
t_prompt 
) 
=> t / nil"
"Sets the prompt for an encapsulation window.")
("hiSetEncapHistory"
"hiSetEncapHistory(
w_window 
t_msg
[ g_redraw ] 
) 
=> t / nil"
"Copies a message into the next available insertion position in an encapsulation output window.")
("hiAppendInputCmd"
"hiAppendInputCmd(
w_window 
t_cmd 
) 
=> t / nil"
"Appends a command to the input area of an encapsulation window. ")
("hiFocusToEncap"
"hiFocusToEncap(
w_encap 
[ w_window ] 
) 
=> t / nil"
"Temporarily focuses the keyboard input to an encapsulation window. ")
("view"
"view(
t_file
[ g_boxSpec ]
[ g_title ]
[ g_autoUpdate ]
[ l_iconPosition ]
[ g_deviceMode ]
) 
=> w_windowId / nil"
"Creates a viewfile window, inserts the menu bar, sets the window and icon names, specifies how to load the file in the window, and displays the file in the window. view is a wrapper function.")
("hiViewfile"
"hiViewfile( 
)
=> l_filePath / nil"
"Brings up a form in which you can specify a file to view and then calls the view function on the file.")
("hiViewTextFile"
"hiViewTextFile(
t_file
?winSpec g_winspec
?title g_title
?appName g_appName
?help g_help
?iconPosition l_iconPosition
?deviceMode g_deviceMode
?pluginFactory g_pluginFactory
?fixedFont g_fixedFont
) 
=> w_windowId / nil"
"Creates a viewfile window, inserts the menu bar, sets the window and icon names, specifies how to load the file in the window, and displays the file in the window.")
("hiSetViewfile"
"hiSetViewfile(
w_windowId 
t_fileName
[ g_deviceMode ]
) 
=> t / nil"
"Reads a file and displays its contents in a viewfile window that has already been created. ")
("hiSaveViewfile"
"hiSaveViewfile(
[ w_windowId ] 
[ t_fileName ] 
[ g_donotOverwrite ]
) 
=> t / nil"
"Saves the contents of the viewfile window to a file on disk. If you do not specify any arguments, a Save As form appears that lets you select the file.")
("hiSaveAsViewfile"
"hiSaveAsViewfile(
[ w_windowId ] 
[ t_fileName ] 
) 
=> t / nil"
"Saves the contents of the current window to the specified name. ")
("hiStartGenTextIndex"
"hiStartGenTextIndex(
w_windowId 
t_text 
) 
=> x_index / nil"
"Searches the specified text string from the beginning of the file and returns the first character position of the matching text. ")
("hiGenTextIndex"
"hiGenTextIndex(
w_windowId 
t_text 
x_fromIndex 
) 
=> x_index / nil"
"Returns the character position that is the next occurrence of the text string relative to a specified position in the file.")
("hiGetTextSelection"
"hiGetTextSelection(
w_windowId
[ x_class ]
) 
=> l_text / nil"
"Retrieves the currently selected text strings from within a specified class. ")
("hiGetTextSelByLoc"
"hiGetTextSelByLoc(
w_windowId
[ x_class ]
) 
=> l_locationPair / nil"
"Returns a list of starting and ending location pairs of all selected text strings in the specified class. ")
("hiSetTextSelection"
"hiSetTextSelection(
w_windowId 
t_text
[ x_class ]
) 
=> t / nil"
"Highlights the next occurrence of a specified string relative to the current cursor position. If no matching string is found between the current cursor position and the end of the file, it wraps around to the beginning of the file and continues the search.")
("hiSelectTextByLoc"
"hiSelectTextByLoc(
w_windowId 
l_locationPair
[ x_class ]
) 
=> t / nil"
"Highlights a list of strings specified as a list of starting and ending location pairs.")
("hiGetCurrentTextSelection"
"hiGetCurrentTextSelection(
w_windowId
)
=>t_selectedText / nil"
"Returns the text selected in the specified viewfile window. This is the text which has been selected by using a mouse button action, such as by double-clicking or drag-selecting. If no text appears selected, the function returns nil.")
("hiClearCurrentTextSelection"
"hiClearCurrentTextSelection(
w_windowId
)
=> t / nil"
"Clears current selection, if any, in the specified text window. This is equivalent to clicking anywhere in the text window when text is selected.")
("hiGetCurrentTextSelectionLoc"
"hiGetCurrentTextSelectionLoc(
w_windowId
)
=> l_listofCoords / nil"
"Returns the text coordinates of the text selected in the specified viewfile window.  This is the text which has been selected using a mouse action, such as by double-clicking or drag-selecting. If no text is selected in the specified window, the function returns nil.")
("hiSetCurrentTextSelectionLoc"
"hiSetCurrentTextSelectionLoc(
w_windowId 
x_startIndex 
x_endIndex 
)
=> t | nil"
"Selects the range of text specified by the start and end indexes in the given text window. This is equivalent to selecting the text with the mouse.")
("hiSetTextSelectAll"
"hiSetTextSelectAll(
w_windowId 
t_text
[ x_class ]
) 
=> t / nil"
"Highlights all occurrences of a specified string and resets the cursor to the top of the file. ")
("hiUnselectText"
"hiUnselectText(
w_windowId
t_text
[ x_class ]
) 
=> t / nil"
"Unhighlights the next occurrence of selected text in the viewfile relative to the cursor position. ")
("hiUnselectTextByLoc"
"hiUnselectTextByLoc(
w_windowId
l_locationPair
[ x_class ]
) 
=> t / nil"
"Unhighlights selected text specified as a list of starting and ending location pairs in the given window.")
("hiUnselectTextClass"
"hiUnselectTextClass(
w_windowId
x_class
)
=> t / nil"
"Unhighlights all occurrences of selected text belonging to the specified class.")
("hiUnselectTextAll"
"hiUnselectTextAll
w_windowId
[ t_text ]
[ x_class ]
) 
=> t / nil"
"Unselects (unhighlights) all occurrences of the selected text that match with the specified pattern t_text and class x_class in the viewfile. If the search pattern t_text is not specified, unselects all occurrences of the selected text of all classes. If the class x_class is not specified, unselects all occurrences of the selected text that match with the specified pattern t_text. Afterwards, the cursor position is reset to the top of the file. If an empty string is passed for t_text, and x_class is specified, unselects all strings selected in that class")
("hiGoToLine"
"hiGoToLine(
w_windowId
x_lineNo
?highlight g_highlight
?align g_align
?forceAlign g_forceAlign
)
=> t / nil"
"Positions the specified line number onscreen for a given text window")
("hiGoToIndex"
"hiGoToIndex(
w_windowId
x_indexNo
?highlight g_highlight
?align g_align
?forceAlign g_forceAlign
)
=> t / nil"
"Positions the specified character index within the viewport for a given text window")
("hiScrollWindowLeft"
"hiScrollWindowLeft(
w_windowId 
) 
=> t / nil"
"Scrolls the window left one screenful of text at a time. ")
("hiScrollWindowRight"
"hiScrollWindowRight(
w_windowId 
) 
=> t / nil"
"Scrolls the window right one screenful of text at a time. ")
("hiScrollWindowUp"
"hiScrollWindowUp(
w_windowId 
) 
=> t / nil"
"Scrolls the window up one screenful of text at a time.")
("hiScrollWindowDown"
"hiScrollWindowDown(
w_windowId 
) 
=> t / nil"
"Scrolls the window down one screenful of text at a time. ")
("hiScrollWindowTop"
"hiScrollWindowTop(
w_windowId 
) 
=> t / nil"
"Scrolls the window to the top position of the viewable window. ")
("hiScrollWindowBottom"
"hiScrollWindowBottom(
w_windowId 
) 
=> t / nil"
"Scrolls the window to the bottom position of the viewable window. ")
("hiScrollWindowToCurrentIndex"
"hiScrollWindowToCurrentIndex(
w_windowId 
) 
=> t / nil"
"Scrolls the window to the current cursor index position in the viewable window. ")
("hiScrollWindowToIndex"
"hiScrollWindowToIndex(
w_windowId 
x_index 
) 
=> t / nil"
"Scrolls the window to the index position in the specified window and forces the text at the given position to be displayed.")
("hiScrollWindowToName"
"hiScrollWindowToName(
w_hypertextWindow
t_linkName
)
=> t / nil"
"Scrolls a hypertext window to a link and displays the text associated with the link. A hypertext window is a text window that can display text with hyperlinks in it.")
("hiGetCurrentIndex"
"hiGetCurrentIndex(
w_windowId 
) 
=> x_index / nil"
"Returns the current cursor index position relative to all the text in the window. ")
("hiSetCurrentIndex"
"hiSetCurrentIndex(
w_windowId 
x_index 
) 
=> t / nil"
"Sets the current cursor index position relative to all the text in a window and scrolls the window if needed. ")
("hiClearClipboard"
"hiClearClipboard(
[ s_mode ]
) 
=> t / nil"
"Clears the text stored in the system clipboard.")
("hiGetClipboard"
"hiGetClipboard(
s_mode 
) 
=> t_value / nil"
"Returns the text stored in the system clipboard.")
("hiSetClipboard"
"hiSetClipboard(
t_text
[ s_mode ]
) 
=> t / nil"
"Sets the text to be pushed to the system clipboard.")
("hiDisableTailViewfile"
"hiDisableTailViewfile(
w_windowId 
) 
=> t / nil"
"Turns off the ability to repeatedly read from the end of a file. ")
("hiEnableTailViewfile"
"hiEnableTailViewfile(
w_windowId 
) 
=> t / nil"
"Turns on the ability to repeatedly read from the end of a file and update the viewfile window. This will continually update the viewfile window with text that is appended to the end of the file being viewed. This only works when appending to a file. If the file is modified in another way (such as edited using an editor), the results are unpredictable. This function is equivalent to the UNIX command tail_f and works the same way.")
("hiGetTextClass"
"hiGetTextClass(
w_windowId 
) 
=> x_class / nil"
"Returns the value of the current active text class. If hiSetTextClass() has not been set, the current active text class will be 0. Also, a few other functions may reset the active text class back to 0 or possibly another value. Otherwise the currently active text class will be the one set by the last call to hiSetTextClass().")
("hiSetTextClass"
"hiSetTextClass(
w_windowId 
x_class
) 
=> t / nil"
"Sets the active selection (highlight) text class in a window. ")
("hiSetTextHighlightColor"
"hiSetTextHighlightColor(
x_class
l_foreground
l_background 
) 
=> t / nil"
"Sets the foreground and background highlight colors of a class to the specified RGB value. ")
("hiTextDisplayString"
"hiTextDisplayString(
w_windowId 
t_text
g_erase
[ g_dontScrollTop ]
) 
=> t / nil"
"Displays a text string in a window.")
("hiRefreshTextWindow"
"hiRefreshTextWindow(
w_window
) 
=> t / nil"
"Redraws all the selections and refreshes the viewfile window. ")
("hiUpdateTextSelectionColors"
"hiUpdateTextSelectionColors(
w_windowId 
) 
=> t / nil"
"Redraws all selections visible in the window and updates any colors previously reset with hiSetTextHighlightColor. ")
("hiGetTextWordDelimiter"
"hiGetTextWordDelimiter(
w_windowId 
) 
=> l_delimiters / nil"
"Returns the current settings of the word delimiter list for the window. ")
("hiAddTextWordDelimiter"
"hiAddTextWordDelimiter(
w_windowId
t_delimiters 
) 
=> t / nil"
"Adds characters to the word delimiter list for the window.")
("hiRemoveTextWordDelimiter"
"hiRemoveTextWordDelimiter(
w_windowId
t_delimiters 
) 
=> t / nil"
"Removes characters from the word delimiter list for the window. ")
("hiReplaceTextWordDelimiter"
"hiReplaceTextWordDelimiter(
w_windowId
t_delimiters 
) 
=> t / nil"
"Replaces the original word delimiters for the window with a new set of characters. ")
("hiGetTextCharAtLoc"
"hiGetTextCharAtLoc(
w_windowId
x_location 
) 
=> c_text / nil"
"Returns the character of the specified character index location for a window. ")
("hiGetTextSourceLength"
"hiGetTextSourceLength(
w_windowId 
) 
=> x_length / nil"
"Returns the length of the source in a window.")
("hiGetTextLineColumn"
"hiGetTextLineColumn(
w_windowId
x_location 
) 
=> l_lineColumn / nil"
"Returns the line and column number for an index location in a window.")
("hiGetTextIndexLoc"
"hiGetTextIndexLoc(
w_windowId
x_line
x_column 
) 
=> x_location / nil"
"Returns the character index location of a line and column number in a window.")
("hiGetTextDispLoc"
"hiGetTextDispLoc(
w_windowId 
) 
=> l_topBottom / nil"
"Returns the top and bottom character locations of the current visible region of a window.")
("hiLookupHRFtag"
"hiLookupHRFtag(
S_tagName
S_fileName
)
=> l_command / nil"
"Returns the command that has been defined as the help response for a help tag in a .HRF file. You can get more information about the usage of this function from the your_install_dir/tools/dfII/samples/local/hrfHelp.il file.")
("hiHelp"
"hiHelp( 
s_objType
S_objName 
[ g_objDetail ]
[ g_moreDetail ]
)
=> t / nil"
"Constructs a help symbol from its arguments and invokes the Cadence Help API to display the help document associated with the help symbol. If the hiHelpAction property is set, hiHelp executes the callback associated with the property, instead of calling the Cadence Help API. hiHelp is the main service routine for the online help system.")
("hiModalDBoxHelp"
"hiModalDBoxHelp(
t_helpString 
[ t_dboxName ]
)
=> t / nil"
"Displays a message in a modal dialog box. A modal dialog box is a blocking dialog box-it waits for an acknowledgement before allowing the application to continue.")
("hiModelessDBoxHelp"
"hiModelessDBoxHelp(
t_helpString 
[ t_dboxName ]
)
=> t / nil"
"Displays a message in a modeless dialog box. A modeless dialog box is a non-blocking dialog box-it does not wait for an acknowledgement before allowing the application to continue.")
("nrDialogAccept"
"nrDialogAccept(
o_dialogBox
)
=> t / nil"
"Function logged when a dialog box is accepted, that is, when the Return key is pressed or buttons such as OK, Yes, or Done in the dialog box are clicked. This function is logged only for native Qt dialog boxes. This function is intended only for replay use and should not be called explicitly.")
("nrListColumnMove"
"nrListColumnMove(
o_listView
x_position
x_newPosition
)
=> t / nil"
"Function logged when a column in a list/tree view (created with the Qt QListView class) is moved. This function is intended only for replay use and should not be called explicitly.")
("nrListColumnSort"
"nrListColumnSort(
o_listView
x_position
)
=> t / nil"
"Function logged when a column in a list/tree view (created with the Qt QListView class) is sorted. This function is intended only for replay use and should not be called explicitly.")
("nrListItemAction"
"nrListItemAction(
o_listView
t_position
)
=> t / nil"
"Function logged when the action associated with an item in a list/tree view (created with the Qt QListView class) is invoked by double-clicking on the item. This function is intended only for replay use and should not be called explicitly.")
("nrListItemExpand"
"nrListItemExpand(
o_listView
t_listItem
g_expandedOrCollapsed
)
=> t / nil"
"Function logged when an item in a list/tree view (created with the Qt QListView class) is expanded or collapsed. This function is intended only for replay use and should not be called explicitly.")
("nrListItemRename"
"nrListItemRename(
o_listView
t_itemName
x_columnIndex
t_newItemName
)
=> t / nil"
"Function logged when an item in a list/tree view (created with the Qt QListView class) is renamed. This function is intended only for replay use and should not be called explicitly.")
("nrResizeWindow"
"nrResizeWindow(
o_window
l_coordinates
)
=> t / nil"
"Function logged when a window is resized or moved. This function is intended only for replay use and should not be called explicitly.")
("nrSetCurrentWindow"
"nrSetCurrentWindow(
o_window
[ t_subWindowName ]
)
=> t / nil"
"Function logged when the current window is set. This function is intended only for replay use and should not be called explicitly.")
("nrSetFileFilter"
"nrSetFileFilter(
o_dialog
t_filter
)
=> t / nil"
"Function logged when a file filter is selected in a file dialog box. This function is intended only for replay use and should not be called explicitly.")
("nrSetWindowVisibility"
"nrSetWindowVisibility(
o_window
t_showOrHide
)
=> t / nil"
"Function logged when a window is displayed, removed from the screen, or iconified. When a window is displayed, the second argument of this function is the string show, when a window is removed, the second argument is hide, and when a window is iconified, the second argument is min. This function is intended only for replay use and should not be called explicitly.")
("nrUpdateMenu"
"nrUpdateMenu(
o_popupMenu
)
=> t / nil"
"Function logged when the contents of a dynamic popup menu are modified. This function is logged for menus derived from the nrReplayPopupMenu class, which is a part of the native Qt replay library. The function is logged whenever the contentsChanged signal is emitted from the menu. This function is intended only for replay use and should not be called explicitly.")
("dlMakeDisplayList"
"dlMakeDisplayList(
) 
=> w_displayList / nil "
"Creates an empty display list you can add objects to. ")
("dlSetClearOnDraw"
"dlSetClearOnDraw(
w_dlist
x_widgetId
g_draw
) 
=> t / nil"
"Specifies whether the area the display list is drawn in is cleared before the display list is drawn.")
("dlAddArc"
"dlAddArc(
w_dlist 
x_penNumber 
l_point1 
l_point2 
n_startAngle 
n_sweepAngle
[ s_tagSymbol ]
) 
=> t / nil"
"Adds an arc to the display list.")
("dlAddBox"
"dlAddBox(
w_dlist 
x_penNumber 
l_point1 
l_point2 
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a box to the display list.")
("dlAddCircle"
"dlAddCircle(
w_dlist 
x_penNumber 
l_point
x_radius 
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a circle to the display list. ")
("dlAddDonut"
"dlAddDonut(
w_dlist 
x_penNumber 
l_point 
x_innerRadius 
x_outerRadius
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a donut to the display list. ")
("dlAddEventObject"
"dlAddEventObject(
w_dlist 
l_point1 
l_point2 
t_procName 
t_procArgs
[ t_highlightMode ]
[ g_doesGraphics ]
[ s_tagSymbol ]
) 
=> t / nil"
"Adds an EventObject to the display list. EventObjects are SKILL procedures called whenever the user presses a mouse button or a keyboard key. If the s_doesGraphics argument is t, the EventObject is called whenever the display list is drawn.")
("dlAddPath"
"dlAddPath(
w_dlist 
x_penNumber 
x_pathWidth 
t_pathEndType 
l_pointsList
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a path to the display list.")
("dlAddPoint"
"dlAddPoint(
w_dlist 
x_penNumber 
l_point 
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a point to the display list.")
("dlAddPolygon"
"dlAddPolygon(
w_dlist 
x_penNumber 
l_pointsList
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a polygon to the display list.")
("dlAddRasterText"
"dlAddRasterText(
w_dlist 
x_penNumber 
l_point 
t_text 
t_fontName 
[ t_verticalJustify ]
[ t_horizontalJustify ]
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a text string to the display list. ")
("dlAddSegment"
"dlAddSegment(
w_dlist 
x_penNumber 
l_point1 
l_point2 
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a line segment to the display list.")
("dlAddSkillObject"
"dlAddSkillObject(
w_dlist 
x_penNumber 
l_point1 
l_point2 
t_procName 
t_procArgs
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a SkillObject to the display list. SkillObjects are SKILL procedures called whenever the object should be drawn. ")
("dlAddStrokeText"
"dlAddStrokeText(
w_dlist 
x_penNumber 
l_point 
t_text 
t_justification 
t_fontName 
x_height 
[ t_orientation ]
[ g_drafting ]
[ s_tagSymbol ]
) 
=> t / nil"
"Adds a stroke text string to the display list.")
("dlDrawArc"
"dlDrawArc(
l_point1 
l_point2 
f_startAngle 
f_sweepAngle
) 
=> t / nil"
"Draws an arc to the screen from within a SkillObject procedure. ")
("dlDrawBox"
"dlDrawBox(
l_point1 
l_point2 
) 
=> t / nil"
"Draws a box to the screen from within a SkillObject procedure. ")
("dlDrawCircle"
"dlDrawCircle(
l_point 
x_radius 
) 
=> t / nil"
"Draws a circle to the screen from within a SkillObject procedure.")
("dlDrawDonut"
"dlDrawDonut(
l_point 
x_innerRadius 
x_outerRadius
) 
=> t / nil"
"Draws a donut to the screen from within a SkillObject procedure.")
("dlDrawPath"
"dlDrawPath(
x_pathWidth 
t_pathEndType 
l_pointsList
) 
=> t / nil"
"Draws a path to the screen from within a SkillObject procedure. A path is specified by a center line and a width.")
("dlDrawPoint"
"dlDrawPoint(
l_point 
) 
=> t / nil"
"Draws a point to the screen from within a SkillObject procedure. ")
("dlDrawPolygon"
"dlDrawPolygon(
l_pointsList
) 
=> t / nil"
"Draws a polygon to the screen from within a SkillObject procedure. ")
("dlDrawRasterText"
"dlDrawRasterText(
l_point 
t_text 
t_fontName 
[ t_verticalJustify ] 
[ t_horizontalJustify ]
) 
=> t / nil"
"Draws a text string to the screen from within a SkillObject. The text is drawn using an X Window System font..")
("dlDrawSegment"
"dlDrawSegment(
l_point1 
l_point2 
) 
=> t / nil"
"Draws a line segment to the screen from within a SkillObject procedure.")
("dlDrawStrokeText"
"dlDrawStrokeText(
l_point 
t_text 
t_justification 
t_fontName 
x_height 
t_orientation
) 
=> t / nil"
"Draws a stroke text string to the screen from within a SkillObject procedure. The height (and therefore scale) can be specified. ")
("dlMakePenTable"
"dlMakePenTable(
[ x_maxPens]
) 
=> w_penTable / nil"
"Creates a pen table a display list can use. ")
("dlMakeStipple"
"dlMakeStipple(
t_StippleString 
) 
=> x_stippleId / nil"
"Creates a stipple pattern from the supplied string. ")
("dlSetCurrentPen"
"dlSetCurrentPen(
x_penNumber
) 
=> t / nil"
"Sets the specified pen number to the current pen. Changes the pen number objects are drawn with from within a SkillObject procedure. This function should only be called from within a SkillObject procedure. ")
("dlSetPenColor"
"dlSetPenColor(
x_penNumber 
x_colorIndex 
[ w_penTable ]
) 
=> t / nil"
"Changes the specified pen to the specified color index from the pen table.")
("dlSetPenFillStyle"
"dlSetPenFillStyle(
x_penNumber 
t_fillStyle 
[ w_penTable ] 
) 
=> t / nil"
"Sets the fill style of a pen. ")
("dlSetPenFilled"
"dlSetPenFilled(
x_penNumber
[ w_penTable ]
)
=> t / nil"
"Sets the fill style of a pen to SolidFill.")
("dlSetPenStipple"
"dlSetPenStipple(
x_penNumber 
x_stippleId 
[ w_penTable ] 
) 
=> t / nil"
"Sets the stipple pattern for a pen. ")
("dlSetPenTable"
"dlSetPenTable(
w_displayList 
w_penTableOrDisplayList 
) 
=> t / nil"
"Sets the pen table a display list will use. ")
("dlAttachDlistToWidget"
"dlAttachDlistToWidget(
w_displayList 
x_widgetId
) 
=> x_widgetId / nil"
"Attaches a display list to a widget.")
("dlAttachDlistToWindow"
"dlAttachDlistToWindow(
w_displayList 
w_windowId 
) 
=> t / nil"
"Attaches a display list to the window defined by w_windowId. This function can be used to preview a display list. ")
("dlClearDisplayList"
"dlClearDisplayList(
w_displayList
) 
=> t / nil"
"Removes all the objects from a display list. ")
("dlCloseWidget"
"dlCloseWidget(
x_widgetId 
) 
=> t / nil"
"Closes (destroys) a widget.")
("dlConfigureButton"
"dlConfigureButton(
x_button
x_xPosition
x_yPosition
x_width
x_height
) 
=> t / nil"
"Moves a button to another location. Both the x and y position are specified in X Window System coordinates, where 0:0 is the upper left corner of the screen.")
("dlDetachDlistFromWidget"
"dlDetachDlistFromWidget(
w_displayList 
x_widgetId
) 
=> t / nil"
"Detaches a display list from a widget.")
("dlDetachDlistFromWindow"
"dlDetachDlistFromWindow(
w_displayList 
w_windowId 
) 
=> t / nil"
"Detaches a display list (w_displayList) from the window defined by w_windowId. ")
("dlDisplay"
"dlDisplay(
w_displayList 
) 
=> t / nil"
"Redraws the display list (w_displayList) in all the windows and buttons it is currently attached to.")
("dlDlistToIcon"
"dlDlistToIcon(
w_displayList 
x_width 
x_height 
[ x_backColorIndex ] 
) 
=> l_iconId / nil"
"Converts a displayList to an icon. ")
("dlEnableItem"
"dlEnableItem(
w_dlist 
x_penNumber 
s_symbolTag 
g_enableOrDisable 
) 
=> t / nil"
"Allows you to turn on or off shapes within a display list that match the provided symbol. All shapes on pen x_penNumber are searched and checked to see if the symbolTag matches.")
("dlGetRasterTextWidth"
"dlGetRasterTextWidth(
t_fontName
t_text
) 
=> x_width / -1"
"Retrieves width of the text in pixels for the specified raster font.")
("dlFitDlistOnDraw"
"dlFitDlistOnDraw(
w_displayList
x_widgetId
g_doFit 
) 
=> t / nil"
"Specifies whether a display list should automatically fit within the specified widget. ")
("dlMakeDlistButton"
"dlMakeDlistButton(
x_parentWidgetId
x_xPosition
x_yPosition
x_width
x_height
w_displayList
t_pressCallback
[ x_backgroundColor ]
) 
=> t / nil"
"Creates a button to display a display list in. The display list button is a rectangular region with a widget or window in which a display list is drawn and which dispatches a callback whenever the left mouse button is pressed within it.")
("dlMakeWidget"
"dlMakeWidget(
[ x_backgroundColor ] 
[ l_point1 ]
[ l_point2 ]
) 
=> x_widgetId / nil"
"Creates a general purpose window (or widget). Uses of this widget can be for fixed menus or graphic display panels. Both points are specified in X Window System coordinates, where 0:0 is the upper-left corner of the screen.")
("dlMapWidget"
"dlMapWidget(
x_widgetId 
) 
=> t / nil"
"Puts a widget back on the screen after a call to dlUnMapWidget. This function also applies to buttons. ")
("dlMoveButton"
"dlMoveButton(
x_button
x_xPosition
x_yPosition
) 
=> t | nil"
"Moves a button to another location. Both the x and y position are specified in X Window System coordinates, where 0:0 is the upper-left corner of the screen.")
("dlQueryRasterFont"
"dlQueryRasterFont(
t_fontName
) 
=> l_fontProperties / nil"
"Returns the font property list for the raster font.")
("dlResizeButton"
"dlResizeButton(
x_button
x_width
x_height
) 
=> t / nil"
"Resizes a button.")
("dlSaveDlist"
"dlSaveDlist(
w_displayList 
t_fileName 
t_dlistName
) 
=> t / nil"
"Saves the display list. ")
("dlSetDlistPosition"
"dlSetDlistPosition(
w_displayList
x_widgetId
x_xOffset
x_yOffset 
) 
=> t / nil"
"Specifies the scale factor to map from display list coordinates to screen coordinates. The offsets only have effect if auto-fitting was turned off (via dfIIFitDlistOnDraw).")
("dlSetDlistScale"
"dlSetDlistScale(
w_displayList
x_widgetId
f_scale 
) 
=> t / nil"
"Specifies the scale factor to map from display list coordinates to screen coordinates. This scale factor only has effect if auto-fitting was turned off (using dfIIFitDlistOnDraw).")
("dlSetWidgetName"
"dlSetWidgetName(
x_widgetId 
t_name
) 
=> t / nil"
"Sets the text displayed by the window manager banner. ")
("dlUnMapWidget"
"dlUnMapWidget(
x_widgetId 
) 
=> t / nil"
"Removes the widget from the screen, but does not destroy it. This function also applies to buttons. ")
("dagAddActionToObject"
"dagAddActionToObject(
l_action
w_object
) 
=> t_actionName / nil"
"Adds the action to the specified dag node or class. However, if the action is already in the list, it is not replaced. For an existing action, use dagDeleteActionFromObject to delete the action and then call dagAddActionToObject.")
("dagCreateClass"
"dagCreateClass(
t_className
)
=> w_class / nil"
"Creates a dagClass and returns it. If a class by this name already exists, it is overwritten. ")
("dagCreateNode"
"dagCreateNode(
t_nodeName
w_class
)
=> w_node / nil"
"Creates a dagNode and returns it.")
("dagDeleteActionFromObject"
"dagDeleteActionFromObject(
t_actionName
w_object 
) 
=> t / nil"
"Deletes the action named t_actionName from the specified class or node. If a node's action was inherited from its class, the action must be deleted from the class, not the node. ")
("dagDestroyNode"
"dagDestroyNode(
w_node
)
=> t / nil"
"Destroys a dagNode. All descendant nodes and arcs of this node are also destroyed, as well as the arcs linking this node to its parents.")
("dagDisplayTool"
"dagDisplayTool(
[ w_dagTool ]
[ g_runPlacer ]
) 
=> t / nil"
"Redisplays a dagTool. You can use this function if you want to re-display all of the objects in the graph rather than calling dagRefreshObject for each one.")
("dagGetCurrentObject"
"dagGetCurrentObject() 
=> w_object / nil"
"Often, when writing action procedures or SKILL objects, you need to know the node for which the action was selected. dagGetCurrentObject does this. It takes no arguments and returns the current node, or nil.")
("dagGetCurrentTool"
"dagGetCurrentTool() 
=> w_dagTool / nil"
"Returns the current dagTool, and nil if there is not a current dagTool. The current dagTool is different from the current window. The current tool might not be the current window. ")
("dagLinkParentToChild"
"dagLinkParentToChild(
w_parent
w_child 
)
=> w_arc / nil"
"Creates a dagArc that links the parent node to the child node. It returns the arc it creates. If an error occurs, it returns nil. ")
("dagNumToTool"
"dagNumToTool(
x_toolNumber
) 
=> w_dagTool / nil"
"Returns the dagtool that matches the window number specified by x_toolNumber. ")
("dagOpenTool"
"dagOpenTool(
x_backGroundColor
l_bBox
w_startingObject
t_name
t_help
) 
=> w_dagTool / nil"
"Creates a dagTool object and opens a window in which to display the graph starting from the specified starting node.")
("dagPopTool"
"dagPopTool(
w_dagTool
) 
=> t / nil"
"Pops the tool stack (specified by the w_dagTool argument).")
("dagPushTool"
"dagPushTool(
w_dagTool
w_newStartingNode
) 
=> t / nil"
"Pushes a new starting object (specified by the w_newStartingNode argument) onto the stack of the tool (specified by w_dagTool).")
("dagRefreshObject"
"dagRefreshObject(
w_dagNode
)
=> t / nil"
"Redraws the node (specified by w_dagNode) in all the tools it is currentlydisplayed in.")
("dagSetActionStatus"
"dagSetActionStatus(
t_actionName
w_dagObject
g_status 
)
=> t / nil"
"Sets the status of the specified action in the action list of the class or node. An action that has been turned off is grayed-out in the pop-up menu and not available through its action accelerator, if any.")
("dagSetCurrentTool"
"dagSetCurrentTool(
w_dagTool
)
=> t / nil"
"Sets the current dagTool to the one specified by the w_dagTool argument.")
("dagSetExpandedActionStatus"
"dagSetExpandedActionStatus(
t_actionName
w_dagObject
g_status
)
=> t / nil"
"Sets the status of the specified action in the expanded-action list of a node. Setting the status to nil makes the action name appear gray in the pop-up menu and makes the action accelerator unavailable. Once a dagNode has been placed into a tool, the actions from the dagClass are concatenated to make a full list of actions for this node. This is known as the expanded-action list.")
("dagSetFont"
"dagSetFont(
t_XFontName
)
=> t / nil"
"Modifies the font used in text mode in any dag tool.")
("dagUnlinkParentFromChild"
"dagUnlinkParentFromChild(
w_arc
)
=> t / nil"
"Unlinks a parent node from a child node. It takes, as its only argument, the dagArc that connects the parent to the child. The arc is destroyed; however, neither the parent node nor the child node is destroyed. This can be useful if you want to change the parent of a node. ")
("hiSleep"
"hiSleep"
"The hiSleep() function is an alias for the ipcSleep function.")
("hiGetStrokeBBox"
"hiGetStrokeBBox( ) 
=> l_boundingBox / nil"
"Returns the bounding box of the stroke when within a callback initiated by a stroke.")
("hiGetStrokeFirstPt"
"hiGetStrokeFirstPt( ) 
=> l_point / nil"
"Returns the point location of the first pixel of a stroke when within a callback initiated by a stroke.")
("hiGetStrokeLastPt"
"hiGetStrokeLastPt( ) 
=> l_point / nil"
"Returns the point location of the last pixel of a stroke when within a callback initiated by a stroke.")
("hiStroke"
"hiStroke( 
[ l_point ]
) 
=> t / nil"
"Mouse callback that initiates a stroke command.")