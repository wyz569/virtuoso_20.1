;SKILL Language Functions
("annToggleInfoBalloonVisibilityStatus"
"annToggleInfoBalloonVisibilityStatus(
)
=> t / nil"
"Toggles the visibility of the annotation balloons on the schematic canvas. Also, displays and removes the pinned balloons on all open schematic windows.")
("annPinCurrentInfoBalloon"
"annPinCurrentInfoBalloon(
t_windowId
)
=> t / nil"
"Pins the current unpinned annotation balloon on the specified schematic window.")
("cdsName"
"cdsName( 
)"
"The cdsName function uses information about the instance currently being drawn in order to compute the data returned by the schematic editor during a redraw. Consequently, cdsName is only intended to be called as the value of an ILLabel on a symbol, and is not intended for direct evaluation during a program. If it is invoked directly, information on the current drawn instance will not be available. The cdsName will display label information, usually placed on the layer annotate drawing7, near the cell name or instance name.")
("cdsNetExpr"
"cdsNetExpr( 
)"
"The cdsNetExpr function is used inside the ILLabel that is created using the Create - Net Expression command. This function uses information about the instance currently being drawn in order to compute the data returned by the schematic editor during a redraw. Consequently, cdsNetExpr is only intended to be called as the value of an ILLabel on a symbol, and is not intended for direct evaluation during a program. If it is invoked directly, information on the current drawn instance will not be available.")
("cdsParam"
"cdsParam( 
n_index
)"
"The cdsParam function displays label information, usually placed on the layer annotate drawing, about the parameter values or backannotated parameter values. This function uses information about the instance currently being drawn in order to compute the data returned by the schematic editor during a redraw. Consequently, cdsParam is only intended to be called as the value of an ILLabel on a symbol, and is not intended for direct evaluation during a program. If it is invoked directly, information on the current drawn instance will not be available.")
("cdsTerm"
"cdsTerm( 
s_pinName
)"
"The function cdsTerm displays label information, usually placed on the layer annotate drawing8, near the pin or a net attached to the pin. It is also attached to a cell symbol view when you use the Add Symbol Label form, and the Annotation Setup Form is used to control the display of this label type.")
("heHiEditConfig"
"heHiEditConfig( 
)
=> t"
"Opens the hierarchy editor if the current editing window has a design opened within the context of a configuration.")
("heHiSetInstBinding"
"heHiSetInstBinding( 
)
=> t"
"Sets the instance bindings of an instance in a cellview of open configurations. The form associated with this function is updated with current binding information. The new bindings are communicated to the hierarchy editor.")
("heHiShowViewsFound"
"heHiShowViewsFound( 
)
=> t"
"Shows the current view being used for each instance in a form.")
("heHiUpdate"
"heHiUpdate( 
)
=> t"
"Updates the information in the hierarchy editor after you edit the configuration.")
("schAddSelectPt"
"schAddSelectPt(
)
=> t"
"Selects the object under the cursor. Maintains the selected set and adds the object to the selected set. Usable when editing schematics. Is equivalent to the Graphics Editor mouseAddSelectPt function. Provides other functions with the identity of the most recently selected object, which is required for extended selection.")
("schDirectEdit"
"schDirectEdit( 
x_index 
)
=> t"
"Directly edits or manipulates the object under the cursor. Usable when editing schematics and symbols.")
("schExtendSelectPt"
"schExtendSelectPt(
)
=> t"
"Extends the selection of the object under the current cursor position by selecting objects around the current object. Usable only when editing schematics.")
("schHiAbout"
"schHiAbout(
)
=> t"
"Opens the product information window, which indicates the schematic editor release number and copyright information.")
("schHiAlternateView"
"schHiAlternateView(
)
=> t"
"Changes the view name of a single component by toggling through the list of possible views. Usable only while editing a schematic cellview. Operates on one instance at a time.")
("schHiAlign"
"schHiAlign(
s_justify 
[ g_windowId ]
)
=> t / nil"
"Aligns the objects on the canvas. If the objects are already selected on the canvas, the pre-select mode is used; otherwise, the post-select mode is used for aligning the objects. For details, refer to Aligning.")
("schHiCellViewProperty"
"schHiCellViewProperty(
)
=> t"
"Displays the options form showing the properties for the current cellview. Usable only when editing schematic or symbol cellviews.")
("schHiChangeEditMode"
"schHiChangeEditMode( 
t_newMode 
)
=> t"
"Sets the mode for the design in the current window to read or append. The mode is the same as that supplied to dbOpenCellViewByType.")
("schHiCheck"
"schHiCheck(
[ ?action t_action ] 
[ @rest rest ]
)
=> t"
"Checks the connectivity of a schematic and optionally starts the schematic rules checker (SRC) or the cross-view checker (VIC). Usable only when editing schematics. A dialog box shows the total number of errors and warnings detected when the function is complete. The schematic can be read-only or editable.")
("schHiCheckAndSave"
"schHiCheckAndSave(
)
=> t"
"Performs the checks specified by the check options and saves the schematic to disk under the same cell name and view name, and in the same library. Usable only when editing schematics.")
("schHiCheckHier"
"schHiCheckHier( 
[ ?action t_action ]
[ ?refLibs t_refLibs ] 
[ @rest t_action t_refLibs ]
)
=> t"
"Performs the specified checks on the current schematic and the hierarchy below it. Also updates the connectivity as needed and runs the schematic rules checker (SRC), the cross-view checker (VIC), or both. Usable only when editing schematics. Only processes schematics found in the hierarchy starting from the current cellview. The view name list used to control the traversal is taken from the window in which the function is run.")
("schHiCloneSymbol"
"schHiCloneSymbol( 
[ ?libraryName t_libraryName ]
[ ?cellName t_cellName ]
[ ?viewName t_viewName ] 
[ @rest rest ]
)
=> t"
"Copies graphics from an existing symbol library into the symbol design you are currently editing. Usable only when editing symbols. If you do not specify any argument, the options form appears and prompts you for the values of these fields.")
("schHiComputePinRef"
"schHiComputePinRef( 
[ ?reportFile t_reportFile ] 
[ ?display t_display ] 
[ ?formatString t_formatString ]
[ ?reportDups t_reportDups ] 
[ ?sortByDir t_sortByDir ] 
[ @rest rest ]
)
=> t"
"Displays the Cross-Reference Options form for current index or sheet schematic, which computes, stores, and lists zone references for all pins and offsheet connectors in a multisheet schematic. The zone references identify where pins on other sheets reference the same net. Uses stored references to identify pin locations. The pin references can be displayed in the schematic alongside each pin or written to a report file. Can be used only when editing either the index or a sheet of a multisheet design. The index requires checking before zones can be computed.")
("schHiCopy"
"schHiCopy( 
[ ?formFlag g_formFlag ]
[ ?rows x_numrows ]
[ ?columns x_numcols ]
[ ?useSelSet t_useSelSet ] 
[ @rest rest ]
)
=> t"
"Copies objects and data such as object properties. Objects can be copied between different schematic cellviews. Usable when editing schematics or symbols.")
("schHiCreateBlockInst"
"schHiCreateBlockInst( 
[ ?libraryName t_libraryName ]
[ ?cellName t_cellName ]
[ ?viewName t_viewName ]
[ ?blockSampleName t_blockSampleName ] 
[ ?instanceName t_instanceName ]
[ ?pinNameSeed t_pinNameSeed ] 
[ @rest rest ]
)
=> t"
"Creates a block and places an instance of a block in a schematic. Usable only when editing schematics. If you do not type a library, cell, view, and instance name as arguments, the options form appears and prompts you for these values. The block choices are defined by the schBlockTemplate variable in the schConfig.il file. If you type freeform, the schematic editor prompts you to type a rectangular shape by clicking on two points of the rectangle.")
("schHiCreateInst"
"schHiCreateInst(
[ ?libraryName t_libraryName ]
[ ?cellName t_cellName ]
[ ?viewName t_viewName ]
[ ?instanceName t_instanceName ]
[ ?rows x_rows ]
[ ?columns x_columns ] 
[ @rest rest ]
)
=> t"
"Places an instance of a cellview in a schematic. Usable only when editing schematics.")
("schHiCreateInstBox"
"schHiCreateInstBox( 
[ ?autoBox g_autoBox ] 
[ @rest rest ]
)
=> t"
"Creates an instance box for the symbol you are editing. An instance box defines a rectangular region in which an instance of a symbol is selectable. Usable only when editing symbols.")
("schHiCreateKanjiSymbol"
"schHiCreateKanjiSymbol(
[ ?kanjiFile t_kanjiFile ]
[ ?libName t_libName ]
[ ?cellName t_cellName ]
[ ?viewName t_viewName ] 
[ @rest rest ]
)
=> t / nil"
"Creates a symbol view containing kanji characters based on the information in an EUC-packed format kanji file. The software generates a symbol cellview that contains kanji character graphics.")
("schHiCreateMappingSchematic"
"schHiCreateMappingSchematic(
)
=> t / nil"
"Displays the Create a Mapping Schematic form.")
("schHiCreateNetExpression"
"schHiCreateNetExpression( 
[ ?netExpr t_netExpr ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?fontHeight n_fontHeight ]
[ @rest rest ]
)
=> t"
"Creates an inherited connection and the corresponding net expression label. Usable when editing schematics or symbols.")
("schHiCreateNoteLabel"
"schHiCreateNoteLabel( 
[ ?text t_text ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?fontHeight n_fontHeight ]
[ ?type t_type ] 
[ @rest rest ]
)
=> t"
"Creates a note label to annotate the design for documentation purposes. These shapes do not affect connectivity. Usable when editing schematics or symbols.")
("schHiCreateNoteShape"
"schHiCreateNoteShape( 
[ ?shape t_shape ]
[ ?style t_style ]
[ ?width n_width ] 
[ @rest rest ]
)
=> t"
"Creates a shape to annotate the design for documentation purposes. These shapes do not affect connectivity. Usable when editing schematics or symbols.")
("schHiCreatePatchcord"
"schHiCreatePatchcord(
)
=> t / nil"
"Displays the Create Patchcord form where you can create, and add, a patchCord instance on a schematic along with appropriately named net stubs.")
("schHiCreatePin"
"schHiCreatePin(
[ ?terminalName t_terminalName ]
[ ?direction t_direction ]
[ ?usage t_usage ]
[ ?interpret t_interpret ]
[ ?mode t_mode ] 
[ ?netExpr t_netExpr ]
[ t_justify ]
[ t_fontStyle ]
[ n_fontHeight ]
)
=> t"
"Creates a pin of a specified type in your schematic. Usable only when editing schematics.")
("schHiCreateSheet"
"schHiCreateSheet(
[ ?number n_number ]
[ ?size t_size ]
[ ?type t_type ] 
[ @rest rest ]
)
=> t"
"Creates a sheet for a multisheet schematic. Usable only when editing schematics.")
("schHiCreateSymbolLabel"
"schHiCreateSymbolLabel(
[ ?labelChoice t_labelChoice ]
[ ?text t_text ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?fontHeight n_fontHeight ]
[ ?type t_type ]
[ @rest rest ]
)
=> t"
"Places labels in a symbol. Usable only when editing symbols.")
("schHiCreateSymbolPin"
"schHiCreateSymbolPin(
[ ?terminalName t_terminalName ]
[ ?type t_type ]
[ ?direction t_direction ]
[ ?interpret t_interpret ]
[ ?mode t_mode ]
[ ?incrCount n_incrCount ]
[ ?location t_location ]
[ @rest rest ]
)
=> t"
"Creates pins in a symbol. Usable only when editing symbols.")
("schHiCreateSymbolShape"
"schHiCreateSymbolShape(
[ ?shape t_shape ]
[ ?style t_style ]
[ ?width x_width ]
[ ?nonModal g_nonModal ]
[ @rest rest ]
)
=> t"
"Creates a line or shapes that describe a symbol. Usable only when editing symbols.")
("schHiCreateWire"
"schHiCreateWire(
[ ?width n_width ]
[ ?drawMode g_drawMode ]
[ ?routeMethod t_routeMethod ]
[ ?lockAngle t_lockAngle ]
[ ?nonModal g_nonModal ]
[ ?color t_color ]
[ ?lineStyle t_lineStyle ]
[ @rest rest ]
)
=> t"
"Creates different style wires that represent net connections in a schematic. Usable only when editing schematics.")
("schHiCreateWireLabel"
"schHiCreateWireLabel(
[ ?text t_text ]
[ ?purpose t_purpose ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?fontHeight n_fontHeight ]
[ ?interpret t_interpret ]
[ ?mode t_mode ]
[ ?netExprFlag g_netExprFlag ]
[ ?bundleDisplay t_bundleDisplay ]
[ @rest rest ]
)
=> t"
"Creates wire labels in a schematic. Physical contact between a label and wire is not required. You can move a label independently from a wire. When you move a wire that has a label glued to it, the label also moves. Usable only when editing schematics.")
("schHiCreateWireStubs"
"schHiCreateWireStubs(
)
=> t / nil"
"Starts the Create Wire Stubs and Names command.")
("schHiDefaultAction"
"schHiDefaultAction(
)
=> t / nil"
"Performs the default editing action for the object under the cursor.")
("schHiDelete"
"schHiDelete(
)
=> t"
"Deletes selected objects. Usable when editing schematics or symbols. This function cannot be used to delete a sheet border (use schHiEditSheetSize).")
("schHiDeleteIndex"
"schHiDeleteIndex(
)
=> t"
"Converts a multisheet schematic having one drawing sheet and one index sheet into a single-sheet schematic. Usable only when editing an index schematic. Use schHiDeleteSheet to first remove extra drawing sheets. The index schematic must contain only one sheet.")
("schHiDeleteSheet"
"schHiDeleteSheet(
[ ?startSheet n_startSheet ]
[ ?endSheet n_endSheet ]
[ @rest rest ]
)
=> t"
"Deletes a sheet or range of sheets from a multisheet schematic. Usable only when editing an index of a multisheet schematic. This function cannot be undone.")
("schHiDescend"
"schHiDescend(
[ w_windowId ]
)
=> t"
"Traverses down the hierarchy and displays the child cellview of a specified instance and view you select, provided you have edit permission. If you do not have edit permission, a dialog box prompts you to use read mode.")
("schHiDescendEdit"
"schHiDescendEdit(
[ w_windowId ]
)
=> t"
"Traverses down the hierarchy and displays the child cellview of a specified instance and view you select, provided you have edit permission. If you do not have edit permission, a dialog box prompts you to use read mode.")
("schHiDescendRead"
"schHiDescendRead(
[ w_windowId ]
)
=> t"
"Traverses down the hierarchy and displays the child cellview in read mode of a specified instance and view you select. The cellview is not editable.")
("schHiDisplayOptions"
"schHiDisplayOptions(
[ w_windowId ]
)
=> t"
"Sets options associated with the window display. Usable when editing schematics or symbols.")
("schHiDistribute"
"schHiDistribute(
s_justify 
[ g_windowId ]
)
=> t"
"Arranges the objects on the canvas at equal distance from each other. If the objects are already selected on the canvas, the pre-select mode is used; otherwise, the post-select mode is used for distributing the objects. For details, refer to Distributing.")
("schHiDrawSymbolPin"
"schHiDrawSymbolPin(
[ ?terminalName t_terminalName ]
[ ?direction t_direction ]
[ ?interpret t_interpret ]
[ @rest rest ]
)
=> t"
"Draws a polygon that represents a symbol pin. Usable only when editing symbols.")
("schHiEditInPlace"
"schHiEditInPlace(
[ w_windowId ]
)
=> t"
"Edits the master of a user-selected instance within the context of its parent schematic. Usable when editing schematics or symbols.")
("schHiEditText"
"schHiEditText(
)
=> t / nil"
"Starts the direct text edit command in the current window, allowing you to perform an in-place edit of notes, names, parameters, and so on.")
("schHiEditorOptions"
"schHiEditorOptions(
[ w_windowId ]
)
=> t"
"Sets variables that affect the environment. Usable when editing schematics or symbols.")
("schHiEditPinOrder"
"schHiEditPinOrder(
[ g_updateInstLastChanged ]
)
=> t"
"Creates or modifies the property on the cellview that specifies the ordering of the pins in the current cellview. Usable when editing schematics or symbols.")
("schHiEditSheetSize"
"schHiEditSheetSize(
[ ?size t_size ]
[ ?type t_type ]
[ @rest rest ]
)
=> t"
"Edits the sheet border size of a schematic. Usable only when editing schematics.")
("schHiEditTitleBlock"
"schHiEditTitleBlock(
)
=> t"
"Changes the properties of a title block in a schematic sheet. Usable only when editing schematics that have a sheet border.")
("schHiEnvSaveLoad"
"schHiEnvSaveLoad(
[ ?action t_action ]
[ ?fileName t_fileName ] 
[ @rest rest ]
)
=> t"
"Saves or loads the schematic environment variables. Usable when editing schematics or symbols.")
("schHiExtractConn"
"schHiExtractConn(
[ ?action t_action ]
[ @rest rest ]
)
=> t"
"Sets extraction options and runs the schematic extractor. Usable only when editing schematics.")
("schHiFind"
"schHiFind(
[ ?propName t_propName ]
[ ?condOp t_condOp ]
[ ?propValue t_propValue ]
[ @rest rest ]
)
=> t"
"Finds objects that match specified search criteria in a schematic or symbol view. You can specify the object filter as well as a property name or value expression that matches the objects. Usable when editing schematics or symbols. Matching is supported only for strings, integers, floating-point numbers, and time. Other property types are not supported.")
("schHiFindMarker"
"schHiFindMarker(
)
=> t"
"Searches for the error and warning markers generated by the schematic rules checker (SRC) and displays a form that contains a list of the markers. Usable when editing a schematic or a symbol.")
("schHiFollowPin"
"schHiFollowPin(
[ ?order t_order ]
[ @rest rest ]
)
=> t"
"Changes the cellview to one that contains the specified pin or offsheet connector. Operates on the selected set. Brings in the cellview that contains the first reference of the selected pin or offsheet connector. Usable only when editing a sheet of a multisheet schematic.")
("schHiFontUpdate"
"schHiFontUpdate(
[?increase x_increase]
[?amount x_amount]
[x_increase [x_amount] ]
[ @rest rest ]
)
=> t / nil"
"Interactive command for updating the font size of text on a schematic.")
("schHiGotoSheet"
"schHiGotoSheet(
[ ?sheetNum g_sheetNum ]
[ @rest rest ]
)
=> t"
"Traverses sheets in a multisheet schematic. Usable only when editing an index or sheet of a multisheet schematic.")
("schHiGridOptions"
"schHiGridOptions(
[ w_windowId ]
)
=> t"
"Sets options associated with the grid.")
("schHiHiliteLabel"
"schHiHiliteLabel(
[ ?labelType t_labelType ]
[ ?display t_display ]
[ @rest rest ]
)
=> t"
"Highlights labels of wires and instances. Usable only when editing schematics.")
("schHiIgnore"
"schHiIgnore(
[ g_windowId ]
)
=> t / nil"
"Ignores the instances in the schematic canvas. This function works as a toggle switch, that is, it is used for adding ignore properties to an instance or for removing any existing ones. When the instances are already selected on the canvas, the pre-select mode is used; otherwise, the post-select mode is used for ignoring the instances. For details, refer to Ignoring Instances.")
("schHiInstToView"
"schHiInstToView(
[ ?viewName t_viewName ]
[ ?dataType t_dataType ]
[ @rest rest ]
)
=> t"
"Generates a cellview from an instance of a symbol. Usable only when editing schematics.")
("schHiMousePopUp"
"schHiMousePopUp(
)
=> t"
"Displays a pop-up menu at the location of the cursor. The menu displayed is sensitive to the location of the cursor and the mode of the cellview in the window. Usable when editing schematics or symbols.")
("schHiMove"
"schHiMove(
[ ?useSelSet t_useSelSet ]
[ @rest rest ]
)
=> t"
"Moves objects to a different location. You can move objects between different schematic and symbol cellviews. Usable when editing schematics or symbols. Partially selected objects cannot be moved to a different cellview. Does not support change in orientation for partially selected objects.")
("schHiNetExprAvailProps"
"schHiNetExprAvailProps(
)
=> t"
"Displays the Net Expression Available Property Names form. Use this form to find the net expression property names that are available for setting on the selected instances.")
("schHiNetExprEvalNames"
"schHiNetExprEvalNames(
)
=> t"
"Displays the Net Expression Evaluated Names form. Use this form to view the net names that result from the evaluation of all net expressions that are found in the hierarchy below the selected instances.")
("schHiNewCellView"
"schHiNewCellView(
)
=> t"
"Displays the Create New File form. This function needs to be invoked from a window that contains either schematic or symbol data.")
("schHiObjectProperty"
"schHiObjectProperty(
)
=> t"
"Displays a form that lets you modify the properties of selected objects. Usable only when editing a schematic or symbol cellview.")
("schHiOpenCellView"
"schHiOpenCellView(
)
=> t"
"Displays the Open File form. You specify the library name, cell name, view name, and edit mode in this form. The specified cellview is displayed in the current window. Usable for opening schematic and symbol design windows.")
("schHiOpenOtherView"
"schHiOpenOtherView(
d_cellViewID 
[ t_viewNames ] 
[ w_windowID ]
[ w_sessionWindowID ]
)
=> nil / windowID"
"Allows you to switch between schematic and symbol views.")
("schHiOpenSymbolOrSchematicView"
"schHiOpenSymbolOrSchematicView(
d_cellViewID 
[ w_windowID ]
)
=> nil / windowID"
"Takes the current viewtype, schematic or symbol, then calls schHiOpenOtherView to then switch between the views.")
("schHiPinListToView"
"schHiPinListToView(
[ ?libName t_libName ]
[ ?cellName t_cellName ]
[ ?viewName t_viewName ]
[ ?inPinList t_inPinList ]
[ ?outPinList t_outPinList ]
[ ?ioPinList t_ioPinList ]
[ ?swPinList t_swPinList ]
[ ?dataType t_dataType ]
[ ?jpPinList t_jpPinList ]
[ ?trPinList t_trPinList ]
[ ?unPinList t_unPinList ]
[ @rest rest ]
)
=> t"
"Generates a cellview from a pin list. Usable when editing schematics or symbols.")
("schHiPlot"
"schHiPlot(
)
=> t"
"Brings up the Submit Plot form to let you generate schematic plots. Usable when viewing schematics or symbols.")
("schHiPlotQueueStatus"
"schHiPlotQueueStatus(
)
=> t"
"Displays the plot jobs in the spooling queues. Usable when editing schematics or symbols.")
("schHiRegisterWireStubs"
"schHiRegisterWireStubs(
)
=> t"
"Invokes the Register Net Name per Terminal form.")
("schHiRenumberAllSheet"
"schHiRenumberAllSheet(
)
=> t"
"Sequentially renumbers all sheets in a multisheet schematic. Usable only when editing an index schematic.")
("schHiRenumberInstances"
"schHiRenumberInstances(
)
=> t"
"Opens the Renumber Instances form which can be used to renumber instances automatically.")
("schHiRenumberSheet"
"schHiRenumberSheet(
[ ?from n_from ]
[ ?to n_to ]
[ @rest rest ]
)
=> t"
"Changes the number of a sheet in a multisheet schematic. Changes the cell name of the renumbered schematic to match the destination sheet number. If a sheet already exists with the destination number, the renumbered sheet is inserted before it. All succeeding sheets will be renumbered accordingly.")
("schHiReplace"
"schHiReplace(
[ ?replaceAll g_replaceAll ]
[ ?propName t_propName ]
[ ?condOp t_condOp ]
[ ?propValue t_propValue ]
[ ?newPropName t_newPropName ]
[ ?newPropValue t_newPropValue ]
[ @rest rest ]
)
=> t"
"Replaces objects that match the specified search criteria with a specified value. Usable when editing symbols or schematics. You must have write access to each of the cellviews. Only supports matching of strings, integers, floating-point numbers, and time. This function does not support other property types.")
("schHiResetInvisibleLabels"
"schHiResetInvisibleLabels(
)
=> t"
"Causes the highlighted labels to either remain visible or reverse to the invisible state in the design. Usable only when editing schematics.")
("schHiReturn"
"schHiReturn(
[ w_windowId ]
)
=> t"
"Returns up the hierarchy. Usable when editing schematics or symbols after completing a descend or edit-in-place action.")
("schHiReturnToTop"
"schHiReturnToTop(
[ w_windowId ]
)
=> t"
"Returns to the top-level cellview in the hierarchy. Usable when editing schematics or symbols after completing a series of descend commands.")
("schHiRotate"
"schHiRotate(
[ ?nonModal g_nonModal ]
[ @rest rest ]
)
=> t"
"Rotates objects. Usable when editing schematics or symbols.")
("schHiRouteFlightLine"
"schHiRouteFlightLine(
[ ?routeMethod t_routeMethod ]
[ @rest rest ]
)
=> t"
"Routes logical connections shown as flight lines. Usable only when editing schematics.")
("schHiSaveCellView"
"schHiSaveCellView(
) 
=> t"
"Saves the design in the current window.")
("schHiSelectAll"
"schHiSelectAll(
)
=> t"
"Opens a form that you use either to add all specified objects to the selected set or to delete all specified objects from the selected set. Usable when editing schematics or symbols.")
("schHiSelectByProperty"
"schHiSelectByProperty(
[ ?select t_select ]
[ ?propName t_propName ]
[ ?condOp t_condOp ]
[ ?propValue t_propValue ]
[ @rest rest ]
)
=> t"
"Adds objects that match specified search criteria in a schematic or symbol view to the selected set or removes objects that match specified search criteria in a schematic or symbol view from the selected set. Usable when editing schematics or symbols. Supports only selection of strings, integers, floating-point numbers, and time. This function does not support other property types.")
("schHiSetSymbolOrigin"
"schHiSetSymbolOrigin(
)
=> t"
"Relocates the origin point of a symbol and prompts you for a location of the new symbol origin point. All objects in the symbol are moved so when you later place the symbol, it is positioned on the dragging pointer relative to the new origin point.")
("schHiShowScope"
"schHiShowScope(
[ w_windowId ]
)
=> t"
"Displays a dialog box describing the current hierarchical scope in the window. Usable when editing or reading schematics or symbols. The scope contains a list of instance names and the corresponding cell names.")
("schHiSnapToGrid"
"schHiSnapToGrid(
[ g_windowId ]
)
=> t / nil"
"Places the objects on the grid in the given window. If the objects are already selected, the Snap To Grid command runs in the pre-select mode. If no object is selected in the given window, the command runs in the post-select mode. For details, refer to Snapping to Grid.")
("schHiSolder"
"schHiSolder(
)
=> t"
"Creates a solder dot over a + or T wire segment. Usable only when editing schematics.")
("schHiSRC"
"schHiSRC(
[ ?action t_action ]
[ @rest rest ]
)
=> t"
"Sets schematic rules checker (SRC) options, and runs the schematic rules checker. Usable only when editing schematics.")
("schHiStretch"
"schHiStretch(
[ ?routeMethod t_routeMethod ]
[ ?useSelSet t_useSelSet ]
[ @rest rest ]
)
=> t"
"Moves objects or partially selected objects and maintains connectivity with rubberband lines. Usable only when editing schematics. You cannot stretch objects between two different cellviews.")
("schHiSymStretch"
"schHiSymStretch(
)
=> t"
"Moves partially selected objects in the symbol editor. Can only be used when editing a symbol. Stretching between two different cellviews is not supported. When stretching an edge of a device border, the pin stubs attached to it are not dragged.")
("schHiTree"
"schHiTree(
[ w_windowId ]
)
=> t / nil"
"Used to display the design hierarchy listed in text format in the Tree Output window.")
("schHiUpdatePinOrder"
"schHiUpdatePinOrder(
[ g_updateInstLastChanged ]
)
=> t"
"Creates or modifies the property on the cellview that specifies the ordering of the pins in the current cellview. Usable when editing schematics or symbols.")
("schHiVHDLProperty"
"schHiVHDLProperty(
)
=> t"
"Edits properties specific to the schematic and VHDL netlister. Usable when editing schematics or symbols.")
("schHiUpdatePinsFromView"
"schHiUpdatePinsFromView(
[ ?viewName t_viewName ]
[ @rest rest ]
)
=> t"
"Updates the pin information in the current cellview from another view of the same cell. This works from schematic to symbol cellview, and vice-versa.")
("schHiVIC"
"schHiVIC(
[ ?viewList t_viewList ]
[ @rest rest ]
)
=> t"
"Runs the cross-view checker (VIC) to check the consistency of the interface of one or more cellviews against the cellview you are editing. Usable when editing schematics or symbols.")
("schHiVICAndSave"
"schHiVICAndSave(
) 
=> t"
"Runs the cross-view checker (VIC) on the cellview in the current active window and saves the cellview.")
("schHiViewToView"
"schHiViewToView(
[ ?libName t_libName ]
[ ?cellName t_cellName ]
[ ?viewNameFrom t_viewNameFrom ]
[ ?viewNameTo t_viewNameTo ]
[ ?dataType t_dataType ]
[ @rest rest ]
)
=> t"
"Generates one type of cellview from another.")
("schHiZoomToSelSet"
"schHiZoomToSelSet(
)
=> t / nil"
"Zooms to selected objects in the current window. If no objects are selected prior to actioning the function, you will be prompted to draw a selection area.")
("schHiSetOrigin"
"schHiSetOrigin(
)
=> t"
"Enables to change the origin point of a symbol or schematic. If you place the cell after specifying the origin point, it is automatically placed at the new origin point.")
("schSetSelectOptions"
"schSetSelectOptions(
)
=> t"
"Sets the filter for the selection function. You can select object types by turning toggle switches on or off. You can also choose partial or full selection. Usable when editing schematics or symbols.")
("schSingleSelectPt"
"schSingleSelectPt(
)
=> t"
"Selects the object under the cursor after first deselecting all objects in the selected set. Usable when editing schematics.")
("annLoadAnnotationData"
"annLoadAnnotationData(
w_windowId
t_annfileList

)
=> t / nil"
"Loads the saved annotation setup files into the current schematic design. You can specify multiple annotation setup files to load.")
("annSaveAnnotationData"
"annSaveAnnotationData(
w_windowId
t_fileName

)
=> t / nil"
"Saves the current annotation setup in a file. You can specify the complete file path where the setup file needs to be saved.")
("defcell"
"defcell(
t_cellName
t_pinType
t_pinName
defsymbol
t_viewname
symbolProps
t_propName
g_propValue
defTermProp
t_defPinName
defVisibleProp
labelAttr
symbolParam
f_spacing
f_length
f_vLength
f_hLength
t_connector
t_origin
symbolLabels
t_labelText
controlParam
g_boolean
pinNumSpec
t_pinName
x_pinNumber
pinLocSpec
t_leftPinName
t_rightPinName
t_topPinName
t_bottomPinName
pinGraphicSpec
t_pinGraph
pinLogicSpec
t_posPin
t_negPin
clockPins
t_clockPin
)
=> t / nil"
"Used with TSG template files to call lmdefcell.")
("hsmDeselect"
"hsmDeselect(
[ ?type d_type ]
[ ?path g_path ]
[ ?name g_name ]
[ ?spec l_spec ]
)
=> t / nil"
"Deselects named objects in the design hierarchy.")
("hsmGetSelectedSet"
"hsmGetSelectedSet(
[ ?top g_top ]
[ ?type d_type ]
[ ?pathStyle g_pathStyle ]
[ ?includeExtra g_includeExtra ]
[ ?cellview d_cellview ]
[ ?path g_path ]
)
=> list / nil"
"Gets the hierarchical selected set.")
("hsmSelect"
"hsmSelect(
[ ?type d_type ]
[ ?path g_path ]
[ ?name g_name ]
[ ?spec l_spec ]
)
=> t / nil"
"Selects named objects in the design hierarchy.")
("opcAddListToSet"
"opcAddListToSet ( 
o_set
l_objects
)
=> t / nil"
"Adds a list of objects to the specified set.")
("opcAddObjectToSet"
"opcAddObjectToSet ( 
o_set
d_object
)
=> t / nil"
"Adds an object to the specified set.")
("opcAllSetsInCellView"
"opcAllSetsInCellView ( 
d_cellview
)
=> l_sets"
"Returns a list of all the sets present in the specified cellview.")
("opcClearSet"
"opcClearSet ( 
o_set
)
=> t / nil"
"Removes all objects from a set without modifying the specific objects.")
("opcCreatePersistentSet"
"opcCreatePersistentSet ( 
d_cellview
t_name
)
=> o_set / nil"
"Creates an OPC set that has a persistent storage in the cellview.")
("opcCreateTransientSet "
"opcCreateTransientSet ( 
d_cellview
t_name
)
=> o_set / nil"
"Creates an OPC set that is deleted when the cellview is removed from memory. Such sets can be created even when the cellview is read-only.")
("opcDestroySet "
"opcDestroySet ( 
o_set
)
=> t / nil"
"Removes the set from memory and storage.")
("opcFindSet"
"opcFindSet( 
d_cellview
t_name
)
=> o_opcSet / nil"
"Searches for the specified OPC set name in the given cellview.")
("opcReleaseSet  "
"opcReleaseSet ( 
d_cellview
)
=> t / nil"
"Removes from cache the sets contained in the specified cellview, but retains them on the hard disk. The function is intended to release memory when critical operations need to be run.")
("opcRemoveObjectFromSet "
"opcRemoveObjectFromSet ( 
o_set
d_object
)
=> t / nil"
"Removes an object from the specified set.")
("schAddIgnoreProp"
"schAddIgnoreProp( 
t_name
t_prompt
t_type
t_value
g_enable
)
=> t / nil"
"Registers an ignore property. You can view the set of registered ignore properties on the Ignore Properties tab by clicking Options - Editor in the schematic window.")
("schAlign"
"schAlign( 
l_list 
s_justify
)
=> t / nil"
"Aligns the objects in the specified direction in the schematic or symbol view. For details, refer to Aligning.")
("schAttachLibToPackageTech"
"schAttachLibToPackageTech(
t_libName
)
=>DBId / nil"
"Attaches a package technology to the given library.")
("schCheck"
"schCheck( 
d_cvId 
)
=> l_errors"
"Performs a check on the specified cellview. This includes extracting connectivity, running the schematic rules checker, and running the cross-view checker. You must have write permission to any cellview that is to be checked. The given cellview ID can be read-only or editable schematic.")
("schCheckHier"
"schCheckHier( 
d_cvId 
t_viewNames 
t_refLibs 
[ l_instViewListTable ] 
) 
=> l_errors / nil"
"Performs a check of the hierarchy that starts at the given cellview.")
("schCheckHierConfig"
"schCheckHierConfig( 
h_cfgId 
[ v_pathVector [ g_refLibs ] ] 
) 
=> l_errors / nil"
"Performs a check of the hierarchy. The check starts with the top cellview that is specified in the given hierarchy configuration. The hierarchy traversed is defined by information in this hierarchy configuration. Usually, the hierarchy is confined to the library of the given cellview, but you can specify a list of reference libraries to process if the hierarchy extends beyond the current library.")
("schClearConn"
"schClearConn( 
d_cvId
) 
=> t / nil"
"Removes the schematic connectivity from a specified cellview to restart extraction using schExtractConn.")
("schCloneSymbol"
"schCloneSymbol( 
d_cvId 
d_masterId 
l_origin 
t_orient 
) 
=> t / nil"
"Copies or clones graphics from an existing symbol into the target symbol cellview with the given location and orientation.")
("schCmdOption"
"schCmdOption(
)
=> t / nil"
"Cycles through a predefined set of values. By default, this function is bound to the middle mouse button. When you click the right mouse button during an active command, the command applies the next value in the predefined set.")
("schComputePinRef"
"schComputePinRef( 
d_cellView 
[ ?reportFile t_reportFile ] 
[ ?display t_display ] 
[ ?formatString t_formatString ] 
[ ?reportDups t_reportDups ] 
[ ?sortByDir t_sortByDir ] 
[ ?separator t_separator ] 
[ ?inputDesignator t_inputDesignator ] 
[ ?outputDesignator t_outputDesignator ] 
[ ?ioDesignator t_ioDesignator ] 
[ ?charsPerLine x_charsPerLine ] 
[ @rest rest ]
)
=> t / nil"
"Creates offsheet pin references for multisheet designs. The pin references can be displayed in the schematic next to each pin or in a report file. This function creates an offsheet pin reference report that lists each pin followed by a list of all other locations of this pin. The pin references can also be displayed in the schematic next to each pin.")
("schCopy"
"schCopy( 
d_fig 
d_destCV 
l_transform 
)
=> d_object / nil"
"Copies the given object to the given destination cellview. The object location and orientation can be specified before it is placed at the destination location by the given transformation argument. The copied figure is first rotated and reflected about the origin as specified by the orientation of the transform, then translated by the offset of the transform.")
("schCreateInst"
"schCreateInst( 
d_cvId 
d_masterId 
t_instanceName 
l_origin 
t_orient 
[ n_magnification ] 
)
=> d_inst / nil"
"Creates an instance of the given master cellview in the specified cellview at the given location with the given orientation. You can specify the magnification to set for the instance. Although not fully supported, you can use this property to scale the appearance of an instance.")
("schCreateInstBox"
"schCreateInstBox( 
d_cvId 
[ l_bBox ] 
)
=> d_id / nil"
"Creates an instance box in the given symbol cellview. This function uses a bounding box you specify or determines a bounding box from the pins and device shapes.")
("schCreateNetExpression"
"schCreateNetExpression( 
d_cvId 
t_netExpr 
d_glueId 
l_point 
t_justify 
t_orient 
t_fontStyle 
n_fontHeight 
)
=> d_id / nil"
"Creates an inherited connection and the corresponding net expression label. Attaches the given net expression to the given database object. It validates the syntax of the expression and attaches a net expression label to the database object. If the object is a schematic wire, you must run the schematic extractor to create the inherited connection. Before calling this function, you must acquire all the required arguments of the function.")
("schCreateNoteLabel"
"schCreateNoteLabel( 
d_cvId 
l_point 
t_text 
t_just 
t_orient 
t_fontStyle 
n_fontHeight 
t_type 
)
=> d_label / nil"
"Creates note labels in a schematic or symbol cellview with the attributes and properties you specify. These labels do not affect the connectivity but can be useful for annotation.")
("schCreateNoteShape"
"schCreateNoteShape( 
d_cvId 
t_type 
t_lineStyle 
l_points 
[ n_width ] 
)
=> d_shape / nil"
"Creates note shapes in a schematic or symbol cellview with the attributes and properties you specify. These shapes do not affect the connectivity but can be useful for annotation.")
("schCreatePin"
"schCreatePin( 
d_cvId 
d_master 
t_termName 
t_direction 
g_offSheetP 
l_origin 
t_orientation
[g_powerSens]
[g_groundSens]
[g_sigType]
)
=> d_pin / nil"
"Creates instances that are used to represent pins of terminals in a schematic cellview. Creates only a pin in a schematic cellview. The destination cellview must not be the same as the master cellview and must be editable.")
("schCreateSheet"
"schCreateSheet( 
d_cvId 
x_number 
t_borderLibrary 
t_borderCell 
t_borderView 
)
=> d_sheetInstId / nil"
"Creates a new sheet for a multisheet schematic.")
("schCreateSplitPrimarySymbol"
"schCreateSplitPrimarySymbol(
d_cellId
)
=> t / nil"
"(ICADVM20.1 Only) Searches for split symbol views within the given cell and creates a split-primary symbol by assembling all the terminals from the gathered views. The generated split-primary cellview has the view name as symbol. This function removes an existing split-primary cellview, if any, and replaces it with a new one.")
("schCreateSymbolLabel"
"schCreateSymbolLabel( 
d_cvId 
l_point 
t_labelChoice 
t_text 
t_justify 
t_orient 
t_fontStyle 
n_fontHeight 
t_type 
)
=> d_label / nil"
"Creates a label in only a symbol cellview with the specified attributes that is opened in append mode.")
("schCreateSymbolPin"
"schCreateSymbolPin( 
d_cvId 
d_master 
t_termName 
t_direction 
l_origin 
t_orientation 
[ g_flatten ]
[g_powerSens]
[g_groundSens]
[g_sigType]
)
=> t_pinFigId / nil"
"Creates a pin in the given cellview with the name, direction, and orientation you specify.")
("schCreateSymbolShape"
"schCreateSymbolShape( 
d_cvId 
t_shape 
t_style 
l_points 
[ n_width ] 
)
=> d_shapeId / nil"
"Creates the specified shape using the given fill style and the list of points in the given cellview.")
("schCreateWire"
"schCreateWire( 
d_cvId 
t_entryMethod 
t_routeMethod 
l_points 
n_xSpacing 
n_ySpacing 
n_width 
[ t_color ]
[ t_lineStyle ]
)
=> l_wireId"
"Creates flight lines, wide wires, or narrow wires in the specified schematic cellview.")
("schCreateWireLabel"
"schCreateWireLabel( 
d_cvId 
d_glue 
l_point 
t_text 
t_justify 
t_orient 
t_fontStyle 
n_fontHeight 
g_aliasP 
)
=> d_labelId / nil"
"Creates wire labels and glues them to the object you specify.")
("schDelete"
"schDelete( 
d_fig 
)
=> t / nil"
"Deletes the figure or object you specify only from schematic or symbol cellviews.")
("schDeleteIndex"
"schDeleteIndex( 
d_cvId 
)
=> t / nil"
"Deletes an index schematic if there is one remaining sheet. Converts the remaining sheet into an ordinary schematic with the cell name of the index schematic and replaces any offsheet pins with schematic pins.")
("schDeleteSheet"
"schDeleteSheet( 
d_cvId 
x_number 
)
=> t / nil"
"Deletes a sheet from a multisheet schematic design.")
("schDeselectAllFig"
"schDeselectAllFig( 
[ d_cvId ] 
)
=> t"
"Deselects all objects in a specified cellview. Bypasses the selection filter.")
("schDistribute"
"schDistribute( 
l_list 
s_justify
)
=> t / nil"
"Arranges objects at equal distance in the specified direction in the schematic or symbol view. For details, refer to Distributing.")
("schDrawSymbolPin"
"schDrawSymbolPin( 
d_cvId 
t_termName 
t_direction 
l_points 
)
=> t_pinFigId / nil"
"Creates a symbol pin in the specified cellview by creating a terminal of the given name with the given direction and a polygon shape specified by the given list of points.")
("schEditPinOrder"
"schEditPinOrder( 
d_cvId 
l_pinList 
g_updateInstLastChanged 
)
=> t / nil"
"Updates the pin ordering for schematic or symbol cellviews given a list of pin names contained in the cellview and their desired order.")
("schEditSheetSize"
"schEditSheetSize( 
d_cvId 
t_borderLib 
t_borderCell 
t_borderView 
)
=> t / nil"
"Places or replaces a sheet border instance in a schematic. This function works for both multisheet and non-multisheet schematics.")
("schExistsEditCap"
"schExistsEditCap( 
{ t | nil }
)
=> t / nil"
"Tests if any licenses that support the schematic editing feature are available for checkout. Does not check out any licenses.")
("schExtendSelSet"
"schExtendSelSet( 
w_windowId 
l_pt 
)
=> t / nil"
"Extends the selection of the object in the specified position by selecting the object around the current object.")
("schExtractConn"
"schExtractConn( 
d_cvId 
)
=> l_result"
"Runs the schematic connectivity extractor on the cellview you specify.")
("schExtractStatus"
"schExtractStatus( 
d_cvId 
)
=> t_status / nil"
"Checks for error and warning markers before returning the schematic extraction status for the specified schematic cellview. When the schematic is read-only, schExtractStatus() will also check whether any instance masters have been updated since the schematic was last saved.")
("schFindIgnorePropByName"
"schFindIgnorePropByName( 
)
=> l_list / nil"
"Searches for an ignore property in the registered property set. You can view the registered ignore property set by clicking Options - Editor - Ignore Properties tab in the schematic window.")
("schGetAllIgnoreProps"
"schGetAllIgnoreProps( 
)
=> l_list / nil"
"Returns a disembodied property list for all the ignore properties that are currently registered. You can view the set of registered ignore properties set on the Ignore Properties tab by clicking Options - Editor in the schematic window.")
("schGetBundleDisplayMode"
"schGetBundleDisplayMode( 
d_labelId 
)
=> vertical / horizontal / nil"
"Takes a label Id and returns its display mode. This only works for label type objects. If the specified object Id is not a label object, then the API will return nil. This will only work when the cellview is editable.")
("schGetCellViewListInSearchScope"
"schGetCellViewListInSearchScope( 
d_cvId 
t_scope 
d_topCV 
t_viewNameList 
t_libName 
t_mode 
)
=> l_cvList / nil"
"Returns a list of cellviews in the search scope you specify. Only cellviews of the same view type as the base cellview are returned.")
("schGetCheckGroups"
"schGetCheckGroups( 
)
=> list / nil"
"Returns an association list of all the custom schematic checker groups created using schRegisterCheckGroup().")
("schGetEnv"
"schGetEnv( 
t_variableName 
)
=> g_value"
"Gets the value of a schematic environment variable.")
("schGetIgnoredStatus"
"schGetIgnoredStatus( 
d_instId
)
=> l_list"
"Returns the ignored status of the given instance ID. This function can be used only when the instance IDs are known.")
("schGetMatchingObjects"
"schGetMatchingObjects( 
d_cvId 
t_propName 
t_condOp 
t_propValue 
g_useSelSet 
)
=> l_objects / nil"
"Finds the set of objects that match the specified search criteria in a cellview. You can search by property to limit the search in the selected set.")
("schGetPinOrder"
"schGetPinOrder( 
d_cvId 
)
=> l_pinList"
"Returns the pin list, as defined in the portOrder property (if present) or as the default pin list.")
("schGetPostCheckTriggers"
"schGetPostCheckTriggers( 
)
=> list / nil"
"Lists all the post-check triggers registered using schRegPostCheckTrigger.")
("schGetPreCheckTriggers"
"schGetPreCheckTriggers( 
)
=> list / nil"
"Lists all the pre-check triggers registered using schRegPreCheckTrigger.")
("schGetPropertyDisplay"
"schGetPropertyDisplay( 
?object d_object
[?name S_name]
)
=> l_textDisplays / s_visibility / nil"
"Returns the attribute, property, and parameter textDisplays enabled for an object. See also schSetPropertyDisplay.")
("schGetShapeStyle"
"schGetShapeStyle(
d_shape 
)
=> l_style"
"(ICADVM20.1 Only) Returns a Disembodied property list (DPL) containing the style attributes of a given shape.")
("schGetSignalTypeIntegrity"
"schGetSignalTypeIntegrity( 
t_netSigType
t_termNetSigType
t_termDirection
)
=> t_severity / nil"
"Gets the conflict severity for signal type integrity check for connections between nets of specified signal type, and instance pins of specified signal type and direction.")
("schGetSplitInstances"
"schGetSplitInstances(
d_instId
)
=> l_splitInstIds / nil"
"(ICADVM20.1 Only) Returns a list of split instance IDs that are associated with the given split-primary instance.")
("schGetSplitInstTerms"
"schGetSplitInstTerms(
d_instTermId
)
=> l_splitInstTermIds / nil"
"(ICADVM20.1 Only) Returns a list of split instance terminals that have the same name as that of the given split-primary instance.")
("schGetSplitPrimaryInst"
"schGetSplitPrimaryInst(
d_splitInstId
)
=> d_inst / nil"
"(ICADVM20.1 Only) Returns the split-primary instance associated with the given split symbol.")
("schGetSplitPrimaryInstTerm"
"schGetSplitPrimaryInstTerm(
d_splitInstTermId
)
=> d_instTerm / nil"
"(ICADVM20.1 Only) Returns the terminal of the split-primary instance that has the same terminal name as the specified split instance terminal.")
("schGetWireColor"
"schGetWireColor(
d_wireId
) 
=> t_colorName / nil"
"Returns the color used to draw a wire segment.")
("schGetWireLineStyle"
"schGetWireLineStyle(
d_wireId
) 
=> t_lineStyleName / nil"
"Returns the line style used to draw a wire segment.")
("schGlueLabel"
"schGlueLabel( 
d_label 
d_figure 
)
=> t / nil"
"Glues the label to the figure you specify using a database child/parent relationship in which the label is the child. You can glue a pin label to a pin only when the label defines the name for that pin. You can glue a wire label only to a wire, a pin of a component, or a pin of a schematic. The label defines the name of the net associated with the wire, the pin of the component, or the pin of the schematic. You can glue note labels to any object.")
("schHdlPrintFile"
"schHdlPrintFile(
)
=> t"
"Prints the current HDL file.")
("schHdlPrintVars"
"schHdlPrintVars(
)
=> t"
"Prints the current values of the schematic HDL variables.")
("schHDLReturn"
"schHDLReturn( 
[ w_windowId ] 
)
=> t"
"Returns up the hierarchy from a Verilog view window.")
("schIgnore"
"schIgnore( 
d_instId
g_setIgnore
)
=> t / nil"
"Ignores the instances in the schematic view. It works as a toggle switch, that is, it is used for adding or removing the ignore properties from the instance. You can view the registered ignore properties on the Ignore Properties tab by clicking Options - Editor. For details, refer to Ignoring Instances.")
("schInhConFind"
"schInhConFind( 
w_windowId
[ d_inst ]
)
=> l_inhConList"
"Given a windowId and an optional list of instances (or all instances in the window if none are explicitly specified), will return a list of inherited connections eligible for override beneath these instances.")
("schInhConSet"
"schInhConSet( 
t_inhCon
[ ?name t_name ] 
[ ?default t_default ]
[ ?value t_value ]
[ ?pinName t_pinName ]
[ ?pinDir t_pinDir ]
[ ?pinPos t_pinPos ]
)
=> t / nil"
"Manipulates inherited connections located using schInhConFind.")
("schInstallHDL"
"schInstallHDL( 
g_library 
t_cellName 
t_viewName 
t_srcName 
[ g_createSymbol ]
[ g_overrideIfExist ]
)
=> t / nil"
"Installs a Verilog HDL source file as an HDL cellview and creates the cell, view, and cellview objects in the library if necessary. This function can also create a matching symbol cellview.")
("schInstToView"
"schInstToView( 
d_inst 
t_viewTo 
t_fromFunc 
t_toFunc 
)
=> t / nil"
"Generates a cellview type from an instance of a symbol.")
("schIsFlightLine"
"schIsFlightLine( 
d_flightId
)
=> t / nil"
"Checks if the specified object is a flight line on a net.")
("schIsHDLCapEnabled"
"schIsHDLCapEnabled( 
{ t | nil }
)
=> t / nil"
"Validates that a license supporting the schematic editing feature is already checked out and does a recheck to ensure that the license has not timed out. Otherwise, attempts to check out a license.")
("schIsInCheckHier"
"schIsInCheckHier( 
)
=> t / nil"
"Identifies and performs the specific actions, as mentioned in the SKILL code, when checking a design hierarchy as opposed to a single cellview during a schematic hierarchy check. When you check a design hierarchy or a single cellview, the schematic checker runs any pre or post check triggers and custom checker rules that you have previously registered.")
("schIsIndexCV"
"schIsIndexCV( 
d_cvId 
)
=> t / nil"
"Tests whether the given cellview is an index schematic cellview.")
("schIsSchEditOk"
"schIsSchEditOk( 
d_cvId 
[ ?skipWritableCheck g_skipWritableCheck ]
[ ?dialog g_dialog ] 
)
=> t / nil"
"Checks if the given cellview is a schematic view, whether it is writable, and also whether the edit capability (VSE license successfully checked out) is enabled.")
("schIsSheetCV"
"schIsSheetCV( 
d_cvId 
)
=> t / nil"
"Tests whether the given cellview is a multisheet schematic cellview.")
("schIsSplitInst"
"schIsSplitInst(
d_instId
)
=> t / nil"
"(ICADVM20.1 Only) Tests if a specified instance is a split instance.")
("schIsSplitPrimaryInst"
"schIsSplitPrimaryInst(
d_instId
)
=> t / nil"
"(ICADVM20.1 Only) Tests if a specified instance is a split-primary instance.")
("schIsSplitPrimarySymbol"
"schIsSplitPrimarySymbol(
d_cvId
)
=> t / nil"
"(ICADVM20.1 Only) Tests if a specified cellview is a split-primary symbol.")
("schIsSplitSymbol"
"schIsSplitSymbol(
d_cvId
)
=> t / nil"
"(ICADVM20.1 Only) Tests if a specified cellview is a split symbol.")
("schIsSymEditOk"
"schIsSymEditOk( 
d_cvId 
[ ?skipWritableCheck g_skipWritableCheck ]
[ ?dialog g_dialog ] 
)
=> t / nil"
"Checks if the given cellview is a schematic symbol view, whether it is writable, and also whether the edit capability (VSE license successfully checked out) is enabled.")
("schIsTextEditable"
"schIsTextEditable( 
d_databaseID 
)
=> t / nil"
"Queries whether or not a label (optionally inside an instance) can be edited directly on the canvas.")
("schIsUsingSplitFeature"
"schIsUsingSplitFeature(
d_cellViewId
)
=> t / nil"
"(ICADVM20.1 Only) Indicates if a specified cellview uses the split feature. This implies that a schematic cellview has split instances with correctly set split-primary instances and a symbol cellivew is a split or has a split-primary symbol.")
("schIsViewCapEnabled"
"schIsViewCapEnabled( 
g_printMesg 
)
=> t"
"Obsolete function. No replacement.")
("schIsWire"
"schIsWire( 
d_wireId 
)
=> t / nil"
"Checks if the specified object is a wire.")
("schIsWireLabel"
"schIsWireLabel( 
d_figId 
)
=> t / nil"
"Tests whether the given database figure is a schematic wire label.")
("schLayoutToPinList"
"schLayoutToPinList( 
t_libName 
t_cellName 
t_viewName 
) 
=> g_pinList"
"Translates a layout cellview into an intermediate pin list format. The pin list represents all of the terminals in the layout and their directions. The pin list also represents the cellview level properties in the maskLayout.")
("schMouseApplyOrFinish"
"schMouseApplyOrFinish(
)
=> t / nil"
"Adds a point and applies or finishes the active enter function command based on the setting of the modalCommands schematic environment variable. It is designed to be used for double-clicking with the left mouse button.")
("schMove"
"schMove( 
d_fig 
d_destCV 
l_transform 
)
=> d_object / nil"
"Moves the object you specify to a destination cellview. The object location and orientation can be specified before the object is placed at the destination location by the given transformation argument. The copied figure is first rotated and reflected about the origin as specified by the orientation of the transform, then translated by the offset of the transform.")
("schNetExprAvailProps"
"schNetExprAvailProps( 
l_designSpec
l_instPaths
) 
=> l_availProps"
"Returns a list of available properties, and their evaluated values, for the various occurrences passed.")
("schNetExprEvalNames"
"schNetExprEvalNames( 
l_designSpec
l_instPaths
[ ?listCellView g_listCellView ]
[ ?listOccurrences g_listOccurrences ]
) 
=> l_netExprEvalNames"
"Returns a list of evaluated names for all occurrences specified.")
("schPinListToSchem"
"schPinListToSchem( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
)
=> t / nil"
"Generates a schematic cellview from a pin list.")
("schPinListToSchemGen"
"schPinListToSchemGen( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
)
=> t / nil"
"Opens the Create Schematic form if t_viewName is a schematic.")
("schPinListToSymbol"
"schPinListToSymbol( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
)
=> t / nil"
"Generates a symbol cellview from a pin list.")
("schPinListToSymbolGen"
"schPinListToSymbolGen( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
)
=> t / nil"
"Generates a symbol cellview from a pin list.")
("schPinListToVerilog"
"schPinListToVerilog( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
)
=> t / nil"
"Generates a Verilog HDL cellview from a pin list. The generated Verilog HDL cellview can be used with the Verilog integration.")
("schPinListToView"
"schPinListToView( 
t_libName 
t_cellName 
t_viewName 
g_pinList 
t_toFunc 
)
=> t / nil"
"Generates a cellview from a pin list.")
("schPlot"
"schPlot( 
[ t_file ]
[ w_windowId ]
)
=> t / nil"
"Generates a plot. The plot is defined in the t_file plot template file. If you do not specify t_file, this function uses the plot options stored in the schPlotOptions property list. If you backannotate the schematic and you specify w_windowId, the generated plot has backannotated values.")
("schRegisterCheckGroup"
"schRegisterCheckGroup( 
[ ?name s_name ]
[ ?title t_title ] 
[ ?description t_description ]
[ ?enabled g_enabled ]
)
=> r_checkgroup / nil"
"Creates and registers a new custom schematic checker group. Each new group appears as a discrete tab in the Schematic Rules Checks Setup form. Calling the function with the same group name as an existing group overwrites that group and all its rules.")
("schRegisterCheckRule"
"schRegisterCheckRule( 
[ ?title t_title ]
[ ?name s_name ]
[ ?groupName s_groupName ]
[ ?checkCB u_checkCB ]
[ ?configCB u_customCB ]
[ ?severity s_severity ]
[ ?description t_description ]
)
=> r_checkrule / nil"
"Creates and registers a new schematic rule checker. Calling this function with the same rule name as an existing rule in the same group overwrites that rule.")
("schReportCheckFailure"
"schReportCheckFailure( 
[ ?object d_object ]
[ ?checkRule r_checkRule ]
[ ?message t_message ]
[ ?short t_short ]
)
=> t / nil"
"Report the failure of a custom schematic check rule.")
("schRegisterFixedMenu"
"schRegisterFixedMenu( 
t_category 
r_menuHandle 
[ s_disableTrigger ] 
[ s_enableTrigger ] 
)
=> t / nil"
"Registers a vertical fixed-menu handle for specific cellview types to customize the schematic and symbol editor fixed menus. This function also registers triggers to enable and disable specific items in the fixed menu based on whether the editor window is in edit or read mode.")
("schRegisterPopUpMenu"
"schRegisterPopUpMenu( 
t_category 
r_menuHandle 
t_mode 
)
=> t / nil"
"Replaces the object-sensitive menus (OSMs) of the schematic canvas with a specific object category and edit mode. This function should only be called after a schematic cellview has been opened and the schematic editor has been initialized. To ensure this, call schRegisterPopUpMenu() from a callback registered using deRegUserTriggers().")
("schRegPostCheckTrigger"
"schRegPostCheckTrigger( 
s_functionName 
[ g_onceOnly ] 
)
=> t / nil"
"Registers a function that will be called after a schematic is checked using the Check - Current Cellview or Check - Hierarchy commands. The called function must be defined to accept three arguments: the cellview ID of the schematic, the number of errors encountered, and the number of warnings encountered during the check.")
("schRegPreCheckTrigger"
"schRegPreCheckTrigger( 
s_functionName
[ g_onceOnly ]
)
=> t / nil"
"Registers a function that will be called before a schematic is checked using the Check - Current Cellview or Check - Hierarchy commands. The called function must be defined to accept one argument; that is the cellview ID of the schematic.")
("schRemoveIgnoreProp"
"schRemoveIgnoreProp( 
t_name
)
=> t / nil"
"Removes the specified ignore property from the registered ignore property set. You can view the registered ignore properties in the Ignore Properties tab by clicking Options - Editor.")
("schRenumberAllSheet"
"schRenumberAllSheet( 
d_cvId 
)
=> t / nil"
"Resequences all sheets starting at 1 and fills any holes in the sequence.")
("schRenumberInstances"
"schRenumberInstances( 
g_objId 
[ t_scope ]
[ g_verbose ]
[ t_sequence ]
[ x_startIndex ]
[ t_applyTo [ t_libraryName t_cellName t_viewName ] ] 
)
=> t / nil"
"Resequences instances using the format instNamePrefix number that results in unique numbering indexes for each component name prefix encountered. Any voids in a numbering sequence are resolved by renaming instances with the highest numbers to fill the voids.")
("schRenumberSheet"
"schRenumberSheet( 
d_cvId 
x_from 
x_to 
)
=> t / nil"
"Changes the number of a sheet in a multisheet schematic and changes the cell name of the renumbered schematic to match the destination sheet number. If a sheet already exists with the destination number, the new sheet is inserted before it and all succeeding sheets are renumbered accordingly.")
("schReplaceProperty"
"schReplaceProperty( 
l_objId 
t_propName 
t_propValue 
)
=> t / nil"
"Changes the value of t_propName to t_propValue for the object. This function checks if the net, pin terminal, and master properties exist for the object.")
("schSaveCurrentPlotOptions"
"schSaveCurrentPlotOptions(
t_fileName
)
=> t / nil"
"Writes the current plot settings to a file.")
("schSchemToPinList"
"schSchemToPinList( 
t_libName 
t_cellName 
t_viewName 
)
=> g_pinList"
"Generates a pin list from a schematic cellview.")
("schSelectAllFig"
"schSelectAllFig( 
[ d_cvId ] 
)
=> t"
"Selects all objects in a cellview that pass the selection filter.")
("schSelectPoint"
"schSelectPoint( 
w_windowId 
l_pt 
g_isPartial 
g_isAdditive 
x_timeDelay 
)
=> t / nil"
"Interactively selects the object under the cursor. With single selection, this function first deselects all objects on the selected set. With additive selection, this function maintains the selected set and adds the current object to the selected set.")
("schSetAndLoadTsgTemplateType"
"schSetAndLoadTsgTemplateType( 
t_tsgType 
[ t_templateFileName ] 
)
=> t / nil"
"Sets the tsgTemplateType environment variable and loads the corresponding tsg template file.")
("schSetBundleDisplayMode"
"schSetBundleDisplayMode( 
d_labelId
t_displayMode
)
=> t / nil"
"Takes a label Id whose display mode is to be changed and applies either a vertical or horizontal display value. This will only work when the cellview is editable.")
("schSetCmdOption"
"schSetCmdOption( 
g_form 
s_field 
l_fieldValues 
x_key 
t_mousePrompt 
)
=> t / nil"
"Customizes which form fields are modified by calls to schCmdOption, middle mouse button, and schShiftCmdOption, Shift-middle mouse button, when the command is active.")
("schSetEnv"
"schSetEnv( 
t_variableName 
g_value 
)
=> t / nil"
"Sets the value of a schematic environment variable.")
("schSetIgnorePropEnabled"
"schSetIgnorePropEnabled( 
t_name
g_enable
)
=> t / nil"
"Enables or disables a particular ignore property. When you enable an ignore property, this property is applied on an instance while ignoring that instance.")
("schSetOrigin"
"schSetOrigin( 
d_cvId
l_origin
)
=> t / nil"
"Repositions all the objects in the specified symbol or schematic cellview relative to the new point.")
("schSetPropertyDisplay"
"schSetPropertyDisplay( 
?object d_object
[?name S_name]
?visibility S_visibility
)
=> l_textDisplays / nil"
"Shows or hides textDisplays containing the name and/or value of an object's attribute, property, or parameter. TextDisplay locations are chosen automatically to avoid overlaps with other textDisplays. For more information, see schGetPropertyDisplay and dbCreateTextDisplay.")
("schSetShapeStyle"
"schSetShapeStyle(
d_shape 
[ ?color t_colorName ] 
[ ?lineStyle t_lineStyleName ] 
[ ?stipple t_stippleName ] 
[ ?fillStyle t_fillStyleName ] 
[ ?fillColor t_colorName ] 
)
=> t / nil"
"(ICADVM20.1 Only) Specifies the style attributes of a shape to override the defaults provided by the Display Resource file. Each attribute value must be valid for the current display name returned by the hiGetCurrentDisplayName function.")
("schSetSignalTypeIntegrity"
"schSetSignalTypeIntegrity( 
t_netSigType
t_termNetSigType
t_termDirection
t_severity
)
=> t / nil"
"Sets the conflict severity for a signal type integrity check (available as part of Schematic Rule Checks) for connections between nets of a specified signal type, and instance pins of specified signal type and direction.")
("schSetSplitPrimaryInst"
"schSetSplitPrimaryInst(
d_splitInstId
g_primInstId
)
=> t / nil"
"(ICADVM20.1 Only) Associates the given split instance with the given split-primary.")
("schSetSplitSymbol"
"schSetSplitSymbol(
d_cvId
[g_isSplitSymbol]
)
=> t / nil"
"(ICADVM20.1 Only) Sets up special properties on the cellview to make it a split symbol of g_isSplitSymbol is t. However, if  g_isSplitSymbol is nil, the specified cellview is converted to a normal symbol by stripping off the aforementioned properties.")
("schSetSymbolOrigin"
"schSetSymbolOrigin( 
d_cvId 
l_origin 
)
=> t / nil"
"Moves all the objects in the specified symbol cellview relative to the given origin point.")
("schSetTextDisplayBBox"
"schSetTextDisplayBBox( 
d_tdId 
d_instId 
)
=> t / nil"
"Sets or updates the value of a bounding box that encloses a given textDisplay object. A text display object displays the string or value based on derived information; for example, the current value of a property. Accordingly, the software must update the bounding box that encloses the text display object when the derived string or value changes.")
("schSetWireColor"
"schSetWireColor(
d_wireId
t_colorName
) => t / nil"
"Sets the color used to draw a wire segment.")
("schSetWireLineStyle"
"schSetWireLineStyle(
d_wireId
t_lineStyleName
) => t / nil"
"Sets the line style used to draw a wire segment.")
("schShiftCmdOption"
"schShiftCmdOption(
)
=> t / nil"
"Cycles through a predefined set of values. By default, this function is bound to the Shift-middle mouse button. When you click the middle mouse button while pressing the Shift key during an active command, the command applies the next value in the predefined set. You can customize the predefined set of values by making calls to schSetCmdOption.")
("schSingleSelectBox"
"schSingleSelectBox( 
[ w_windowId ]  
[ g_partial ] 
[ l_bBox ] 
)
=> t"
"Selects objects within a rectangular area from a specified schematic editing window. With no arguments, it prompts you to enter the area to be selected in the current window. Partial selection is performed if the window environment variable partialSelect is set.")
("schSnapToConn"
"schSnapToConn(
)
=> t / nil"
"Interactively connects a wire to the nearest connectivity object during the Create Wire command and the schematic snapEnabled environment variable is set.")
("schSnapToGrid"
"schSnapToGrid(
d_figId 
)
=> t / nil"
"Places the object on the grid in a schematic or symbol view. For details, refer to Snapping To Grid.")
("schSolder"
"schSolder( 
d_cvId 
l_solderPt 
)
=> d_shapeId / nil"
"Solders two wires together in a schematic. This function places the solder dot over the given point if it is a + or T- wire intersection.")
("schSplitNumber"
"schSplitNumber(
)
=> string"
"(ICADVM20.1 Only) Used as an IL label on a split symbol. It provides the split index (starting from 1) to the instance on which the label is attached. When split instances are added to a schematic, it is useful to have a label on the instance that indicates the index of the split out of the total number splits for the device.")
("schSRC"
"schSRC( 
d_cvId 
)
=> l_result"
"Runs the schematic rules checker (SRC) on a specified cellview.")
("schStretch"
"schStretch( 
l_figIds
l_transform
)
=> t / nil"
"The schStretch command can be used to stretch objects. The API takes a list of figIds and a transformation, and then stretches the specified figure in figId~>cellView by applying the transformation.")
("schSubSelectBox"
"schSubSelectBox( 
[ w_windowId ] 
[ g_partial ] 
[ l_bBox ] 
)
=> t / nil"
"Deselects objects within a rectangular area from a specified schematic editor window. Implements the sub mode of area selection. With no arguments, it prompts you to enter the deselection area in the current window. Partial deselection is performed if the window environment variable partialSelect is set.")
("schSymbolToPinList"
"schSymbolToPinList( 
t_libName 
t_cellName 
t_viewName 
)
=> g_pinList / nil"
"Generates a pin list from a symbol cellview.")
("schSync"
"schSync( 
l_cvId 
)
=> t"
"Synchronizes the schematic and Cadence database (CDB) data representations.")
("schTraceNet"
"schTraceNet(
?topCellView td_topCellView
?net td_net
[ ?viewList t_viewList ]
[ ?hierPath lt_hierPath ]
?traceCB su_traceCB
)
=> t / nil"
"Traces a schematic hierarchical net through the design hierarchy and calls a user-defined callback at each level of the hierarchy where the net is present. The user-defined callback is passed as an argument, a user type describing the occurrence of the net being traced at a specific location in the design hierarchy.")
("schUnregisterFixedMenu"
"schUnregisterFixedMenu( 
t_category 
)
=> t / nil"
"Unregisters the user-registered fixed menu for a specific cellview type and reassigns the default fixed menu.")
("schUnregisterPopUpMenu"
"schUnregisterPopUpMenu( 
t_category 
[ t_mode ] 
)
=> t / nil"
"Unregisters the specific category and access mode for object-sensitive menus (OSMs) and reassigns the system default menus.")
("schUnregPostCheckTrigger"
"schUnregPostCheckTrigger( 
s_funcName 
)
=> t / nil"
"Unregisters a post check trigger routine.")
("schUnregPreCheckTrigger"
"schUnregPreCheckTrigger( 
s_functionName
[ g_onceOnly ]
)
=> t / nil"
"Unregisters a pre-check trigger routine.")
("schUpdateUserSRCErrorAndWarn"
"schUpdateUserSRCErrorAndWarn( 
x_nUserErr
x_nUserWarn 
) 
=> t / nil"
"Increases the number of errors and warnings that are reported on the Schematic Check dialog box that appears after running the schematic rules checker (SRC) commands. This function is useful if you implement additional checks besides those provided by the schematic rules checker.")
("schVerilogToPinList"
"schVerilogToPinList( 
t_libName 
t_cellName 
t_viewName 
)
=> g_pinList / nil"
"Generates a pin list from a Verilog HDL cellview.")
("schVIC"
"schVIC( 
d_cvId 
)
=> l_result"
"Runs the cross-view checker to check the consistency of the interface of one or more views against the view of the given cellview.")
("schViewToView"
"schViewToView( 
t_sourceLibName 
t_sourceCellName 
t_libName 
t_cellName 
t_viewFrom 
t_viewTo 
t_fromFunc 
t_toFunc 
)
=> t / nil"
"Generates one type of cellview from another.")
("schZoomFit"
"schZoomFit( 
f_scale1 
f_scale2 
[ w_windowId ]
)
=> t"
"Performs a zoom-to-fit with the given zoom scale values. If the schematic cellview contains a sheet border, the first zoom scale value is used. The second zoom scale value is used when there is no sheet border.")
("treeSaveHierarchy"
"treeSaveHierarchy( 
n_sessionWindowNum
t_file 
)
=> t / nil"
"Saves the entire hierarchy including objects that are not visible (filter settings are ignored in the Navigator).")
("treeSaveScreen"
"treeSaveScreen( 
n_sessionWindowNum
t_file 
)
=> t / nil"
"Saves the visible hierarchy (filter settings in the Navigator are taken into account).")
("tsg"
"tsg(
library
inputFile
[ templateFile ]
)
=> t"
"The tsg function is used to generate a schematicSymbol type cellview from a tsg (text-to-symbol generator) file. The tsg file, inputFile, is a simple text file that provides a textual description of the symbol.")
("lmCheckTerm"
"lmCheckTerm( 
d_cellList 
[ t_filename ] 
)"
"Checks the consistency of terminal name, type, and wth for all views of each specified cell.")
("lmCheckView"
"lmCheckView( 
d_cellList 
t_viewName 
[ t_fileName ] 
t_expression 
)"
"Evaluates a sequence of expressions for each specified cellview. Checks the property value for consistency.")
("lmCloseLib"
"lmCloseLib 
=> t / nil"
"Closes the previously opened working library.")
("lmDefTermProp"
"lmDefTermProp( 
[ t_cellName ] 
[ t_viewName ] 
( g_terminalList t_propertyName t_propertyValue ... t_propertyName = t_propertyValue ) 
( g_terminalList t_propertyName = t_propertyValue ... t_propertyName t_propertyValue ) 
)"
"Adds properties to the terminals of the specified cellview. To add terminal properties, add specified properties to the original property list and save the new file.")
("lmDefViewProp"
"lmDefViewProp( 
[ t_cellName ] 
[ t_viewName ] 
( t_propertyName t_propertyValue ... t_propertyName t_propertyValue )
)"
"Adds properties to the specified cellview. To add properties, add the specified properties to the original property list and save the new file.")
("lmDeleteTermProp"
"lmDeleteTermProp( 
d_cellList 
t_viewName 
( g_terminalList ... t_propertyName g_terminalList ... t_propertyName ) 
)"
"Deletes specified properties from the terminals of specified views.")
("lmDeleteViewProp"
"lmDeleteViewProp( 
d_cellList 
t_viewName 
t_propertyName ... t_propertyName 
)"
"Deletes specified properties from the specified view.")
("lmGetValue"
"lmGetValue( 
t_propertyName 
)"
"Returns the value of a specified view property in the current referenced view.")
("lmLoadData"
"lmLoadData( 
t_file 
t_lib [ { t_path | nil } [ { t_config | nil } [ { t_mode | nil } ] ] ] 
) 
=> t / nil"
"Opens a working library, loads the library command file, and closes the library when you are finished.")
("lmOpenLib"
"lmOpenLib( 
t_lib [ { t_path | nil } [ { t_config | nil } [ { t_mode | nil } ] ] ] 
) 
=> t / nil"
"Opens a library.")
("lmPrintLibTermProp"
"lmPrintLibTermProp( 
t_viewName 
[ t_filename ] 
)"
"Prints terminal properties of the specified view for each cell in the current library.")
("lmPrintLibViewProp"
"lmPrintLibViewProp( 
t_viewName 
[ t_filename] 
)"
"Prints properties of the specified view for each cell in the current library.")
("lmPrintTerm"
"lmPrintTerm( 
t_cellName 
t_viewName 
)"
"Prints names, types, and wths of all terminals of the specified cellviews.")
("lmPrintTermProp"
"lmPrintTermProp( 
t_cellName 
l_viewList 
[ t_filename ] 
)"
"Prints properties of all terminals of the specified views of a cell.")
("lmPrintViewProp"
"lmPrintViewProp( 
t_cellName 
l_viewList 
[ t_filename ] 
)"
"Prints properties of all specified views of a cell.")
("lmReset"
"lmReset( )"
"Resets all global variables to their default values.")
("lmSimView"
"lmSimView( 
t_cellName 
t_templateViewName 
t_targetViewName 
[ t_targetViewtype ]
t_propertyName = t_propertyValue ... t_propertyName t_propertyValue 
)"
"Creates a view with specified properties for the specified cell.")
("simRep"
"simRep(
t_cellName 
t_templateViewName 
t_targetViewName 
[ t_targetViewtype ]
t_propertyName = t_propertyValue ... t_propertyName t_propertyValue 
)"
"Creates a view with specified properties for the specified cell. Use this function only for backward compatibility with Edge 2.1; otherwise, use the lmSimView function.")
("dmvStart"
"dmvStart(
[arg]
)
=> t / nil"
"(IC6.1.8 Only) Starts new AMS Design and Model Validation (amsDmv) GUI session from Virtuoso.")
("sipImportLgaBgaTextSkill"
"sipImportLgaBgaTextSkill(
myCV
myDieTextFileName
[ myPadWidth ]
[ myDelimiter ]
)
=> none"
"(IC6.1.8 Only) Imports LGA/BGA text on a blank layout. It creates a layout view if it does not exist.")
("vsdpiWriteCDF"
"vsdpiWriteCDF(
t_lib
? b_overwrite
? b_addinjectedprop
)
=> none"
"(IC6.1.8 Only) Writes key properties from PTF (Part Table Files) as CDF properties. The DE-HDL parts contain properties specified in PTF files at project or cell-level and these properties impact packaging of parts used in the design.")
("vsdpiRunDieExport"
"vsdpiRunDieExport(
d_cvid)
=> t / nil"
"(IC6.1.8 Only) Runs Die Export on a given cellview.")
("vsdpiGetValueOfDieExportField"
"vsdpiGetValueOfDieExportField(
d_cvid)
t_fieldName
[t_tagName]
=> tagName / nil"
"(IC6.1.8 Only) Returns the value of tagName from the die_config.xml file as a string.")
("vsdpiSaveXML"
"vsdpiSaveXML(
d_cvid)
=> t / nil"
"(IC6.1.8 Only) Saves the die_config.xml file on the disk.")
("vsdpiSetValueOfDieExportField"
"vsdpiSetValueOfDieExportField(
d_cvid)
t_fieldName
t_fieldValue
[t_tagName]
=> t / nil"
"(IC6.1.8 Only) Sets the field values of the die_config.xml file without opening the Die Export form. If the die_config.xml file does not exist, this function creates an XML file with default values. This function updates the values only in the memory. To update the XML on the disk, use vsdpiSaveXML.")