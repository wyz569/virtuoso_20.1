;SKILL Language Functions
("vicOpenVlogCallBack"
"vicOpenVlogCallBack(
)
=> t / nil"
"The function vicOpenVlogCallBack() is a CIW Menu call-back function. This function is called when the Verilog integration environment is invoked. This function invokes the GUI for the Verilog Integration Form.")
("vlVicCrossSelectionForm"
"vlVicCrossSelectionForm(
)
=> t / nil"
"This function displays the Cross Selection Setup form. This form is used to cross-select objects of a design between SimVision and Virtuoso Schematic Editor when performing interactive simulation.")
("vlVicPSForm"
"vlVicPSForm(
)
=> t / nil"
"This function displays the Post Simulation Analysis form. This form is used to cross-select objects of a design between SimVision and Virtuoso Schematic Editor when performing post-simulation analysis.")
("fnlAbortNetlist"
"fnlAbortNetlist(
)
=> nil"
"Aborts netlisting. When the formatter detects an error during netlisting, it calls this function to inform the netlister to abort netlisting.")
("fnlCurrentCell"
"fnlCurrentCell(
)
=> d_cellviewId / nil"
"Returns the master of the current instance being expanded. The function should be called only during the evaluation of the NLPcompleteElementString and NLPcreateModelString properties.")
("fnlCurrentCellCdsName"
"fnlCurrentCellCdsName(
)
=> t_cellName / nil"
"Returns the master cell name of the current instance being expanded. The function should be called only during evaluation of the NLPcompleteElementString and NLPcreateModelString properties. The function corresponds to the netlister-defined BlockName property.")
("fnlCurrentInst"
"fnlCurrentInst(
)
=> d_instanceId / nil"
"Returns the current instance being expanded. The function should be called only during expansion of the NLPcompleteElementString property. Do not use the master field of the resulting instanceId. If you use it, you get the symbol cellview rather than the stopping cellview corresponding to the symbol placed in the schematic. To get the instance master in a format instruction, use the fnlCurrentCell function.")
("fnlCurrentInstCdsName"
"fnlCurrentInstCdsName(
)
=> t_pathName / nil"
"Returns the full instance pathname to the current instance being expanded. The function should be called only during expansion of the NLPcompleteElementString property.")
("fnlCurrentIteration"
"fnlCurrentIteration(
)
=> x_index"
"Returns an index of the current iterated instance being expanded. Only an instance can be iterated and placed in the schematic.")
("fnlCurrentModelExtName"
"fnlCurrentModelExtName(
)
=> t_modelName / nil"
"Returns the netlister-assigned model name of the current instance being expanded. The function should be called only during evaluation of the NLPcompleteElementString and NLPcreateModelString properties. The function corresponds to the netlister-defined ModelNumber property.")
("fnlCurrentSig"
"fnlCurrentSig(
)
=> d_sigId / nil"
"Returns the current signal being expanded.")
("fnlCurrentSigPathName"
"fnlCurrentSigPathName(
)
=> t_pathName / nil"
"Returns the full pathname of the current signal being expanded. It corresponds to the netlister-defined NetPathName property. As the corresponding property, this function is valid only during evaluation of the NLPcreateNetString property.")
("fnlGetGlobalSigNames"
"fnlGetGlobalSigNames(
)
=> l_sigNames / nil"
"Returns a list of strings that are the names for all of the global signals contained in the design hierarchy. If the netlister-assigned name is required, you can pass these names to the fnlSigCdsNameExtName function to translate them during the header or footer evaluation. The fnlGetGlobalSigName function can be called at any time during the netlisting process.")
("fnlInstCdsNameExtName"
"fnlInstCdsNameExtName(
t_instName
)
=> t_netName / nil"
"Returns the netlister-assigned name for the instance name specified as an argument, if the instance is found.")
("fnlPathList"
"fnlPathList(
)
=> l_pathList / nil"
"Returns a list representing the current instance path down the schematic hierarchy to the current instance or signal being expanded.")
("fnlPrint"
"fnlPrint(
g_general
)
=> t / nil"
"Prints its argument to the netlist file.")
("fnlSearchPropString"
"fnlSearchPropString(
t_propName 
g_localSearch
)
=> t_propValue / nil"
"Returns property value for the property name specified as an argument.")
("fnlSigCdsNameExtName"
"fnlSigCdsNameExtName(
t_sigName
)
=> t_netName / nil"
"Returns the netlister-assigned name for the signal name specified as an argument, if the signal is found.")
("fnlTermCdsNameExtName"
"fnlTermCdsNameExtName(
t_sigName
)
=> t_netName / nil"
"Returns each netlister-assigned signal name for the signal attached to the terminal whose name is specified as an argument. The function is equivalent to the substitution expression [ |name ]. As with the matching expression, the terminal names allowed as arguments are restricted to the terminals attached to the current instance.")
("fnlTermExtName"
"fnlTermExtName(
d_termId
x_bit
)
=> t_netName / nil"
"Returns the netlister-assigned name for the signal attached to the bit of the terminal specified as an argument. The function is similar to the substitution expression [ |name ]. As with the matching expression, the terminals allowed as arguments are restricted to the formal terminals of the master of the current instance. This function should be called only during the evaluation of the NLPcompleteElementString property.")
("fnlTopCell "
"fnlTopCell(
)
=> d_cellviewId / nil"
"Returns the top level cellview being netlisted. The function can be called throughout the netlist process. It may be especially useful during the evaluation of the NLPnetlistHeader and NLPnetlistFooter properties, where you can use it to output information about the top level design for the header and footer of the netlist. There is no equivalent netlister defined property.")
("cat"
"cat(
t_filename
)
=> t / nil"
"Prints the contents of filename on standard output. The function is defined in etc/skill/si/simcap.ile.You can modify this function.")
("cdsGetNetlistMode"
"cdsGetNetlistMode(
)
=> Analog / Digital / Compatibility"
"This function returns a string which is the value of the shell environment variable CDS_Netlisting_Mode set by the user in the current shell to invoke Virtuoso.")
("cdsSetNetlistMode"
"cdsSetNetlistMode(
)
=> t / nil"
"This function is used to set the netlisting mode based on the current value of the SHELL environment variable CDS_Netlisting_Mode. This SHELL environment variable can have the value Analog, Digital, or Compatibility. The function cdsSetNetlistMode is used from within the Virtuoso SKILL environment to update the settings without restarting Virtuoso.")
("ERC"
"ERC(
)
=> t / nil"
"It is the function that defines the sequence of steps for performing an ERC (Electric Rule Checking). If no overriding function has been provided by the user then this function is invoked; it checks the variables the sequence of steps like the netlisting (ercNetlist) and calls the ERC program for execution (ercSimout).")
("netlist"
"netlist(
) 
=> t / nil"
"Performs all needed steps to generate a netlist. If the simDoNetlist variable is not t, the function returns t and does not execute.")
("runsim"
"runsim(
)
=> t / nil"
"Executes the SKILL instructions stored in the simCommand variable, which is to run the simulator for this simulation. The function then calls simOutWithArgs with the correct arguments to translate the textual simulator output stored in the simout.tmp file and produce the si.out file.")
("simAddProbeCapByName"
"simAddProbeCapByName(
netName
)
=> value"
"This function displays the net capacitance of the net name supplied. This function is to be used in conjunction with the function simReadNetCapFile, which reads in the sim.cap file, initializing all the net names in the design with the associated capacitance values. This function will refresh the active display window placing the capacitance value of the net name given.")
("simAddProbeCapByScreen"
"simAddProbeCapByScreen(
)"
"Displays all the nets capacitance on the current screen.")
("simAddProbeCapForBusBit"
"simAddProbeCapForBusBit(
)"
"Displays net capacitance on each bit of a bus.")
("simCheckExist"
"simCheckExist ( 
l_variableNames
)
=> t / nil"
"Returns t if all of the variables in the variableNames list argument are defined and are not set to nil. Otherwise, returns nil and prints an error message.")
("simCheckHeader"
"simCheckHeader( 
p_inf
)
=> t / nil"
"Checks the header stamp of the net capacitance file pointer (sim.cap). The header stamp must be the first word on the first line of the sim.cap file, and it must be equal to Net_Capacitance_File. Use the infile( ) function to open the sim.cap file before calling this function.")
("simCheckVariables"
"simCheckVariables(
)
=> t / nil"
"Checks whether the variables simSimulator simCellName, simLibName, simViewName, simRunDir, simViewList, simStopList, simSedFile, simCommand, simNlpGlobalLibName, and simNlpGlobalCellName have been set and are not nil.")
("simCheckViewConfig"
"simCheckViewConfig(
t_libName
t_cellName
t_viewName
)
=> t / nil"
"Checks if the design you want to netlist is an HDB configuration.")
("simDateStamp"
"simDateStamp( 
t_string 
) 
=> t / nil"
"Prints the value contained in t_string variable followed by the date to standard output.")
("simDeleteRunDirFile"
"simDeleteRunDirFile( 
t_fileName 
)
=> t / nil"
"Deletes the t_fileName file in the simulation run directory.")
("simDesignVarCdsNameExtName"
"simDesignVarCdsNameExtName( 
t_cdsDesignVarName 
)
=> t_string"
"Takes the designer-assigned variable name, cdsDesignVarName, as an argument and returns the netlister-assigned name for it as it appears in the netlist. The API reads the mapping information from the simRunDir directory using the design information set through the simCellName, simLibName, simViewName SKILL variables. Therefore, all these variables must be set before calling this API.")
("simDesignVarExtNameCdsName"
"simDesignVarExtNameCdsName( 
t_extDesignVarName 
)
=> t_string"
"Takes the netlister-assigned variable name, extDesignVarName, as an argument and returns the designer-assigned name for it as it appears on the schematic. The API reads the mapping information from the simRunDir directory using the design information set through the simCellName, simLibName, simViewName SKILL variables. Therefore, all these variables must be set before calling this API.")
("simDrain"
"simDrain(
)
=> t"
"This function takes no arguments and executes the equivalent of drain( stdout ) when executed in the nongraphic environment. No action is taken or required when executed in the Cadence graphics environment.")
("simExecute"
"simExecute(
t_command
) 
=> t / nil"
"Executes the UNIX command or program given as its single argument. The function is defined in etc/skill/si/simcap.ile. You can modify this function.")
("simFindFile"
"simFindFile( 
t_filename 
) 
=> t_filename / nil"
"Finds the full file system pathname to t_filename in the install hierarchy if it exists. The pathname this function searches for is specified by the prependInstallPath function. The function is defined in bin/si.You cannot modify this function.")
("simFlattenWithArgs"
"simFlattenWithArgs(
t_simLibName
t_simCellName
t_simViewName
t_simRunDir
t_simNlpGlobalLibName
t_simNlpGlobalCellName
t_simNlpGlobalViewName
l_simViewList
l_simStopList
t_simGlobalErrFileName
t_simProbeFileName
t_simSimulator
f_simTimeUnit
f_simCapUnit
t_simFlatLibName
t_simFlatCellName
t_simFlatViewName
t_simFlatViewTypeName
)
=> t / nil"
"For running the prFlatten tool. The design hierarchy is specified by simLibName, simCellName, and simViewName. The global formatting properties are defined in simNlpGlobalLibName, simNlpGlobalCellName and simNlpGlobalViewName. The function is defined in bin/si and also in the Cadence graphics program.")
("simGetLoginName"
"simGetLoginName(
)
=> t_string"
"Returns the string-valued login name of the current user. The function is defined in bin/si. You cannot modify this function.")
("simGetTermList"
"simGetTermList(
t_libName
t_cellName
t_viewName
)
=> l_list / nil"
"This function is used to collect all the terminals for a block and return them as a list.")
("simIlSleep"
"simIlSleep(
x_seconds
)
=> t / nil"
"Suspends the current process by the number of seconds specified as an argument. The current process in a replay file launches si in the batch mode and waits for si to return before it executes the next command in the file.")
("simIfNoProcedure"
"simIfNoProcedure( 
procedureDefinition
)
=> t"
"Same as the SKILL keyword procedure, except the procedure definition given as an argument is only defined if it is not currently defined. This function is used instead of the SKILL procedure to permit the overriding of procedures defined in SE by procedures in .simrc.")
("simin"
"simin(
)
=> t / nil"
"Translates the designer-assigned names for nets and instances in the control file to the corresponding netlister-assigned names and produces the si.inp file for input to the simulator. A message is printed stating that simin is being run, and then the simInWithArgs function is called with the correct arguments to do the translation.")
("simInitControl"
"simInitControl(
) 
=> t / nil"
"If a file called control exists in the simulation run directory, this function returns t.")
("simInitRaw"
"simInitRaw(
) 
=> t / nil"
"Creates the raw directory in the simulation run directory that stores the waveform file. The function is defined in etc/skill/si/caplib/init.ile. You can modify this function.")
("simInitRunDir"
"simInitRunDir(
) 
=> t / nil"
"Executes the list of functions specified by the variable simInitRunActions. If this variable is not set then simInitControl and simInitRaw are the default list of functions to be executed in order, which initializes a simulation run directory.")
("simInitSimulator"
"simInitSimulator(
)
=> t / nil"
"Calls the function with the same name as the simulator name specified by the simSimulator variable (for instance, silos). This function must be defined in a file with the same name with either the .il or the .ile suffix added and stored in the local/si/caplib directory.")
("simInstExtNameCdsName"
"simInstExtNameCdsName(
t_extInstName
) 
=> t_string"
"Takes as an argument the netlister-assigned instance name extInstName and returns the designer-assigned instance name as it appears in the schematic.")
("simInstCdsNameExtName"
"simInstCdsNameExtName(
t_cdsInstName
)
=> t_string"
"Takes as an argument the designer-assigned instance name and returns the netlister-assigned instance name for cdsInstName as it appears in the netlist. The exact name returned depends on the design.")
("simInWithArgs"
"simInWithArgs( 
l_fileList
t_runDirName 
t_libName 
t_cellName 
t_viewName
)
=> t / nil"
"Translates the designer-assigned names for nets and instances in the input files into the corresponding netlister-assigned names, and creates the files for input into the simulator.")
("simLoadNetlisterFiles"
"simLoadNetlisterFiles( 
t_fileName
)
=> t / nil"
"Loads the file given as an argument from the local/fnl directory. If it does not find the file in the local/fnl directory, it searches in the etc/skill/fnl directory in the install hierarchy. If it does not exist, no error is generated.")
("simLoadSimulatorFiles"
"simLoadSimulatorFiles(
)
=> t / nil"
"Loads the simulator-specific file from the local/si/caplib directory. If it does not find the file in local/si/caplib, it searches etc/skill/si/caplib directory in the install hierarchy. If the file does not exist, no error is generated.")
("simNetExtNameCdsName"
"simNetExtNameCdsName( 
t_extNetName
)
=> t_string"
"Takes as an argument the netlister-assigned net name and returns the designer-assigned net name for extNetName as it appears in the schematic.")
("simNetlistWithArgs"
"simNetlistWithArgs( 
t_simLibName
t_simCellName
t_simViewName 
t_simRunDir 
t_simNlpGlobalLibName
t_simNlpGlobalCellName
t_simNlpGlobalViewName
l_simViewList
l_simStopList 
t_simGlobalErrorFileName 
t_simProbeFileName 
t_simSimulator 
f_simTimeUnit 
f_simCapUnit 
t_simNetlistFileName
t_simFlatViewTypeName
)
=> t / nil"
"Generates a flattened description of the design hierarchy specified by simLibName, simCellName, and simViewName in the syntax described by the global formatting properties in simNlpGlobalLibName, simNlpGlobalCellName and simNlpGlobalViewName.")
("simNetCdsNameExtName"
"simNetCdsNameExtName( 
t_cdsNetName
)
=> t_string"
"Takes as an argument the designer-assigned net name for cdsNetName and returns the netlister-assigned net name as it appears in the netlist.")
("simNoNetlist"
"simNoNetlist(
)
=> t / nil"
"Sets the simNoNetlist variable to t to specify that no netlist is generated, and then calls sim to perform a complete simulation, except for netlist generation.")
("simout"
"simout(
)
=> t / nil"
"Translates the netlister-assigned names for nets and instances in the simout.tmp file to the corresponding designer-assigned names and produces the si.out file. The simout.tmp file is normally the simulator text output. A message is printed stating that simout is being run, and then the simOutWithArgs function is called with the correct arguments to do the translation.")
("simOutWithArgs"
"simOutWithArgs(
l_fileList
t_runDirName
t_libName
t_cellName
t_viewName
) 
=> t / nil"
"Translates the netlister-assigned names for nets and instances in the input files specified in fileList to the corresponding user-assigned names, and produces the output files specified in fileList.")
("simPrintEnvironment"
"simPrintEnvironment(
) 
=> t / nil"
"Writes the primary simulation control variables and their values to the si.env file in the simulation run directory.")
("simPrintError"
"simPrintError( 
t_text 
)
=> t"
"Prints the text argument to the stderr port if executed in the Cadence nongraphic environment. If the function is called from within the Cadence graphics environment, the output is written to the CIW window.")
("simPrintErrorLine"
"simPrintErrorLine(
g_listArg
)
=> t"
"This function is used to list the terminals for a cell and write them out to a file.")
("simPrintTermList"
"simPrintTermList(
t_libName
t_cellName
t_viewName
t_fileName
) 
=> t"
"This function is used to list the terminals for a cell and write them out to a file.")
("simPrintMessage"
"simPrintMessage(
t_text
)
=> t"
"Prints the text argument to the stdout port if executed in the Cadence nongraphic environment. If the function is called from within the Cadence graphics environment, the output is written to the CIW window.")
("simReadNetCapFile"
"simReadNetCapFile(
filename
)
=> t / nil"
"Reads in the net capacitance file and initializes the simAllNets global variable. This contains the list of all nets in the design and their associated capacitance values, which are present in the capacitance file.")
("simRunDirInfile"
"simRunDirInfile(
t_fileName
) 
=> t / nil"
"Opens the fileName file in the simulation run directory for reading. It creates a full file system pathname to the file in the simulation run directory and then passes the file as an argument to the SKILL infile function. The function returns a SKILL port.")
("simRunDirLoad"
"simRunDirLoad(
t_fileName
)
=> t / nil"
"Loads the t_fileName file in the simulation run directory. It creates a full file system path to the file in the simulation run directory and then passes the file as an argument to the SKILL load function.")
("simRunDirOutfile"
"simRunDirOutfile(
t_fileName
)
=> t / nil"
"Opens the fileName file in the simulation run directory for writing. It creates a full file system pathname to the file in the simulation run directory and then passes the file as an argument to the SKILL outfile function. The function returns a SKILL port.")
("simSetDef"
"simSetDef(
variableName
g_value
)
=> t"
"Sets the variableName variable to value only if the variable is not yet set or if the symbol variableName evaluates to nil. If the variable was set prior to calling this function, and the simGenWarnings variable is not nil, a warning message is printed to stdout that the value of the variableName variable is overridden.")
("simSetDefWithNoWarn"
"simSetDefWithNoWarn(
variableName
g_value
) 
=> t / nil"
"Same as simSetDef except that no warning is generated if variableName is already set. The function is defined in etc/skill/si/caplib/util.ile. You can modify this function.")
("simStringsToList"
"simStringsToList(
t_stringArg
)
=> list / nil"
"Function takes as an argument a string of names separated by blanks and tab characters and returns a list of strings. The function is defined in bin/si.")
("simSubProbeCapByName"
"simSubProbeCapByName(
netName
)"
"Display net capacitance by name.")
("simSubProbeCapByScreen"
"simSubProbeCapByScreen(
)"
"Display all the net capacitance on the current screen.")
("simVertToHoriz"
"simVertToHoriz(
t_inputFileName
t_outputFileName
)
=> t / nil"
"Reads in the inputFileName file, converts names in vertical table headers to horizontal, and copies the rest of the file.")
("simCleanRun"
"simCleanRun( 
)
=> t / nil"
"Deletes files created by both SE and the analysis tool being used from the simulation run directory. simCleanRun deletes only files that can be recreated by renetlisting or resimulating. Files which are required to rerun the simulation, such as the si.env and control files, are not deleted. The function displays a dialog box so you can confirm that you intend to delete the information. If the deletion is confirmed, the files that SE creates are deleted along with the files specified by the simCleanFileList variable. The simCleanFileList variable is set differently by each application integrated into SE.")
("simEditFileWithName"
"simEditFileWithName( 
t_fileName
)
=> ipcId / nil"
"This function internally calls the edit function to display the specified file.")
("simInitEnv"
"simInitEnv( 
) 
=> t / nil"
"Initializes the simulation environment within the Cadence graphics environment.")
("simInitEnvWithArgs"
"simInitEnvWithArgs( 
t_runDirName 
t_libName | nil
t_cellName | nil
t_viewName | nil
t_simulatorName | nil
g_forceInit
) 
=> t / nil"
"Initializes the simulation environment within the Cadence graphics environment. In addition to defining the SKILL environment needed for SE and the target application, the run directory is created and initialized as needed.")
("simPostNameConvert"
"simPostNameConvert(
)
=> t / nil"
"Frees all allocated storage and marks the map structure as invalid. Since this function is callable from SKILL, the parameter has to be maintained as a list.")
("simPreNameConvert"
"simPreNameConvert(
)
=> t / nil"
"This function is called to set up variables needed for name conversion routines. If no arguments are passed, it does the setup by doing a lookup simulator environment settings.")
("simJobMonitor"
"simJobMonitor(
)
=> t / nil"
"Displays a form listing the analysis jobs invoked in the background using the simRunNetAndSim( ) and simRunNetAndSimWithArgs( ) functions. The analysis job is listed on the form, along with its current status, time of invocation, and execution priority. Using this form, you can view the run log of a job, terminate the execution of an active job, suspend the execution of an active job, change the execution priority of a job, or delete a job from the form.")
("simRunNetAndSim"
"simRunNetAndSim( 
) 
=> t / nil"
"Starts an analysis job in either foreground or background mode.")
("simRunNetAndSimWithArgs"
"simRunNetAndSimWithArgs( 
t_libName | nil
t_cellName | nil
t_viewName | nil
t_simulatorName | nil
g_doNetlist
g_doSimulation
g_runBackground
x_jobPriority
) 
=> t / nil"
"Starts an analysis job in either foreground or background mode.")
("simRunNetAndSimWithCmd"
"simRunNetAndSimWithCmd( 
t_libName | nil
t_cellName | nil
t_viewName | nil
t_simulatorName | nil
t_cmdToBeExecuted
g_runBackground
x_jobPriority
) 
=> t / nil"
"Executes a command you specify in either foreground or background mode. The simulation environment must be initialized before simRunNetAndSimWithCmd is called. The simRunDir global variable specifies the current run directory. It is set when the simulation environment is initialized.")
("simViewFileWithArgs"
"simViewFileWithArgs( 
t_fileName
l_windowSize
[ t_windowTitle ]
) 
=> winID / nil"
"This function calls the view function with the file name as the first argument and the window size as the second argument. The view function creates a viewFile window where the file text is displayed with the banner as the value supplied through the optional argument in the function simViewFileWithArgs.")
("simWaveOpen"
"simWaveOpen( 
) 
=> t / nil"
"Invokes a form displaying the current simulation run directory name, and prompts you for the name of the waveform file to display. The default waveform file is raw/waves in the simulation run directory. When the file name is specified, a new window is opened, displaying the waveform information.")
("iseCloseSchWindow"
"iseCloseSchWindow(
)
=> t / nil"
"Closes the schematic window.")
("iseCloseSimWindow"
"iseCloseSimWindow(
)
=> t / nil"
"Closes the simulation window.")
("iseCompleteInteractive"
"iseCompleteInteractive(
)
=> t / nil"
"Completes an interactive simulation session by closing all windows opened for interactive simulation and updates the ISE state machine so that ISE is aware that the interactive session has ended.")
("iseEnterNodeNamesList"
"iseEnterNodeNamesList( 
iseEnterPointFunc
)
=> t / nil"
"Prompts the designer to enter node names into a form and returns the netlister-assigned names as a SKILL list of strings corresponding to the schematic names entered.")
("iseExitSimulator"
"iseExitSimulator(
)
=> t / nil"
"Terminates the simulation using the command string you define through the ISE variable iseExitSimulatorCommand. If the simulation is remote, this routine copies every file from the remote host back to the local simulation run directory. To use the iseExitSimulator function properly, write a function in which you call iseExitSimulator. After this function returns, you can do post-processing such as translating netlister-assigned names.")
("iseGetExtName"
"iseGetExtName(
iseEnterPointsFunc
)
=> t / nil"
"Requires the call back function to be called by the enter points function in iseGetExtName. The iseGetExtName routine returns the netlister-assigned name of the object being pointed at in the schematic window.")
("iseGetInputFromEncapWindow"
"iseGetInputFromEncapWindow (
t_tmpStream
)
=> t / nil"
"This procedure is registered to be called whenever something is typed into the input window of the encapsulation window.This input - tmpStream - is passed into the procedure to be packaged before it is sent to the simulator. This routine also checks if the user has registered a function to be called so that this simulator inputs can be passed to this user-registered function for filtering. After filtering, the user can call the routine isePrintSimulatorCommand such that the data will be sent to the simulator. All inputs typed into the encapsulation window is automatically reflected in the history section of the encapsulation window. If no user-function is registered then the inputs are sent directly to the simulator without filtering.")
("iseGetMappedProbeList"
"iseGetMappedProbeList(
)
=> t / nil"
"Returns a SKILL list of the netlister assigned names of all of the nets currently probed in the schematic window.")
("iseGetProbeList"
"iseGetProbeList(
)
=> t / nil"
"Returns a SKILL list of the designer assigned names of all nets currently probed in the schematic window.")
("iseInitSchematicWindow"
"iseInitSchematicWindow(
)
=> t / nil"
"Reads in the design specified by the simLibName, simLibConfigName, simCellName, simViewName, and simVersionName variables in the schematic window maintained by ISE.")
("iseInitSimWindow"
"iseInitSimWindow(
)
=> t / nil"
"Initializes the simulator window.")
("iseNetExtNameCdsName"
"iseNetExtNameCdsName(
)
=> t / nil"
"Brings up a form for the designer to enter a netlister-assigned node name. A second form appears which displays both this name and its corresponding designer-assigned name.")
("iseOpenWindows"
"iseOpenWindows(
) 
=> t / nil"
"Opens three new windows and updates internal ISE structures required to keep track of the identifications of these windows. The first covers the bottom right quarter of the screen and is set to be the schematic window. The second occupies the upper half of the screen and is the waveform window. The third window occupies the lower left quarter of the screen and is used to run the simulator. The original windows are not altered, but instead are overlaid with the new windows. This is the default window configuration.")
("isePrintName"
"isePrintName(
)
=> t / nil"
"Prints the netlister assigned name of the object being pointed at in the schematic window to the input portion of the simulation window, starting from the current cursor position.")
("isePrintNameCB"
"isePrintNameCB( 
t_tempList
)
=> t / nil"
"This function is the callback function of isePrintName which is to be called by the enterPoints function in iseGetExtName.")
("isePrintSimulatorCommand"
"isePrintSimulatorCommand( 
[ commandArg | nil ]
)
=> t / nil"
"This function is used when you create menu commands that interface with both the design and simulator.")
("iseReleaseNodeFrom"
"iseReleaseNodeFrom(
)
=> t / nil"
"After forcing a node to a preferred value, this function calls the function specified by the iseReleaseFunc variable to release the node from that value.")
("iseSendOutputToEncapHistory"
"iseSendOutputToEncapHistory( 
t_myText
)
=> t / nil"
"This function writes the string passed, in as a parameter to the history section of the encapsulation window.")
("iseSearchForASchWindow"
"iseSearchForASchWindow(
)
=> t / nil"
"If iseDontOpenSchematicWindowIfOneExists is set to t, this function searches for the first existing schematic window with the correct design opened for edit and use that window as the ISE schematic window.")
("iseSetEncapBindKeys"
"iseSetEncapBindKeys(
)"
"This function set the bindkeys for the encapsulation window.")
("iseSetNodeTo"
"iseSetNodeTo(
)
=> t / nil"
"This function replaces the routine iseSet. It calls the function specified by the iseSetFunc variable.")
("iseSimulate"
"iseSimulate(
)
=> t / nil"
"This function calls the function specified by the iseSimulateFunc variable.")
("iseStartInteractive"
"iseStartInteractive(
) 
=> t / nil"
"This function sets up the default interactive simulation environment.")
("iseStartSimulator"
"iseStartSimulator(
) 
=> t / nil"
"This function issues the command to start the simulator in the simulator window by first evaluating the iseInvokeSimulatorFunc variable.")
("iseUpdateNetlist"
"iseUpdateNetlist(
)
=> t / nil"
"This function generates a new netlist by calling the SE netlist function.")
("iseUpdateStimulus"
"iseUpdateStimulus(
)
=> t / nil"
"This function runs the input name translation simin function.")
("hnlGetCellHdbProps"
"hnlGetCellHdbProps(
d_cellView
)
=> list / nil"
"This function is called by the formatter during netlisting to get the list of HDB properties and their values for the given cellview. The function uses the DBId of cellview to extract the libName and cellName. It further uses the libName/cellName combination to query the HDB properties from prop.cfg property file.")
("hnlGetSimulator"
"hnlGetSimulator(
)
=> ams"
"This function provides a distinction between AMS and other flows. When it is called from the AMS flow, the function displays AMS as output, otherwise it behaves the same as simSimulator.")
("hnlPcellIsParamOverridden"
"hnlPcellIsParamOverridden(
dbobject
t_string
)
=> t / nil"
"This function finds if the Pcell param of a master is overridden at the instance.")
("hnlGetPropVal"
"hnlGetPropVal(
t_propName
d_cellView
d_inst
)
=> propValue / nil"
"Returns the value of the property whose string name is given as the first argument. The property is searched for first on the instance given as the third argument, and if not found there, on the cellview given as the second argument. If the property is found, the value is returned. Otherwise, nil is returned.")
("hnlGetRoundProp"
"hnlGetRoundProp(
t_propName
)
=> propValue / nil"
"Locates the property of the given name, using hnlGetPropVal( ), hnlCurrentMaster, and hnlCurrentInst, and then returns the result rounded to the nearest integer. If the named property is not found, nil is returned.")
("hnlGetScaleCapacitance"
"hnlGetScaleCapacitance(
t_propName
)
=> propValue / nil"
"Locates the property of the given name, using hnlGetPropVal, hnlCurrentMaster, and hnlCurrentInst, divides the value by the value of the simCapUnit variable, and then returns the result rounded to the nearest integer. If the named property is not found, nil is returned. If simCapUnit == nil, the value of the property is returned, again rounded to the nearest integer.")
("hnlGetScaleMarginalDelay"
"hnlGetScaleMarginalDelay(
t_propname
)
=> propValue / nil"
"Locates the property of the given name, using hnlGetPropVal( ), hnlCurrentMaster, and hnlCurrentInst, divides the value by the value of the simTimeUnit variable, multiplies it by the value of the simCapUnit variable, and then returns the result rounded to the nearest tenth. If the named property is not found, nil is returned. If simTimeUnit == nil, the value of the property is returned, again rounded to the nearest tenth.")
("hnlGetScaleTimeUnit"
"hnlGetScaleTimeUnit(
t_propName
)
=> propValue / nil"
"Locates the property of the given name, using hnlGetPropVal, hnlCurrentMaster, and hnlCurrentInst, divides the value by the value of the simTimeUnit variable, and then returns the result rounded to the nearest integer. If the named property is not found, nil is returned. If simTimeUnit == nil, then the value of the property is returned, again rounded to the nearest integer.")
("hnlGetSourceFile"
"hnlGetSourceFile(
d_instId | d_cellviewId
)
=> path"
"This function is called by the formatter during netlisting to get the path of source file of the given instance or cellview as specified in the HDB (prop.cfg property file).")
("hnlGetSourceFileModels"
"hnlGetSourceFileModels(
)
=> listCells"
"This function is called by the formatter during netlisting to get a list of names of the netlisted cells. For the cells that have the -subckt value set using the sourcefile_opts property, the cell names in the list are replaced by the subcircuit names, -subckt <name>.")
("hnlGetSymbolPropVal "
"hnlGetSymbolPropVal(
s_propSymbol
d_cellView | d_inst
)
=> propValue / nil"
"Returns the value of the property whose symbol name is given as the first argument. The property is searched for first on the instance given as the third argument, and if not found there, on the cellview given as the second argument. If the property is found, the value is returned; otherwise, nil is returned.")
("hnlGetInstanceCount"
"hnlGetInstanceCount(
)
=> numInstances"
"Returns the number of instances netlisted in a single session. The function does not count the instances for which the nlAction=ignore property is set. This functions helps estimate the time taken to netlist and simulate based on the number of instances in a design. For example, this function can be used to implement a progress bar. A formatter can use this function only when OSS calls formatter functions to print a netlist.")
("hnlEMHGetDigitaGlobalNets"
"hnlEMHGetDigitaGlobalNets(
)
=> globalNetList"
"Returns a list of global nets found in digital design during mixed signal netlisting. This is used by auCdl netlister to print *.GLOBAL statements for these nets in the top level netlist. This function must be called from Cadence internal formatters or ADE third-party integration formatters only when mixed signal netlisting is in progress.")
("hnlEMHGetDigitalNetlistFileName"
"hnlEMHGetDigitalNetlistFileName(
)
=> path"
"Returns the netlist file path for digital netlist during mixed signal netlisting. This path is exported for use by formatters like auCdl to include digital netlist file name in top level netlist. This function must be called from Cadence internal formatters or ADE third-party integration formatters only when mixed signal netlisting is in progress.")
("hnlEMHSetVerbosityLevel"
"hnlEMHSetVerbosityLevel(
x_integer
)
=> t"
"Raises the level of informative output from mixed signal netlister. To avoid cluttering of output, the level should be set to one.")
("hnlOpenTopCell"
"hnlOpenTopCell( 
t_lib
t_cell
t_view
)
=> obj"
"This function opens the top level cell view. If lib/cell/view is an HDB config, then first open the config before opening the top level cell view.")
("hnlScaleCapacitance"
"hnlScaleCapacitance(
g_propVal
t_propName
)
=> value"
"Takes the value given as argument, divides it by the value of the simCapUnit variable, and then returns the result rounded to the nearest integer. If simCapUnit == nil, then the value of the property is returned, again rounded to the nearest integer. The property name given as the second argument is used for error messages if the value does not evaluate to a number.")
("hnlScaleMarginalDelay"
"hnlScaleMarginalDelay(
g_propVal
t_propName
)
=> value"
"Takes the value given as argument, divides the value by the value of the simTimeUnit variable, multiplies it by the value of the simCapUnit variable, and then returns the result rounded to the nearest tenth. If the named property is not found, nil is returned. If simTimeUnit == nil or simCapUnit == nil, the value of the property is returned, again rounded to the nearest tenth. The property name given as the second argument is used for error messages if the value does not evaluate to a number.")
("hnlScaleTimeUnit"
"hnlScaleTimeUnit(
g_propVal
t_propName
)
=> value"
"Takes the value given as argument, divides it by the value of the simTimeUnit variable, and then returns the result rounded to the nearest integer. If simTimeUnit == nil, the value of the property is returned, again rounded to the nearest integer. The property name given as the second argument is used for error messages if the value does not evaluate to a number.")
("hnlIgnoreTerm"
"hnlIgnoreTerm( 
d_term
)
=> t / nil"
"Returns t if the terminal argument belongs to a patchcord or to an instance whose master is not a stopping cell and does not contain any instances. This function excludes terminals attached to instances such as vdd and gnd.")
("hnlIsAPatchCord"
"hnlIsAPatchCord(
d_inst
)
=> t / nil"
"Returns t if the master of the given instance is a patchcord.")
("hnlIsAStoppingCell"
"hnlIsAStoppingCell(
d_cellView
)
=> t / nil"
"Returns t if the cellview argument is a stopping cellview. A cell is a stopping point for expansion if its viewName is in the hnlViewList switch view list as well as the hnlStopList stopping list, or if the cell has a string property nlAction with stop as its value. This function is used throughout the netlister to determine when to stop expansion and whether to output a macro reference or a reference to a primitive device.")
("hnlIsCurrentInstStopping"
"hnlIsCurrentInstStopping(
)
=> t / nil"
"Returns t if the current instance (hnlCurrentInst) is a stopping instance. An instance is a stopping point for expansion if the instance's Master is in the instance specific stopList. An instance is also a stopping point if the instance has a string property, nlAction with stop as its value. This function is used throughout the netlister to determine when to stop expansion and whether to output a macro reference or a reference to a primitive device.")
("hnlMultipleCells"
"hnlMultipleCells(
t_name
)
=> t / nil"
"Checks if the cellname argument exists for more than one cellname or cellview in the list of all cells. This function is used to detect cases of cells having the same name, but which are found in more than one location of the design hierarchy. This happens when cells with the same name are found in more than one library.")
("hnlNameOfSignal"
"hnlNameOfSignal(
d_net
x_netIndex
)
=> name / nil"
"Returns a string for the name of the signal that defines the given (net index) pair. This name is considered to be the preferred name and is consistent even when called with two different nets whose ~> name field differs, but which are electrically equivalent at this level of the design hierarchy. If the netIndex is not in the range of bits for the given net, nil is returned.")
("hnlNetNameOnTerm"
"hnlNetNameOnTerm( 
t_termName
x_bit
)
=> name / nil"
"Returns the signal name of the net attached to the given bit of the terminal of the given name on the current instance being expanded. This function guarantees the same name is returned even if the net is aliased, and this function is later called with a terminal attached to one of the aliases of this net.")
("hnlNetNameOnTermName"
"hnlNetNameOnTermName(
t_termName
)
=> name / nil"
"Returns the signal name of the net attached to the terminal of the given name on the current instance being expanded. This function guarantees the same name is returned even if the net is aliased, and this function is later called with a terminal attached to one of the aliases of this net.")
("hnlAddExtraParameters"
"hnlAddExtraParameters(
l_list
)
=> t / nil"
"Adds user-specified design variables to the OSS design variables list. For example, ADE-XL requires to add more design variables to OSS design variables list that are obtained after CDF callback evaluation.")
("hnlCellExtracted"
"hnlCellExtracted(
d_cellView
)
=> t / nil"
"Checks that the cellview has not been modified since it was last extracted.")
("hnlCellInAllCells"
"hnlCellInAllCells( 
d_cellView 
)
=> t / nil"
"Returns t if the cellview argument exists as a cellview in the list of all cells. If not, this function returns nil.")
("hnlCompletePrint"
"hnlCompletePrint(
)
=> t"
"Flushes buffers needed for the hnlPrintString function and closes the netlist file.")
("hnlInitPrint"
"hnlInitPrint(
t_fileName
x_lineLength
t_prefix
t_postfix
t_commentStr
x_softLineLength
) 
=> t / nil"
"Opens the netlist output file specified by filename and sets up the information required by the hnlPrintString function.")
("hnlPrintString"
"hnlPrintString(
t_text
[ g_general ]
)
=> t / nil"
"Prints the SKILL string text argument to the netlist file.")
("hnlAbortNetlist"
"hnlAbortNetlist(
)
=> nil"
"Aborts netlisting. When the formatter detects an error during netlisting, it calls this function to inform the netlister to abort netlisting. This function aborts netlisting at the next convenient point, usually after the current cell is processed.")
("hnlDoInstBased"
"hnlDoInstBased(
l_hnlListOfAllCells
)
=> t"
"Driver for instance-based netlists. It determines the order in which most of the output functions are called. For each cellview in the schematic hierarchy (determined by the hnlListOfAllCells variable), it sets the hnlCurrentCell global variable to the cellview to be netlisted.")
("hnlFindAllCells"
"hnlFindAllCells(
d_cellView
l_hnlListOfAllCells
)"
"Returns a list of all the unique devices and levels of the hierarchy that need to be netlisted. This is a list of lists; the first element of each sublist is a cell.")
("hnlIfNoProcedure"
"hnlIfNoProcedure(
t_progarg
)
=> value"
"Defines procedures in HNL. By using this function, the netlister only defines a procedure if it is not already defined, thus allowing user-override of netlister functionality by loading user-supplied functions before loading the Cadence netlister.")
("hnlPrintDevices"
"hnlPrintDevices(
)
=> t / nil"
"Sets up the global variables needed by the output functions to output the connectivity for a device and then calls the hnlPrintInst formatter function to print the connectivity for each iteration of each instance in the current cellview being netlisted. The current cellview is determined by the value of the hnlCurrentCell global variable. The global variables set up by this function, which can be used by the formatter function, are as follows:")
("hnlPrintMessage"
"hnlPrintMessage(
t_text
)
=> t"
"Prints the text argument to the stdout port if executed in the Cadence nongraphic environment. If the function is called from within the Cadence graphics environment, the output is written to the CIW window.")
("hnlPrintNetlist"
"hnlPrintNetlist(
l_hnlListOfAllCells
)
=> t / nil"
"Prints the netlist header, then calls a function to output the connectivity for the netlist, and after that, prints the netlist footer. At this point, all cells are expected to be bound. Error detection for binding is done by the traversal functions.")
("hnlRunNetlister"
"hnlRunNetlister(
)
=> t / nil"
"Entry point for HNL. This function is called to run the hierarchical netlister.")
("hnlSetDef"
"hnlSetDef(
s_sVariable
g_value
)
=> t / nil"
"Sets variables in HNL. By using this function, the netlister only sets sVariable if it is not already set, or the symbol sVariable evaluates to null, thus allowing user-override of netlister variables by loading user-supplied defaults before loading the Cadence netlister.")
("hnlSetPrintLinePrefix"
"hnlSetPrintLinePrefix(
t_value
)
=> t / nil"
"Registers the line prefix to be used when printing individual subcircuits during auCdl netlisting to indicate the continuation of the text on the next line, when the line length exceeds the limit set by the HNL global variable hnlSoftLineLength.")
("hnlGetPrintLinePrefix"
"hnlGetPrintLinePrefix(
)
=> t_value"
"Returns the line prefix set using hnlSetPrintLinePrefix, which is used to print individual subcircuits during auCdl netlisting to indicate the continuation of the text on the next line, when the line exceeds the maximum character limit.")
("hnlSetPseudoTermDir"
"hnlSetPseudoTermDir(
t_string
)
=> t / nil"
"Sets the direction of pseudo ports, which are created to propagate inherited connections from a cellview to upper levels in the hierarchy. OSS-based formatter calls this function to set the direction of pseudo ports. If the formatter does not call it, you can specify a statement to call the function in the .simrc file.")
("hnlSetVars"
"hnlSetVars(
)
=> t / nil"
"Sets all global-required variables for netlisting. Depending on the target simulator, the required netlist formatting functions are loaded.")
("hnlSortTerms"
"hnlSortTerms(
d_term1
d_term2
)
=> t / nil"
"Determines net order in the sorted lists of net names. It takes as argument two terminals and does a comparison by the name field. It is used as argument to the SKILL sort function.")
("hnlSortTermsToNets"
"hnlSortTermsToNets(
l_terminals
)
=> list"
"Takes as argument a list of terminals and returns a list of lists. The first element in each list is the original terminal, the second element is the name of the net attached to that terminal. The list is sorted alphanumerically by the name of the terminal attached to the net.")
("hnlStartNetlist"
"hnlStartNetlist(
)
=> t / nil"
"Opens the output files.")
("hnlStopNetlist"
"hnlStopNetlist(
)
=> t"
"Cleans up after netlisting, closes open files, closes all open cellviews, and resets all global variables to nil.")
("hnlStringToList"
"hnlStringToList(
t_theString
)
=> list"
"Given a string of white-space-separated strings, this function returns a list of strings, that is, the string - silos schematic - returns the list (silos schematic).")
("hnlGetMappedInstNames"
"hnlGetMappedInstNames(
)
=> list"
"Returns the list of all names mapped using the hnlMapInstName function. This function can only be called during netlisting.")
("hnlGetMappedModelNames"
"hnlGetMappedModelNames(
)
=> list"
"Returns the list of all names mapped using the hnlMapModelName function. This function can only be called during netlisting.")
("hnlGetMappedNames"
"hnlGetMappedNames(
)
=> list"
"Returns the list of all names mapped using the hnlMapName function. This function can only be called during netlisting.")
("hnlGetMappedNetNames"
"hnlGetMappedNetNames(
)
=> list"
"Returns the list of all names mapped using the hnlMapNetName function. This function can only be called during netlisting.")
("hnlInitMap"
"hnlInitMap( 
x_maxNameLength  
x_maxInstNameLength
x_maxModelNameLength
x_maxNetNameLength
x_maxTermNameLength
t_namePrefix  
t_netNamePrefix  
t_instNamePrefix 
t_modelNamePrefix  
t_termNamePrefix
t_hierarchyDelimeter  
l_invalidFirstChars  
l_invalidCharsInName  
l_hnlMapNetFirstChar  
l_hnlMapNetInName  
l_hnlMapInstFirstChar  
l_hnlMapInstInName  
l_hnlMapModelFirstChar  
l_hnlMapModelInName 
l_hnlMapTermFirstChar
l_hnlMapTermInName 
t_mapName  
t_designName  
t_viewList 
t_stopList
l_hnlInvalidNames
l_hnlInvalidNetNames
l_hnlInvalidInstNames
l_hnlInvalidModelNames
l_hnlInvalidTermNames
)
=> t / nil"
"Initializes the variables needed for name translation.")
("hnlMapInstName"
"hnlMapInstName( 
t_cdsName
t_prefix
)
=> name"
"Returns a new mapped name. The cdsName string is a mandatory parameter and the prefix string is an optional one. If the argument specified in cdsName is legal, the same name is returned. Otherwise, OSS searches for the prefix. In case, the prefix is legal, then the value of global counter, which starts with 0, is appended to the prefix. If the prefix is not legal or null, a new name using the global instance prefix and the global counter is generated. However, if both the prefix and the global instance prefix are illegal or null, then an error message is displayed.")
("hnlMapModelName"
"hnlMapModelName( 
t_cdsName 
[ t_viewList
t_pathName
t_LibName
t_cellName
t_viewName
t_isCellTopCell ]
)
=> name"
"Returns a new mapped name if the argument specified as the cdsName string is not a valid name for the target simulator. Otherwise, the string is returned. The hnlMapModelFirstChar, hnlMapModelInName, hnlMaxNameLength, and simModelNamePrefix variables are used to determine the mapping of the name.")
("hnlMapName"
"hnlMapName( 
t_cdsName
)
=> name"
"Returns a new mapped name if the argument specified as the cdsName string is not a valid name for the target simulator. Otherwise, the cdsName string is returned.")
("hnlMapNetName"
"hnlMapNetName( 
t_cdsName
)
=> name"
"Returns a new mapped name if the argument specified as the cdsName string is not a valid name for the target simulator. Otherwise, the cdsName string is returned.")
("hnlMapTermName"
"hnlMapTermName( 
t_cdsName 
)
=> name / nil"
"Returns a new mapped name if the argument specified as the cdsName string is not a valid name for the target simulator. Otherwise, the cdsName string is returned.")
("hnlWriteMap"
"hnlWriteMap(
)
=> t / nil"
"Stores the name map tables in a file specified in an earlier call to hnlInitMap function. This function takes no arguments.")
("hnlNmpSetNameSpaces"
"hnlNmpSetNameSpaces(
t_source
t_dest
)
=> t / nil"
"Specifies the nmp namespaces to perform namespace mapping during OSS netlisting. The function accepts Cadence nmp supported namespaces as arguments. You can run the %> nmp getSpaceNames command to display a list of valid namespaces.")
("hnlSetMappingType"
"hnlSetMappingType( 
t_string
)
=> t / nil"
"Sets namespace mapping type for nets, terminals, globals, and models to one of the following: tabularOnly, nmpOnly, nmpWithTabular.")
("hnllsCVInUserStopCVList"
"hnllsCVInUserStopCVList(
d_cellViewId
)
=> t / nil"
"Determines whether a cellview, which is present in hnlUerStopCVList, is considered a primitive or a stop view while netlisting.")
("hnlCloseCellFiles"
"hnlCloseCellFiles(
)
=> t / nil"
"Closes all files opened to netlist hnlCurrentCell. This function calls the hnlWriteBlockControlFile function to create the control file under the directory for hnlCurrentCell.")
("hnlGenIncludeFile"
"hnlGenIncludeFile(
)
=> value"
"Creates the include file. You must define this function for a formatter that needs an include file. Use the hnlIncludeFileName variable to specify the name of the include file. Use the hnlIncludeFile variable to access the file pointer. IHNL calls the hnlGenIncludeFile function after it generates the netlist files.")
("hnlCatIncrementalNetlistFiles"
"hnlCatIncrementalNetlistFiles(
p_catFile
l_netlistFileList
)
=> t / nil"
"This function concatenates the list of netlist files into a single file whose file handle is given as the first parameter to this function. The second parameter is the list of files to be concatenated.")
("hnlGetGlobalModelMappedName"
"hnlGetGlobalModelMappedName( 
t_cellName
t_switchList
)
=> name"
"Given the name of cell name, this function returns a new mapped name if the argument specified as the cellName string is not a valid name for the target tool. Otherwise, an empty string is returned.")
("hnlGetGlobalNetMappedName"
"hnlGetGlobalNetMappedName(
t_netName
)
=> name"
"Given the name of a global net, this function returns a new mapped name if the argument specified as the netName string is not a valid name for the target tool. Otherwise, an empty string is returned.")
("hnlMakeNetlistFileName"
"hnlMakeNetlistFileName( 
d_cellViewId
t_effectiveViewList
t_currentCellPath
t_configLibName
t_configCellName
t_configViewName
g_isTopConfigCell
)
=> name"
"Returns the relative name of the netlist file for cellViewId. This relative name is the path in the current netlisting directory. The cellViewId must be a nonstopping cellview, which you can netlist.")
("hnlMapCellName"
"hnlMapCellName( 
d_cellViewId
[ t_viewList
t_pathName
t_LibName
t_cellName
t_viewName
t_isCellTopCell ]
)
=> name"
"Returns the netlist module name of the cellview (cellViewId). It adds the <cell name><module name> mapped pair into the model section of the name map associated with the hnlCurrentCell variable. The cellViewId must be a non-stopping instance.")
("hnlMapCellModuleName"
"hnlMapCellModuleName( 
d_cellViewId 
[ t_viewList 
t_pathName 
t_LibName 
t_cellName 
t_viewName 
t_isCellTopCell ]
)
=> name"
"Returns the netlist module name of the cellview (cellViewId). It adds the <cell name><module name> mapped pair into the model section of the name map associated with the hnlCurrentCell variable. The cellViewId must be a nonstopping instance. For a design opened in the configuration view, you must specify the additional arguments.")
("hnlSetCellFiles"
"hnlSetCellFiles(
)
=> t / nil"
"Opens all the files associated with hnlCurrentCell and re initializes name mapping functions.")
("hnlWriteBlockControlFile"
"hnlWriteBlockControlFile(
d_cellView
[ t_viewList 
t_pathName 
t_LibName 
t_cellName 
t_viewName 
t_isCellTopCell ]
)
=> t / nil"
"Creates the control file for cellView. The control file records information for subsequent IHNL runs. The hnlCloseCellFiles function calls the hnlWriteBlockControlFile function.")
("hnlRegPreNetlistTrigger"
"hnlRegPreNetlistTrigger(
S_triggerFunc
)
=> t / nil"
"Registers a trigger, which is a user-defined SKILL procedure that is called before the netlist generation.")
("hnlDeRegPreNetlistTrigger"
"hnlDeRegPreNetlistTrigger(
S_triggerFunc
)
=> t / nil"
"Deregisters a trigger, which is a user-defined SKILL procedure that has been registered using hnlRegPreNetlistTrigger.")
("hnlPreNetlistTriggerList"
"hnlPreNetlistTriggerList(

)
=> l_triggerFunc / nil"
"Returns the list of functions registered through hnlRegPreNetlistTrigger.")
("hnlRegPostNetlistTrigger"
"hnlRegPostNetlistTrigger(
S_triggerFunc
)
=> t / nil"
"Registers a trigger, which is a user-defined SKILL procedure that is called after netlist generation.")
("hnlPostNetlistTriggerList"
"hnlPostNetlistTriggerList(

)
=> l_triggerFunc / nil"
"Returns the list of functions registered through hnlRegPostNetlistTrigger.")
("hnlDeRegPostNetlistTrigger"
"hnlDeRegPostNetlistTrigger(
S_triggerFunc
)
=> t / nil"
"Deregisters a trigger, which is a user-defined SKILL procedure that has been registered using hnlRegPostNetlistTrigger.")
("hnlDoNetBased"
"hnlDoNetBased( cellList )"
"The driver for net-based netlists. cellList is the list of cellviews (macros) to generate the netlist. By default, this procedure is called by hnlPrintNetlist() with hnlListOfAllCells as the list of cells to be netlisted.")
("hnlPrintSignal"
"hnlPrintSignal( )"
"The procedure that finds and directs the netlisting of all signals in hnlCurrentCell. It processes each signal and sets up the needed variables for use later. It is responsible for calling the procedures hnlPrintSignalHeader(), hnlPrintInst(), and hnlPrintSignalFooter().")
("hnlGetMasterCells"
"hnlGetMasterCells( instlist )"
"Given a list of instances, this procedure returns a list of the cellviews of the instances' view-switched masters, which are stored in the same order as the given list.")
("hnlCloseMasterList"
"hnlCloseMasterList(inlists)"
"Given a list of cellviews, this procedure closes them one by one. This is the reverse function of hnlGetMasterCells().")
("hnlFindAllInstInCell"
"hnlFindAllInstInCell( cellview )"
"Given a cellview, finds all netlistable instances in it.")
("hnlIsCellNetlistable"
"hnlIsCellNetlistable( cellview )"
"Given a cellview, determines if instantiation of this cellview is netlistable to HNL. This procedure will return nil for a cellview that contains no connectivity and for a cellview that has the property nlAction, with value ignore.")
("hnlGetTermNameOfSig"
"hnlGetTermNameOfSig( sig )"
"Given a signal, finds the names of all the terminals the signal connects to. The names are the single-bit names of the bits of the terminals that connect to the signal.")
("hnlGetTermByName"
"hnlGetTermByName(cellview termname)"
"Given a cellview and a terminal name, returns the terminal ID and index corresponding to the member termname found in the cellview specified, where the ID is the first element of the list and the index is the second. If the given terminal name implies a width greater than 1, a -1 is returned as the index. If a single bit name is given, then the index returned is the index to the terminal.")
("vosHiDisplayNetlist"
"vosHiDisplayNetlist(
)
=> t / nil"
"Displays the generated VHDL netlist. This function can be used only when a single netlist is generated for the complete design.")
("vosLaunchIrunSimulation"
"vosLaunchIrunSimulation(
)
=> t / nil"
"Launches the xrun simulator from the command line. If the vhdlSimNetlistandSimulate variable is set to t, the function netlists the design before launching the xrun simulator. Otherwise, it launches the simulator without netlisting the design.")
("vhdlImport"
"vhdlImport(
t_libName
l_srcFiles
t_logName
l_params
[ g_runInBackground ]
[ g_displayResults ]
)
=> nil / t"
"Runs vhdlin to import a list of VHDL source files into the specified library with the given parameters. The parameters are the names of the vhdlin parameters, passed in as a disembodied property list. Optionally, it can run vhdlin as a background process and/or display the results interactively.")
("vhdlHiImport"
"vhdlHiImport(
)
=> t / nil"
"Builds and displays the VHDL Import form.")
("vhdlHiInvokeToolBox"
"vhdlHiInvokeToolBox(
[ t_position ]
)
=> t / nil"
"Invokes the vhdl toolbox window.")
("vhdlToPinList"
"vhdlToPinList(
t_libName
t_cellName
t_viewName
) 
=> list / nil"
"Translates a VHDL cellView into an intermediate pin list format.")
("vhdlPinListToVHDL"
"vhdlPinListToVHDL(
t_libName
t_cellName
t_viewName
l_pinList
)
=> t / nil"
"Allows the generation of VHDL views from an intermediate pin list format.")
("vhdlRegisterSimulator"
"vhdlRegisterSimulator(
[ parserCallBack ]
[ analyzerCallBack ]
[ analyzerFileExt ]
[ elaboratorCallBack ] 
[ simulatorCallBack ]
[ dataDirCallBack ]
[ dataFileCallBack ]
[ workLibCallBack ]
)
=> t / nil"
"To use non-Cadence VHDL tools, you need to define your own SKILL procedures and register this information with the toolbox using the SKILL routine, vhdlRegisterSimulator().")
("vhmsCompilationFailure"
"vhmsCompilationFailure(
t_libName
t_cellName
t_viewName
fileName
)
=> list / nil"
"Informs you about the compilation failures of the file specified with the fileName parameter. A compilation error message is displayed and you can open the file for editing by clicking `Yes'.")
("vhmsDefaultEdit"
"vhmsDefaultEdit(
t_libName
t_cellName
t_viewName
b_fileObj
t_mode
[ errFile ]
)
=> t / nil"
"Opens an existing file or creates a template and opens it in an editor. If the mode is r (read only) then it tries to open an existing file.")
("vhmsSaveFile"
"vhmsSaveFile(
t_libName
t_cellName
t_viewName
t_fileName
)
=> list / nil"
"Compiles the vhms file. If the symbol does not exist, then it prompts you to create the symbol. If the compilation fails then it calls the vhmsCompilationFailure function.")
("vhmsGetCellParameters"
"vhmsGetCellParameters(
t_libName
t_cellName
)
=> list / nil"
"Returns the CDF parameters of the vhdl generics. The sub-list returned contains the name of the generic, the default value, and the type.")
("vhmsPinListToVHDLAMS"
"vhmsPinListToVHDLAMS(
t_libName
t_cellName
t_viewName
l_pinList
)
=> t / nil"
"Creates a vhdlams entity, package, body, configuration, or architecture depending on the view name. Specify the view name as `entity', `package', `body', or `configuration' for creating an entity, package, body, or configuration respectively. If nothing is specified, then an architecture view is created. The view is created in ./libName/cellName/viewName.")
("vhmsSymbolToPinListGen"
"vhmsSymbolToPinListGen(
t_libName
t_cellName
[ viewName ]
)
=> l_pinList / nil"
"Generates a pin list from the symbol.")
("vhmsToPinList"
"vhmsToPinList(
t_libName
t_cellName
t_viewName
)
=> list / nil"
"Translates a VHDLAMS cellView into an intermediate pin list format. The pin list represents all the ports to the VHDLAMS description and their directions, such as `input', `output', and `inout'.")
("vhmsUpdateCellCDFParams"
"vhmsUpdateCellCDFParams(
d_cellId
l_pinList
)
=> cdf_obj"
"Updates the CDF parameters. It reads all the parameters from the pin list. If a given parameter does not exist in the CDS, then it updates the CDF.")