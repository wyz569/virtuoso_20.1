;SKILL Language Functions
("axlCloseSession"
"axlCloseSession( 
t_session 
) 
=> t / nil"
"Closes the specified ADE XL session.")
("axlCloseSessionInWindow"
"axlCloseSessionInWindow( 
[ w_window ]
) 
=> t / nil"
"Closes the ADE XL session in the current window, if there is one opened.")
("axlCreateSession"
"axlCreateSession( 
t_sessionName 
) 
=> t_sessionName / nil"
"Creates a new ADE XL session with the specified name. You can use this function to create a new session before running an ADE XL SKILL code in the non-GUI mode,")
("axlGetMainSetupDB"
"axlGetMainSetupDB( 
t_session 
) 
=> x_mainSDB / nil"
"Returns a handle to the working setup database of the named ADE XL session.")
("axlGetSessionCellName"
"axlGetSessionCellName( 
g_value 
) 
=> t_cellName / nil"
"Returns the cell name associated with the session or setup database.")
("axlGetSessionLibName"
"axlGetSessionLibName( 
g_value 
) 
=> t_libName / nil"
"Returns the library name associated with the given session or setup database.")
("axlGetSessionViewName"
"axlGetSessionViewName( 
g_value 
) 
=> t_viewName / nil"
"Returns the view name associated with the given session or setup database.")
("axlGetSessionWindowNumber"
"axlGetSessionWindowNumber( 
t_sessionName 
) 
=> x_number / nil"
"Returns a unique integer representing a number corresponding to a given ADE (G) XL session name.")
("axlGetToolSession"
"axlGetToolSession(
t_sessionName
t_testName
[ ?history x_history ]
) 
=> g_sessionid / nil"
"ADE XL internally maintains a unique in-memory identifier for each active test. This function returns that unique identifier for the specified test.")
("axlGetWindowSession"
"axlGetWindowSession( 
[ w_window ] 
) 
=> t_sessionName / nil"
"Returns the ADE XL session associated with a window.")
("axlGetCurrentResultSimulationHost"
"axlGetCurrentResultSimulationHost( 
t_sessionName 
) 
=> t_hostName"
"This is a callback function that runs from a Results table context menu.")
("axlIsSessionReadOnly"
"axlIsSessionReadOnly( 
t_axlSession 
) 
=> t / nil"
"This functions determines whether the specified session is opened in read-only or edit mode.")
("axlIsValidAXLSession"
"axlIsValidAXLSession(
t_session
) 
=> t / nil"
"Checks whether the specified ADE XL session is a valid session.")
("axlMainAppSaveSetup"
"axlMainAppSaveSetup( 
[ t_sessionName ]
) 
=> t / nil"
"Saves the ADE state and ADE (G)XL setup database information associated with an ADE (G)XL session to relevant persistent files on disk. This function is useful only in the non-GUI mode.")
("axlNoSession"
"axlNoSession( 
[ w_window ]
) 
=> t / nil"
"Returns t if there is no ADE XL session in the current window.")
("axlRemoveSetupState"
"axlRemoveSetupState( 
t_sessionName
t_stateName
) 
=> t / nil"
"Removes the specified setup state for the given session.")
("axlSaveSetupState"
"axlSaveSetupState(
t_session
t_stateName
l_tags
[ ?inReadOnly readOnlyAction ]
) 
=> t / nil"
"Saves a setup state for the specified session.")
("axlSessionConnect"
"axlSessionConnect( 
t_sessionName
t_signalName
s_callbackFunction
) 
=> t / nil"
"Register a SKILL callback to be connected to a known signal or trigger emitted from an ADE (G) XL session.")
("axlSessionDisconnect"
"axlSessionDisconnect( 
t_sessionName
s_callbackFunction
) 
=> t / nil"
"Disconnects the specified SKILL callback connected to one or more known signals emitted by ADE (G) XL session.")
("axlSessionRegisterCreationCallback"
"axlSessionRegisterCreationCallback( 
s_callbackFunction
) 
=> t / nil"
"Registers a SKILL function as callback to be called whenever the event for which it is registered is occurred.")
("axlSessionSignalList"
"axlSessionSignalList( 
t_session 
) 
=> l_signals / nil"
"Returns a list of all the signals or triggers that are emitted from a given ADE (G) XL session. You can create custom callback functions to be executed when these events are triggered. For more details, refer to Working with Signals or Triggers.")
("axlSessionSignalSignature"
"axlSessionSignalSignature( 
t_session 
t_signal 
) 
=> t_signature / nil"
"Returns the signature of a given signal that is emitted by an ADE (G)XL session. This function serves as a utility function to determine how to implement the slot or callback function in SKILL.")
("axlSetMainSetupDB"
"axlSetMainSetupDB( 
t_session 
t_setupdbPath 
) 
=> x_hsdb / nil"
"Sets the working setup database for an ADE XL session to the setup database specified by the given setupDBPath. This function is useful when you create a new session in a SKILL script and then you want to setup a database for that.")
("axlSetMainSetupDBLCV"
"axlSetMainSetupDBLCV( 
t_session 
t_libName
t_cellName
t_viewName
[ ?mode t_mode ]
) 
=> x_mainSDB / nil"
"Sets the working setup database for a given ADE XL session to the setup database specified by the given library, cell, or view.")
("axlSetupStates"
"axlSetupStates( 
t_session 
) 
=> l_states"
"Retrieves a list of setup states from the given session.")
("axlSuppressPersistedQuestionDialog"
"axlSuppressPersistedQuestionDialog( 
x_msgId 
) 
=> t / nil"
"Suppresses the question dialog for a specified msgId in a Virtuoso session.")
("axlShowPersistedQuestionDialog"
"axlShowPersistedQuestionDialog( 
x_msgId 
) 
=> t / nil"
"Shows the suppressed question dialog for a specified msgId in a Virtuoso session.")
("axlToolSetOpPointInfo"
"axlToolSetOpPointInfo( 
g_sessionId 
t_testName
[ ?instanceName t_instanceName ]
[ ?parameters t_parameters ]
) 
=> o_sevOpPoint / nil"
"Adds the signal specified for the oppoint type item to the Output Setup table in a test setup and returns the signal object.")
("axlCloseSetupDB"
"axlCloseSetupDB( 
x_sdb 
) 
=> t / nil"
"Closes an open ADE XL setup database.")
("axlCommitSetupDB"
"axlCommitSetupDB( 
x_hsdb 
) 
=> x_hsdb"
"Saves the setup database file, for instance, the maestro.sdb or data.sdb file.")
("axlCommitSetupDBAndHistoryAs"
"axlCommitSetupDBAndHistoryAs( 
x_hsdb 
t_setupdbName 
) 
=> x_hsdb"
"Saves the setup database along with history entries under a new name.")
("axlCommitSetupDBas"
"axlCommitSetupDBas( 
x_hsdb 
t_setupdbName 
) 
=> x_hsdb"
"Saves the setup database under a new name.")
("axlDiffSetup"
"axlDiffSetup( 
x_handlea 
x_handleb 
) 
=> l_diffs"
"Compares two setup databases and reports the differences.")
("axlDeleteNote"
"axlDeleteNote( 
x_mainSDB 
t_item 
t_name
) 
=> t / nil"
"Deletes a note from the given test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlGetCopyRefResultsOption"
"axlGetCopyRefResultsOption(
x_hsdb 
) 
=> t / nil"
"Returns if the simulation results are required to be copied or moved from the reference history based on the settings in the setup database.")
("axlGetElementParent"
"axlGetElementParent( 
x_element 
) 
=> x_parent / nil"
"Returns a handle to the parent of the specified setup database element.")
("axlGetEnabled"
"axlGetEnabled( 
x_element 
) 
=> t / nil"
"Checks whether a setup database element is enabled or not.")
("axlGetLocalResultsDir"
"axlGetLocalResultsDir( 
x_historyHandle 
) 
=> t_dirPath / nil"
"A local results directory associated with a run on a remote machine.")
("axlIsLocalResultsDir"
"axlIsLocalResultsDir( 
x_historyHandle 
) 
=> t / nil"
"Returns the status of Use Local Simulation Results Directory flag for the specified history item.")
("axlExportSetup"
"axlExportSetup( 
t_session 
x_hsdb
t_path
l_tags
) 
=> t / nil"
"Exports the setup from the currently loaded setupdb to a different file. The list of tags passed are the top-level elements like vars, tests, etc to export.")
("axlGetHistoryGroupChildren"
"axlGetHistoryGroupChildren( 
x_element 
) 
=> l_children"
"Returns a list containing a handle to all history children entries in the history group and a list of names of all the history children entries.")
("axlGetActiveSetup"
"axlGetActiveSetup( 
x_mainSDB 
) 
=> x_activeSetup"
"Returns a handle to the active setup. You can use this handle to get or set setup details for the active setup.")
("axlGetHistoryGroupChildrenEntry"
"axlGetHistoryGroupChildrenEntry( 
x_childrenHandle 
t_name
) 
=> x_history / 0"
"Finds a history entry in a group run by name and returns a handle to it.")
("axlGetNote"
"axlGetNote( 
x_hsdb
t_item
t_name
) 
=> t_note / nil"
"Returns note(s) from the specified test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlGetPointNetlistDir"
"axlGetPointNetlistDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] )
=> t_pointNetlistDir / nil"
"Returns the netlist directory for a particular corner and design point combination in the given test run of the specified history.")
("axlGetPointPsfDir"
"axlGetPointPsfDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ]
)
=> t_pointPsfDir / nil"
"Returns the psf directory for a particular corner and design point combination in the given test run of the given history.")
("axlGetPointRunDir"
"axlGetPointRunDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] 
)
=> t_pointRunDir / nil"
"Returns the run directory for a particular corner and design point combination in the given test run of the specified history.")
("axlGetPointTroubleshootDir"
"axlGetPointTroubleshootDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] 
)
=> t_trblDir / nil"
"Returns the troubleshoot directory for a particular corner and design point combination in a specified test run of the given history.")
("axlGetReferenceHistoryItemName"
"axlGetReferenceHistoryItemName 
x_hsdb
) 
=> t_referenceHistoryName"
"Returns the name of the reference history for the active setup or checkpoint.")
("axlGetResultsLocation"
"axlGetResultsLocation( 
x_hsdb 
) 
=> t_resultsLocation / nil"
"Returns the results location for the specified setup database.")
("axlGetReuseNetlist"
"axlGetReuseNetlistOption( 
x_hsdb 
) 
=> t / nil"
"Checks if the option to use reference netlist is enabled for the setup database. This option helps in reusing the netlist of the reference history for the incremental simulation run.")
("axlGetScript"
"axlGetScript( 
x_element 
t_scriptName 
) 
=> x_script / nil"
"Finds a script by name and returns a handle to it.")
("axlGetScriptPath"
"axlGetScriptPath( 
x_script 
) 
=> t_path / nil"
"Returns the path of a script.")
("axlGetScripts"
"axlGetScripts( 
x_element 
) 
=> l_scripts / nil"
"Returns a list containing a handle to all scripts for this database entry and a list of all script names.")
("axlGetSessionFromSetupDB"
"axlGetSessionFromSetupDB( 
x_hsdb 
) 
=> t_sessionName / nil"
"Determines the session associated with the provided setupdb handle.")
("axlGetSetupDBDir"
"axlGetSetupDBDir( 
x_hsdb 
) 
=> t_dir / nil"
"Returns the directory of the specified setup database.")
("axlGetSetupInfo"
"axlGetSetupInfo( 
t_sessionName
[ ?testName testName ]
) 
=> r_setupInfo / nil"
"Returns the setup information for the complete ADE XL setup or a specific test. This includes the number of corners, sweeep points, and data points in the setup.")
("axlGetTopLevel"
"axlGetTopLevel( 
x_element 
) 
=> x_hsdb / g_errorOrZero"
"Returns a handle to the setup database containing the specified element.")
("axlGetUseIncremental"
"axlGetUseIncremental( 
x_hsdb 
) 
=> t / nil"
"Checks if using reference results as cache during incremental run is enabled for the active setup or checkpoint.")
("axlImportSetup"
"axlImportSetup( 
t_session 
t_path
l_tags
[ t_historyName ]
[ s_operation ]
) 
=> t / nil"
"Imports the setup from a file. The list of tags passed are the top-level elements like vars, tests, etc to import.")
("axlLoadSetupState"
"axlLoadSetupState( 
t_session 
t_stateName
l_tags
s_operation
) 
=> t / nil"
"Loads a setup state.")
("axlNewSetupDB"
"axlNewSetupDB( 
t_setupdbName 
) 
=> x_hsdb / nil"
"Opens the named setup database and returns its handle. If the named setup database does not already exist, this function creates one and returns a handle to it.")
("axlNewSetupDBLCV"
"axlNewSetupDBLCV( 
t_libraryName
t_cellName
t_viewName
) 
=> t / nil"
"Creates a new setup db in the specified lib, cell, view location. It automatically overwrites any existing setup db in any of the above mentioned locations.")
("axlPutNote"
"axlPutNote( 
x_mainSDB 
t_item 
t_name
t_note
) 
=> t / nil"
"Adds a note to the given test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlPutScript"
"axlPutScript( 
x_element 
t_scriptName 
t_path 
) 
=> x_script / nil"
"Inserts or finds a script by name, sets its path, and returns a handle to that script.")
("axlPutTest"
"axlPutTest( 
x_hsdb 
t_test 
t_tool
) 
=> x_test / nil"
"Finds or inserts a test into the setup database and returns a handle to that test.")
("axlRemoveElement"
"axlRemoveElement( 
x_element 
) 
=> t / nil"
"Removes an element and all its children from the setup database.")
("axlResetActive"
"axlResetActive( 
x_hsdb 
)
=> t / nil"
"Resets the active setup database.")
("axlSaveSetup"
"axlSaveSetup( 
) 
=> t / nil"
"Saves the setup database file and test state files for the current window. The behavior of this function is similar to File - Save. If the cellview was opened in the read-only mode, a new library, cell, and view value must be provided for which you need to save the setup details.")
("axlSaveSetupToLib"
"axlSaveSetupToLib( 
x_hsdb 
t_libName 
t_cellName 
t_viewName 
) 
=> t / nil"
"Saves the setup database to the specified lib/cell/view.")
("axlSDBDebugPrint"
"axlSDBDebugPrint(
x_SDBH
)
=> x_SDBH"
"Prints the in-memory database rooted at the supplied handle. Useful for debugging so that SDB modifications can be seen without saving the XML to disk.")
("axlSDBGetChild"
"axlSDBGetChild(
x_SDBH
t_name
[ t_value ]
)
=> x_hsdb / nil"
"Works as a wrapper around axlSDBGetChildren and returns a setup database handle to a single child element. An error will be reported if multiple matching elements are found.")
("axlSDBGetChildren"
"axlSDBGetChildren(
x_SDBH
[ t_name ]
[ t_value ]
S_returnAs
)
=> l_children / nil"
"Returns child elements of the provided setup database handle.")
("axlSDBGetChildVal"
"axlSDBGetChildVal(
x_SDBH
t_name
)
=> t_value / nil"
"Works as a wrapper around axlSDBGetChild and returns the value for a single child element.")
("axlSDBGetExtension"
"axlSDBGetExtension(
x_mainSDBH
t_extensionName
)
=> x_SDBH / nil"
"Returns the named setup database extension.")
("axlSDBGetName"
"axlSDBGetName(
x_SDBH
)
=> t_name / nil"
"Returns the name of the provided setup database handle.")
("axlSDBGetValue"
"axlSDBGetValue(
x_SDBH
)
=> t_value / nil"
"Returns the value of the provided setup database handle.")
("axlSDBHp"
"aaxlSDBHp(
g_potentialSDBH
)
=> t / nil"
"Returns whether the supplied argument is a valid setup database handle.")
("axlSDBPutExtension"
"axlSDBPutExtension(
x_mainSDBH
t_extensionName
)
=> x_SDBH / nil"
"Adds an extension to the ADE setup database under which customization can be created.")
("axlSDBSetChild"
"axlSDBSetChild(
x_SDBH
t_name
t_value
)
=> x_SDBH / nil"
"Creates a new child element under the provided setup database handle.")
("axlSDBSetMultipleEntry"
"axlSDBSetMultipleEntry(
t_name
)
=> t / nil"
"Sets a setup database name to be a multiple entry name.  By default, a setup database handle is a single entry name.  A single-entry element is differentiated only by its name, whereas a multi-entry element is differentiated by both name and value.")
("axlSDBSetValue"
"axlSDBSetValue(
x_SDBH
t_newValue
)
=> t / nil"
"Sets the value of the provided setup database handle.")
("axlSetAllSweepsEnabled"
"axlSetAllSweepsEnabled(
x_hsdb 
g_enableStatus
) 
=> t / nil"
"Sets the selection status of the Point Sweeps check box in the Run Summary assistant pane.")
("axlSetCopyRefResultsOption"
"axlSetCopyRefResultsOption(
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Sets whether the simulation results need to be copied or moved from the reference history.")
("axlSetEnabled"
"axlSetEnabled( 
x_element 
g_enable 
) 
=> t / nil"
"Enables or disables a setup database element, such as a test or a variable.")
("axlSetReferenceHistoryItemName"
"axlSetReferenceHistoryItemName( 
x_hsdb
t_referenceHistoryName 
) 
=> x_hsdb / 0"
"Sets the reference history name for the active setup or checkpoint. You can reuse the results or netlist from the reference history during an incremental simulation run. The reference history name set using this function also appears in the Reference field on the Reference History toolbar.")
("axlSetReuseNetlistOption"
"axlSetReuseNetlistOption( 
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Enables or disables the option to use the reference netlist for the active setup or checkpoint. If this option is enabled, netlist of the design is reused for the incremental run. Otherwise, the design in renetlisted.")
("axlSetUseIncremental"
"axlSetUseIncremental( 
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Enables or disables the setup database option in active setup or checkpoint for using reference results as cache during incremental run. This function selects or clears the Use reference netlist check box on the Reference History form.")
("axlSetScriptPath"
"axlSetScriptPath( 
x_script 
t_path 
) 
=> t / nil"
"Sets the path of a script.")
("axlWriteDatasheet"
"axlWriteDatasheet( 
t_axlSession 
x_historyEntry 
[ ?directory t_directory ] 
[ ?resultsSummary g_resultsSummary ] 
[ ?testsSummary g_testsSummary ] 
[ ?detailedResults g_detailedResults ] 
[ ?plots g_plots ] 
[ ?designVarsSummary g_designVarsSummary ] 
[ ?paramsSummary g_paramsSummary ] 
[ ?cornersSummary g_cornersSummary ] 
[ ?setupSummary g_setupSummary ] 
[ ?schematicDiagrams g_schematicDiagrams ]
[ ?launchBrowser g_launchBrowser ]
[ ?name t_name ]
)
=> t / nil"
"Creates a datasheet for the specified history entry.")
("axlWriteDatasheetForm"
"axlWriteDatasheetForm( 
x_axlSession 
t_historyEntry 
) 
=> t / nil"
"Causes a form to appear so that you can specify various options for generating a datasheet.")
("axlGetVar"
"axlGetVar( 
x_element 
t_varName 
) 
=> x_var / nil"
"Finds a variable associated with the specified database element and returns a handle to it.")
("axlGetVars"
"axlGetVars( 
x_element 
) 
=> l_vars / nil"
"Returns a list containing a handle to the list of variables associated with the given database element (the setup database, a corner, or a history checkpoint) and a list of all variable names.")
("axlGetVarValue"
"axlGetVarValue( 
x_varHandle
) 
=> t_value / nil"
"Returns value of the given variable.")
("axlPutVar"
"axlPutVar( 
x_element 
t_varName 
t_value 
) 
=> x_varHandle / nil"
"Creates or finds a variable by the given name for the specified database element and sets its value.")
("axlGetAllVarsDisabled"
"axlGetAllVarsDisabled(
x_mainSDB 
) 
=> t / nil"
"Returns the enabled or disabled status for inclusion of the global variables in an ADE XL simulation. In the ADE XL GUI, this is the selection status of the Global Variables check box in the Data View assistant pane.")
("axlSetAllVarsDisabled"
"axlSetAllVarsDisabled(
x_mainSDB 
g_enableStatus
) 
=> t / nil"
"Sets the selection status of the option to include the global variables in simulations. In the ADE XL GUI, this is the selection status of the Global Variables check box in the Data View assistant pane.")
("axlSetDefaultVariables"
"axlSetDefaultVariables( 
l_variables 
[ t_libName ] 
) 
=> t / nil"
"Creates a set of default variables in the Global Variables tree on the Data View pane and in the Parameters and Variables assistant for an ADE XL session.")
("axlSetDesignVariablePerTest"
"axlSetDesignVariablePerTest( 
x_mainSDB
t_varName
t_testName
[ ?enabled g_enableStatus ]
) 
=> t / nil"
"Enables or disables a design variable for a specific test. In the ADE XL UI, it selects or clears the check box next to a design variable under a test.")
("axlGetParameters"
"axlGetParameters(
x_mainSDB
)
=> l_parameterPaths / nil"
"Returns a list of paths to all the device parameters found in the given database.")
("axlGetParameter"
"axlGetParameter(
x_mainSDB
t_parameterPath
)
=> x_parameterHandle / 0"
"Returns the database handle to the given device parameter in the setup database.")
("axlGetParameterValue"
"axlGetParameterValue(
x_mainSDB
t_parameterPath
)
=> t_parameterValue / nil"
"Returns value of the specified device parameter in the setup database.")
("axlGetAllParametersDisabled"
"axlGetAllParametersDisabled(
x_mainSDB 
) 
=> t / nil"
"Returns the selection status of the option to include the device parameters in simulations. In the ADE XL GUI, this is the selection status of the Parameters check box in the Data View assistant pane.")
("axlRegisterCustomDeviceFilter"
"axlRegisterCustomDeviceFilter( 
t_name
s_function
) 
=> t / nil"
"Adds a custom filter for device instance parameters on the Variables and Parameters assistant pane.")
("axlSetParameter"
"axlSetParameter(
x_mainSDB
t_parameterPath
t_value
)
=> t / nil"
"Sets a value for the specified device parameter.")
("axlSetAllParametersDisabled"
"axlSetAllParametersDisabled(
x_mainSDB 
g_enableStatus
) 
=> t / nil"
"Sets the status of the Parameters check box in the Data View assistant pane.")
("axlAddModelPermissibleSectionLists"
"axlAddModelPermissibleSectionLists( 
x_handleModel 
l_sectionNames
) 
=> l_sectionHandles / nil"
"Creates a new list or adds new section names to the existing list of permissible section names for the given model imported from a PCF file. If a model file includes many sections out of which only a limited number of sections are of relevance to your testbench, you can create a permissible section list for that model file. If the LimitModelSections environment variable is set to LimitedList, while displaying the list of section names in the Corners Setup UI, ADE XL checks the permissible section list for a model file and shows only the relevant names. If you specify a section name that is not included in the permissible list, ADE XL shows appropriate errors.")
("axlGetModel"
"axlGetModel( 
x_cornerHandle 
t_modelName 
) 
=> x_modelFile / 0"
"Returns a handle to the specified model file associated with the given corner.")
("axlGetModelBlock"
"axlGetModelBlock( 
x_modelHandle 
) 
=> t_blockName / nil"
"Returns the block name with which the specified model is associated. By default, a model file is associated with a test and therefore, the block name is set to Global. However, in MTS mode, a model can be associated with a specific block in the design. Using this function, you can get the name of the block with which a model file is associated.")
("axlGetModelFile"
"axlGetModelFile( 
x_modelHandle 
) 
=> t_modelFile / nil"
"Returns the model file path for the specified model.")
("axlGetModelGroup"
"axlGetModelGroup( 
x_mainSDB 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Returns a handle to the specified model group in the setup database.")
("axlGetModelGroupName"
"axlGetModelGroupName( 
x_cornerHandle 
) 
=> t_modelGroupName / nil"
"Returns the name of the model group associated with the specified corner.")
("axlGetModelGroups"
"axlGetModelGroups( 
x_mainSDB 
) 
=> l_modelGroups / nil"
"Returns a list of the model group names in a given setup database.")
("axlGetModelPermissibleSectionLists"
"axlGetModelPermissibleSectionLists( 
x_handleModel 
) 
=> l_sectionName / nil"
"Returns a list of permissible section names for the given model extracted from a PCF file.")
("axlGetModelSection"
"axlGetModelSection( 
x_modelHandle 
) 
=> t_sectionName / nil"
"Returns the model section being used for the corner with which the model file is associated.")
("axlGetModelSections"
"axlGetModelSection( 
t_fileName
) 
=> l_sectionNames / nil"
"Returns a list of simulator sections in the specified model file.")
("axlGetModelTest"
"axlGetModelTest( 
x_modelHandle 
) 
=> t_testName / nil"
"Returns the name of the test associated with the specified model. By default, a model file is associated with a test. However, in MTS mode, a model can be associated with a specific block in the design. Using this function, you can get the name of the test with which a model file is associated.")
("axlGetModels"
"axlGetModels( 
x_cornerHandle 
) 
=> l_modelFiles / nil"
"Returns a list of model files associated with the givne corner.")
("axlPutModel"
"axlPutModel( 
x_cornerHandle 
t_modelFileName 
[ ?testName t_testName ] 
[ ?blockName t_blockName ] 
) 
=> x_modelHandle / nil"
"Adds a model file to the specified corner.")
("axlPutModelGroup"
"axlPutModelGroup( 
x_mainSDB 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Adds a model group to the setup database or returns the handle to the model group if it already exists.")
("axlSetModelBlock"
"axlSetModelBlock( 
x_modelHandle 
t_blockName 
) 
=> x_modelBlock / nil"
"Sets the name of the block for the specified model. By default, a model is associated with all the design blocks and is set as Global. In the MTS mode, a model is associated with a specific MTS block, so you need to use this function to specify the name of that block.")
("axlSetModelFile"
"axlSetModelFile( 
x_modelHandle 
t_modelFile 
) 
=> t_modelFile / nil"
"Sets the model file for the specified model.")
("axlSetModelGroupName"
"axlSetModelGroupName( 
x_corner 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Sets or associates the given model group with the specified corner.")
("axlSetModelPermissibleSectionLists"
"axlSetModelPermissibleSectionLists( 
x_modelHandle 
l_sectionNames
) 
=> l_sectionHandles / nil"
"Sets a permissible section list for the given model extracted from a PCF file. If a model file includes many sections out of which only a limited number of sections are of relevance to your testbench, you can create a permissible section list for that model file. If the LimitModelSections environment variable is set to LimitedList, while displaying the list of section names in the Corners Setup UI, ADE XL checks the permissible section list for a model file and shows only the relevant names.")
("axlSetModelSection"
"axlSetModelSection( 
x_modelHandle 
t_sectionName 
) 
=> x_modelSection / nil"
"Sets the section name for the specified model.")
("axlSetModelTest"
"axlSetModelTest( 
x_modelHandle 
t_testName 
) 
=> x_modelTest / nil"
"Sets the name of the test to be associated with the specified model. By default, a model is associated with all the tests. In case of MTS mode, you need to associate the model with a specific test. Alternatively, you can use the axlPutModel function to specify the test name while adding a model.")
("ALIAS"
"ALIAS( 
t_globalVar 
) 
=> t_globalVarValue / nil"
"Can be used in two scenarios- to give alias or alternate names to long net names or instance name paths, and to return the first value of a waveform result, for non-swept variables.")
("axlAddOutputs"
"axlAddOutputs( 
l_outputNames 
) 
=> t / nil"
"Defines one or more output measures in an OCEAN script.")
("axlAddOutputsColumn"
"axlAddOutputsColumn( 
x_mainSDB
t_ColumnName 
) 
=> t / nil"
"Adds a new user-defined column to the ADE XL Outputs table.")
("axlAddOutputExpr"
"axlAddOutputExpr( 
t_sessionName 
t_testName 
t_outputName 
[ ?expr t_expr ]
[ ?evalType t_evalType ]
[ ?exprDPLs l_exprDPLs ]
[ ?plot g_plot ]
[ ?save g_save ]
)
=> t / t_error"
"Adds an output expression to a test setup.")
("axlAddOutputSignal"
"axlAddOutputSignal( 
t_sessionName 
t_testName 
t_signalName
[ ?type t_outputType ]
[ ?plot g_plot ] 
[ ?save g_save ]
)
=> t / t_error"
"Adds signal to a test setup.")
("axlDeleteOutput"
"axlDeleteOutput( 
t_sessionName 
t_testName 
t_outputName 
[ ?type t_outputType ]
)
=> t / t_error"
"Deletes output from a test setup.")
("axlDeleteOutputsColumn"
"axlDeleteOutputsColumn( 
x_mainSDB 
t_columnName 
)
=> t / nil"
"Deletes a user-defined column from the Outputs table.")
("axlOutputResult"
"axlOutputResult( 
g_value 
[ t_outputName ] 
) 
=> t / nil"
"Specifies the value of an output in an OCEAN script file. This function only assigns a value to a measure, but does not add it to the script. You need to use the axlAddOutputs function to add or define output measures in an OCEAN script.")
("axlOutputsExportToFile"
"axlOutputsExportToFile( 
t_session
t_fileName 
[ ?omitTestCol g_omitTestCol ]
)
=> t / nil"
"Exports outputs from the currently active setup to the specified CSV file.")
("axlOutputsImportFromFile"
"axlOutputsImportFromFile( 
t_session
t_fileName 
[ ?operation operationType ]
[ ?test testName ]
) 
=> t / nil"
"Imports outputs from the specified CSV file. Outputs can be exported to a CSV file by using axlOutputsExportToFile.")
("axlGetOutputUserDefinedData"
"axlGetOutputUserDefinedData( 
x_mainSDB 
t_testName 
t_OutputName 
t_ColumnName 
)
=> t_columnValue / nil"
"Returns the value saved in a user-defined column for the given output and test name combination.")
("axlGetOutputNotation"
"axlGetOutputNotation(
x_sdb
t_testName
t_outputID 
)
=> t_notation / " ""
"Returns the notation style set for the specified output of the test.")
("axlGetOutputSignificantDigits"
"axlGetOutputSignificantDigits( 
x_sdb
t_testName
t_outputID 
)
=> t_digits / 0"
"Returns the number of significant digits set for the specified output of the test.")
("axlGetOutputSuffix"
"axlGetOutputSuffix( 
x_sdb
t_testName
t_outputID 
)
=> t_suffix / " ""
"Returns the suffix corresponding to the specified output of the test.")
("axlGetOutputUnits"
"axlGetOutputUnits 
x_sdb
t_testName
t_outputID 
)
=> t_units / " ""
"Returns the output unit value used for displaying the results for the expression in the specified output of the test.")
("axlPutOutputNotation"
"axlPutOutputNotation(
x_sdb
t_testName
t_outputID
t_value
)
=> x_sdb / nil"
"Sets the notation style for the specified output of the test.")
("axlPutOutputSignificantDigits"
"axlPutOutputSignificantDigits(
x_sdb
t_testName
t_outputID
x_value
)
=> x_sdb / nil"
"Sets the number of significant digits corresponding to the specified output of the test.")
("axlPutOutputSuffix"
"axlPutOutputSuffix(
x_sdb
t_testName
t_outputID
t_value
)
=> x_sdb / nil"
"Sets the suffix corresponding to the specified output of the test.")
("axlPutOutputUnits"
"axlPutOutputUnits(
x_sdb
t_testName
t_outputID
t_value
)
=> x_sdb / nil"
"Sets the output unit value for displaying the results for the expression in the specified output of the test.")
("axlGetUserDefinedOutputsColumns"
"axlGetUserDefinedOutputsColumns( 
x_mainSDB 
)
=> l_columnNames / nil"
"Returns a list of names of the user-defined columns in the given setup database.")
("axlGetTemperatureForCurrentPointInRun"
"axlGetTemperatureForCurrentPointInRun(
)
=> t_temperature / nil"
"Within the OCEAN measurement script, this function allows to access the temperature of the current point in the run.")
("calcVal"
"calcVal(
t_outputName 
[ t_testName ]
[ ?cornerName t_cornerName ]
[ ?historyName t_historyName ]
[ ?run t_runName ]
[ ?result t_resultName ]
[ ?getFirstSweepPoint t_getFirstSweepPoint ]
[ ?matchParams g_matchParams ]
[ ?defaultVal t_defaultVal ]
) 
=> g_output / nil"
"Returns the value of an output of the same or another test. You can use the value returned by this function in another output expression.")
("axlRenameOutputsColumn"
"axlRenameOutputsColumn( 
x_mainSDB 
t_columnName 
t_newColumnName
)
=> t / nil"
"Changes the name of a user-defined column in the Outputs table.")
("axlSetOutputUserDefinedData"
"axlSetOutputUserDefinedData( 
x_mainSDB 
t_testName 
t_outputName 
t_columnName 
t_columnValue
)
=> t / nil"
"Sets value in the given user-defined column for the given test name and output.")
("axlGetCornersForATest"
"axlGetCornersForATest( 
x_session 
t_test 
) 
=> l_corners / nil"
"Returns a list of corners enabled for the given test.")
("axlGetEnabledGlobalVarPerTest"
"axlGetEnabledGlobalVarPerTest( 
x_hsdb
t_varName
t_test 
) 
=> t / nil"
"Returns the status of a global variable for the given test. When a global variable is overridden for a test, this function returns nil, which implies that the value of the global variable will not be considered for the test. Instead, the test will use a local value set for that variable.")
("axlGetEnabledTests"
"axlGetEnabledTests( 
x_mainSDB
) 
=> l_tests / nil"
"Returns a list of tests enabled in the given ADE XL setup database.")
("axlGetOrigTestToolArgs"
"axlGetOrigTestToolArgs( 
x_hsdb 
) 
=> l_toolOptions / nil"
"Returns an associative list of original tool options set for the test before you ran the simulation after modifying the test setup.")
("axlGetTest"
"axlGetTest( 
x_hsdb 
t_test 
) 
=> x_test / nil"
"Finds a test in the setup database and returns its handle.")
("axlGetTests"
"axlGetTests( 
x_hsdb 
) 
=> l_tests / nil"
"Returns a list containing a handle to all tests in the setup database and a list of all test names.")
("axlGetTestToolArgs"
"axlGetTestToolArgs( 
x_hsdb 
) 
=> l_toolOptions / nil"
"Returns an associative list of tool option names and values for a test.")
("axlSetTestToolArgs"
"axlSetTestToolArgs( 
x_hsdb 
l_toolOptions 
) 
=> x_hsdb / nil"
"Sets the tool options for the test.")
("axlToolSetOriginalSetupOptions"
"axlToolSetOriginalSetupOptions( 
t_session 
t_test 
l_toolOptions 
[ ?history x_history ]
) 
=> t / nil"
"Sets options to their original values for the tool instance associated with the specified session and test.")
("axlToolSetSetupOptions"
"axlToolSetSetupOptions( 
t_session 
t_test 
l_toolOptions 
) 
=> t / nil"
"Sets the option values for the tool instance associated with the specified session and test.")
("axlWriteOceanScriptLCV"
"axlWriteOceanScriptLCV(
t_fileName
t_libraryName
t_cellName
t_viewName
=> t / nil"
"Writes an OCEAN script for the given adexl view in the specified file. If axlWriteOceanScriptLCV()is used in an existing session, it will write the current in-memory values and not the values saved on the disk.")
("axlAddSpecToOutput"
"axlAddSpecToOutput( 
x_hsdb
t_testName
t_resultName
[ ?min g_minValue ]
[ ?max g_maxValue ]
[ ?gt g_greaterThanValue ]
[ ?lt g_lessThanValue ]
[ ?range g_rangeValues ]
[ ?tol g_toleranceValue ]
[ ?info g_info ]
[ ?weight g_weightingFactor ]
[ ?corner g_cornerName ]
) 
=> t / t_error"
"Adds a specification to an output defined for a test. You can also use this function to modify an existing specification for an output.")
("axlGetSpecs"
"axlGetSpecs( 
x_hsdb 
) 
=> l_list / nil"
"Returns a list containing a handle to all specifications in the setup database and a list of all specification names.")
("axlGetSpec"
"axlGetSpec( 
x_hsdb 
t_specName 
) 
=> x_spec / 0"
"Finds the named specification in the setup database and returns its handle.")
("axlGetSpecData"
"axlGetSpecData( 
x_hsdb
t_resultName
t_testName
[ t_cornerName ]
) 
=> l_specDetails / nil"
"Returns the specification for the given result, test and corner combination in the given setup database.")
("axlGetSpecWeight"
"axlGetSpecWeight( 
x_spec 
) 
=> t_weight / nil"
"Returns the weight value for a specification.")
("axlGetAllCornersEnabled"
"axlGetAllCornersEnabled( 
x_mainSDB 
) 
=> t / nil"
"Returns the selection status of the Corners check box in the Run Summary pane.")
("axlCorners"
"axlCorners( 
t_session 
[ g_refresh ]
) 
=> t / nil"
"Opens the Corners Setup form.")
("axlGetCorner"
"axlGetCorner( 
x_mainSDB 
t_cornerName 
) 
=> x_corner / nil"
"Finds a corner by name and returns a handle to that corner.")
("axlGetCorners"
"axlGetCorners( 
x_mainSDB 
) 
=> l_corners / nil"
"Returns a list containing a handle to all corners and a list of names of corners and corner groups in the setup database.")
("axlGetCornerDisabledTests"
"axlGetCornerDisabledTests( 
x_cornerHandle 
) 
=> l_testNames / nil"
"Returns a list containing a handle to the disabled tests and the names of tests that are disabled for the given corner.")
("axlGetCornerCountForName"
"axlGetCornerCountForName( 
x_mainSDB 
t_cornerGroup
) 
=> x_cornerCount / -1"
"Returns the count of individual corners contained in the specified corner group.")
("axlGetCornerNameForCurrentPointInRun"
"axlGetCornerNameForCurrentPointInRun(
)
=> t_cornerName"
"Returns the name of the corner for the current point being simulated. This function is useful for customized processing or debugging in the OCEAN script based measures.")
("axlGetNominalCornerEnabled"
"axlGetNominalCornerEnabled( 
x_mainSDB 
) 
=> t / nil"
"Returns t if the nominal corner is enabled in the specified setup database. This is same as the status of the Nominal check box on the Run Summary assistant.")
("axlGetNominalCornerTestEnabled"
"axlGetNominalCornerTestEnabled( 
t_testHandle
) 
=> t / nil"
"Returns the status of the check box corresponding to the given test in the Nominal column on the Corners Setup form.")
("axlGetStatVars"
"axlGetStatVars(
x_mainSDB
x_cornerId
)
=> l_vars / nil"
"Returns a list of the names of statistical variables that use the statistical::mismatch or statistical::global prefix for the given statistical corner.")
("axlLoadCorners"
"axlLoadCorners( 
x_mainSDB 
t_SDBfileName
) 
=> x_cornersHandle / 0"
"Loads a set of corners from the specified XML file in which the corners were saved earlier.")
("axlLoadCornersFromPcfToSetupDB"
"axlLoadCornersFromPcfToSetupDB (
t_session
t_fileName
t_testNameList
g_overwriteExistingCorners
) 
=> t / nil"
"Imports a set of predefined corners from a process customization file into the corners setup for the given ADE XL session.")
("axlPlotAcrossDesignPoints"
"axlPlotAcrossDesignPoints( 
t_session
t_testName
t_historyName
t_outputName
t_cornerName 
) 
=> x_corner / nil"
"Plots an output across all the design points for a particular corner.")
("axlPutCorner"
"axlPutCorner( 
x_mainSDB 
t_cornerName 
) 
=> x_corner / nil"
"Adds a new corner by the given name and returns a handle to that corner. If a corner already exists with the same name, the function returns the handle to that corner.")
("axlPutDisabledCorner"
"axlPutDisabledCorner( 
x_testHandle 
t_cornerName 
) 
=> x_disabledcorner / nil"
"Adds a new corner by the given name and returns a handle to that corner. If a corner already exists with the same name, the function returns the handle to that corner. In addition, the corner is disabled for the specified test name, but enabled for other tests in the ADE XL session.")
("axlSetDefaultCornerEnabled"
"axlSetDefaultCornerEnabled( 
x_testHandle 
g_enable 
) 
=> 1 / 0"
"Enables or disables the default (nominal) corner for the specified test. The program creates a nominal corner when you create a test. This corner represents the absence of corner-specific information.")
("axlSetAllCornersEnabled"
"axlSetAllCornersEnabled(
x_mainSDB 
g_enable
) 
=> t / nil"
"Enables or disables all the corners for simulation. This changes the selection status of the Corners check box in the Run Summary assistant.")
("axlSetCornerName"
"axlSetCornerName(
x_cornerHandle 
t_cornerName
) 
=> t / nil"
"Sets or updates the name of the given corner.")
("axlSetCornerTestEnabled"
"axlSetCornerTestEnabled(
x_cornerHandle 
t_testName
g_enableFlag
) 
=> x_num / nil"
"Enables or disables simulation of a test for the given corner. This function changes the status of the check box corresponding to a test in the column for the given corner.")
("axlSetNominalCornerEnabled"
"axlSetNominalCornerEnabled(
x_mainSDB 
g_enable
) 
=> t / nil"
"Enables or disables the nominal corner in the specified setup database.")
("axlSetNominalCornerTestEnabled"
"axlSetNominalCornerTestEnabled( 
x_testHandle
g_enableFlag
) 
=> t / nil"
"Sets the status of the check box corresponding to the given test in the Nominal column on the Corners Setup form.")
("axlSetWCCTime"
"axlSetWCCTime(
x_specID
t_time
)
=> t / nil"
"Sets the time information for the given specfication handle of a worst case corner.")
("axlGetWCCCorner"
"axlGetWCCCorner(
x_specHandle 
) 
=> t_value / nil"
"Gets the corner name for the given specification handle of a worst case corner.")
("axlGetWCCHistory"
"axlGetWCCHistory(
x_specHandle 
) 
=> t_historyName / nil"
"Returns name of the history for a specification of a worst case corner.")
("axlGetWCCResult"
"axlGetWCCResult(
x_specHandle 
) 
=> t_result / nil"
"Returns result of a specification of a worst case corner.")
("axlGetWCCSpec"
"axlGetWCCSpec(
x_cornerHandle 
t_specName
) 
=> x_spec / nil"
"Returns handle to a specification for the specified worst case corner.")
("axlGetWCCSpecs"
"axlGetWCCSpecs(
x_wccHandle
) 
=> l_specs / nil"
"Returns a list of specifications for the given worst case corner.")
("axlGetWCCTest"
"axlGetWCCTest(
x_wccHandle 
) 
=> t_testName / nil"
"Returns name of the test of the given specification.")
("axlGetWCCTime"
"axlGetWCCTime(
x_specId
)
=> t_time / nil"
"Returns the generated time information for the given specfication handle of a worst case corner.")
("axlGetWCCRangeBound"
"axlGetWCCRangeBound(
x_hsdb 
) 
=> t_rangeBound"
"Returns an integer value that specifies whether the worst case corner corresponds to the minimum or the maximum value of the spec.")
("axlGetWCCVar"
"axlGetWCCVar(
x_hscr 
t_name
) 
=> x_handle / nil"
"Finds the specified variable by name and returns a handle to it.")
("axlGetWCCVarMonotonicity"
"axlGetWCCVarMonotonicity(
x_hsdb 
) 
=> t_monotonnicity / nil"
"Gets the monotonicity of a specific variable or parameter of the worst case corner.")
("axlGetWCCVars"
"axlGetWCCVars(
x_hsdb
)
=> l_vars / nil"
"Returns a list containing a handle to all variables and a list of all variable names.")
("axlGetWYCSigmaTargetLimit"
"axlGetWYCSigmaTargetLimit(
)
=> n_sigma_limit"
"Gets the sigma-to-target limit for for Improve Yield flow using worst yield corners. If this value is not set, then the flow internally sets it to 100.")
("axlSetWYCSigmaTargetLimit"
"axlSetWYCSigmaTargetLimit(
n_sigma_limit
)
=> t / nil"
"Sets the sigma-to-target limit for Improve Yield flow using worst yield corners.")
("axlExportOutputView"
"axlExportOutputView( 
t_sessionName 
t_fileName 
t_viewType 
[ ?history g_historyName ]
[ ?testName g_testName ]
[ ?filterName g_filterName ]
[ ?clearAllFilters g_clearAllFilters]
)
=> t / nil"
"Exports the results view to the specified .csv or .html file.")
("axlGetAllSweepsEnabled"
"axlGetAllSweepsEnabled( 
x_hsdb 
) 
=> t / nil"
"Returns the selection status of the check box associated with the Sweep option in the Run Summary widget. If the check box is not checked or deselected for Sweeps option , then this function will return nil.")
("axlGetCurrentRunMode"
"axlGetCurrentRunMode( 
x_hsdb 
) 
=> t_mode / nil"
"Returns the current simulation run mode of a given ADE (G)XL session.")
("axlGetParasiticRunMode"
"axlGetParasiticRunMode(
x_mainSDB
)
=> t_runMode"
"Gets the parasitic run mode name from the active setup or history checkpoint.")
("axlGetParasiticParaLCV"
"axlGetParasiticParaLCV(
t_sessionName
t_paraRunMode
)
=> t_cellViewName"
"Gets the name of the parasitic cellview attached to the parasitic run mode in the active setup or history checkpoint.")
("axlGetParasiticSchLCV"
"axlGetParasiticSchLCV(
t_sessionName
t_paraRunMode
)
=> t_cellViewName"
"Gets the name of the schematic cellview attached to the parasitic run mode in the active setup or history checkpoint.")
("axlGetPreRunScript"
"axlGetPreRunScript(
t_sessionName
t_testName
)
=> t_filePath"
"Returns the path to the pre-run script file attached to the given ADE XL test.")
("axlGetRunDistributeOptions"
"axlGetRunDistributeOptions( 
x_hsdb 
) 
=> r_runOptions / nil"
"Returns the current run option settings for the given setup database.")
("axlGetRunData"
"axlGetRunData( 
t_sessionName 
x_runID 
) 
=> x_historyHandle / nil"
"Returns the handle to the history obtained after running a simulation in the given ADE XL session. You can use this handle to get access to the history results or to get setup details by using the history checkpoint.")
("axlGetRunMode"
"axlGetRunMode( 
x_hsdb 
t_mode 
) 
=> x_mode / nil"
"Returns a handle to the named run mode in the specified setup database.")
("axlGetRunModes"
"axlGetRunModes( 
x_mainSDB 
) 
=> l_modes / nil"
"Returns a list of available run modes from the specified setup database.")
("axlGetRunOption"
"axlGetRunOption( 
x_hsdb 
t_mode 
t_runoptName 
) 
=> x_runOption / nil"
"Returns a handle to the named run option (t_runoptName) in the setup database for the specified run mode (t_mode).")
("axlGetRunOptionName"
"axlGetRunOptionName( 
x_runOption 
) 
=> t_runoptName / nil"
"Returns the run option name.")
("axlGetRunOptions"
"axlGetRunOptions( 
x_hsdb 
t_runModeName
) 
=> l_list / nil"
"Returns a list containing a handle to all run options in the setup database and a list of all run option names for the specified run mode.")
("axlGetRunOptionValue"
"axlGetRunOptionValue( 
x_runOption 
) 
=> t_runoptValue / nil"
"Returns the value associated with the provided run option.")
("axlGetRunStatus"
"axlGetRunStatus( 
t_sessionName
[ ?optionName t_optionName ]
[ ?historyName t_historyName ]
) 
=> l_statusValues"
"Returns the completion status in terms of the number of points, tests, or corners completed for all histories running in the given ADE XL session or for the specified history.")
("axlIsSimUsingStatParams"
"axlIsSimUsingStatParams(
)
=> t / nil"
"Returns t, if statistical variables are being set or varied for a particular simulation run. For example, statistical parameters in Monte Carlo run or a statistical corner for Improve Yield. Returns nil otherwise.")
("axlPutRunOption"
"axlPutRunOption(
x_hsdb
t_mode
t_runoptName
) 
=> x_runOption / nil"
"Adds a run option to the setup database or edits an existing one and returns the handle to the option. The list of valid option names (t_runoptName) depends on the run mode (t_mode).")
("axlRunAllTests"
"axlRunAllTests( 
t_session 
t_mode 
) 
=> x_runid / nil"
"Starts an ADE XL run of all enabled tests.")
("axlRunAllTestsWithCallback"
"axlRunAllTestsWithCallback( 
t_session 
t_mode 
t_callback 
) 
=> x_runid / nil"
"Starts an ADE XL run of all enabled tests and specifies a SKILL expression to call upon their completion.")
("axlRunSimulation"
"axlRunSimulation( 
[ ?session t_session ]
[ ?callback t_callback ]
) 
=> x_runid / nil"
"Starts an ADE XL run of all enabled tests and specifies a SKILL expression to call upon completion.")
("axlSetCurrentRunMode"
"axlSetCurrentRunMode( 
x_hsdb 
t_mode 
) 
=> t / nil"
"Sets the current simulation run mode for the given database.")
("axlImportPreRunScript"
"axlImportPreRunScript(
t_sessionName
t_testName
t_preRunScriptName
)
=> t_preRunScriptName / nil"
"Imports and attaches the given script to the specified test. In the ADE XL GUI, you can right-click the test name and choose Add/Edit Pre Run Script to view or edit the pre-run script attached to the test.")
("axlSetParasiticRunMode"
"axlSetParasiticRunMode(
x_mainSDB
t_runModeName

)
=> t / nil"
"Sets the parasitic run mode for the given ADE XL setup.")
("axlSetPreRunScript"
"axlSetPreRunScript(
t_sessionName
t_testName
g_scriptName
)
=> t_filePath / nil"
"Sets or adds a pre-run script for an ADE XL test.")
("axlSetPreRunScriptEnabled"
"axlSetPreRunScriptEnabled(
t_sessionName
t_testName
g_enabled
)
=> t / nil"
"Enables or disables execution of pre-run scripts before running simulations.")
("axlSetRunDistributeOptions"
"axlSetRunDistributeOptions( 
x_hsdb 
[ ?RunIn t_runIn ]
[ ?DivideJobs t_divideJobs ]
[ ?JobLimit n_jobLimit ]
) 
=> t / nil"
"Sets the specified run option settings for the given setup database. These settings are also visible in the Run Options form.")
("axlSetRunOptionName"
"axlSetRunOptionName( 
x_runOption 
t_runoptName 
) 
=> t / nil"
"Sets the run option name.")
("axlStop"
"axlStop( 
t_session
x_runid
) 
=> t / nil"
"Stops a run based on id..")
("axlStopAll"
"axlStopAll( 
t_session 
) 
=> t / nil"
"Stops all runs currently evaluating in the ADE XL session.")
("axlReadHistoryResDB"
"axlReadHistoryResDB( 
t_historyName 
[ ?session t_sessionName ]
) 
=> h_ResultsDBObj / nil"
"Returns a handle to the ADE XL results database saved with the specified history.")
("axlReadResDB"
"axlReadResDB( 
t_ResultsDBFileName 
) 
=> h_ResultsDBObj / nil"
"Returns a handle to the specified ADE XL results database.")
("axlSetRunOptionValue"
"axlSetRunOptionValue( 
x_runOptionHandle 
t_runOptionValue
) 
=> t / nil"
"Sets a value for the given run option.")
("axlGetCurrentHistory"
"axlGetCurrentHistory( 
t_sessionName 
) 
=> x_historyHandle / nil"
"Returns the internal integer value representing the current history entry in active use.")
("axlGetHistory"
"axlGetHistory( 
x_hsdb 
) 
=> l_history / nil"
"Returns a list containing a handle to all history entries in the setup database and a list of all the history entries.")
("axlGetHistoryCheckpoint"
"axlGetHistoryCheckpoint( 
x_history 
) 
=> x_checkpoint / nil"
"Returns a handle to the checkpoint of a history entry.")
("axlGetHistoryEntry"
"axlGetHistoryEntry( 
x_hsdb 
t_historyName 
) 
=> x_history / nil"
"Finds a history entry in the setup database and returns a handle to that entry.")
("axlGetHistoryGroup"
"axlGetHistoryGroup( 
x_hsdb 
t_histgrpName 
) 
=> x_history / nil"
"Returns a handle to the named history group in the setup database.")
("axlGetHistoryLock"
"axlGetHistoryLock( 
x_historyHandle 
) 
=> t / nil"
"Returns the lock status of the given history. When a history item is locked, the corresponding setup details and results cannot be deleted.")
("axlGetHistoryName"
"axlGetHistoryName( 
x_historyEntry 
) 
=> t_historyName / nil"
"Returns the name of the history item that holds the data for the latest simulation run.")
("axlGetHistoryPrefix"
"axlGetHistoryPrefix( 
x_sessionName 
) 
=> t_historyPrefix / nil"
"Returns the current history prefix value from the given ADE XL session. The prefix value depends on the run mode selected in the session.")
("axlGetHistoryResults"
"axlGetHistoryResults( 
x_history 
) 
=> t_results / nil"
"Gets the results database from a history entry. This function calls axlGetResultsLocation to get the results location.")
("axlGetOverwriteHistory"
"axlGetOverwriteHistory(
x_history
)
=>t / nil"
"Returns a boolean value specifying the status of the Overwrite History option for the active setup.")
("axlGetOverwriteHistoryName"
"axlGetOverwriteHistoryName(
x_setup
)
=>t_historyName / nil"
"Returns the name of the history that is set to be overwritten for the active setup.")
("axlLoadHistory"
"axlLoadHistory( 
x_to 
x_from 
) 
=> x_hsdb / nil"
"Copies the setup database branch and returns the handle to the copy.")
("axlSetHistoryLock"
"axlSetHistoryLock( 
x_handleHistory 
g_enable
) 
=> t / nil"
"Locks the specified checkpoint history. After it is locked, you cannot delete the history or the simulation data saved for it.")
("axlSetHistoryName"
"axlSetHistoryName ( 
x_historyHandle 
t_newHistoryName
) 
=> t / nil"
"Sets a new name for the specified history.")
("axlSetHistoryPrefixInPreRunTrigger "
"axlSetHistoryPrefixInPreRunTrigger ( 
t_session 
t_historyPrefix
) 
=> t_historyPrefix / nil"
"Sets a prefix to be used in the history name for a new run.")
("axlSetOverwriteHistory"
"axlSetOverwriteHistory(
x_setup
g_overwriteStatus
)
=>t / nil"
"Sets the Overwrite History option for the active setup.")
("axlSetOverwriteHistoryName"
"axlSetOverwriteHistoryName(
x_setup
t_overwriteHistoryName
)
=>t / nil"
"Sets the name of the history to be overwritten for the specified active setup.")
("axlOpenResDB"
"axlOpenResDB( 
t_fileName 
) 
=> o_obj / nil"
"Opens the database file specified by t_fileName. If the file does not exist, it is created.")
("axlPutHistoryEntry"
"axlPutHistoryEntry( 
x_hsdb 
t_historyName 
) 
=> x_history / nil"
"Inserts or finds a history entry in the setup database and returns a handle to that entry.")
("axlReEvaluateHistory"
"axlReEvaluateHistory( 
t_sessionName 
x_historyHandle
S_mode
) 
=> t / nil"
"Re-evaluates the history in the specified mode with respect to the active setup for a given session.")
("axlRemoveSimulationResults"
"axlRemoveSimulationResults(
x_historySDB
)
=> t / nil"
"Removes the simulation results data for the given history. The function removes only the results saved by the simulator. The ADE XL results database and the history item is not removed.")
("axlRestoreHistory"
"axlRestoreHistory(
t_session
x_historyEntry
)
=> t"
"Sets the given history as active setup in the given ADE XL session.")
("axlViewHistoryResults"
"axlViewHistoryResults(
t_session
x_hsdb
)
=> t"
"Display the results for the specified history item on the Results tab of the given ADE XL session.")
("axlWriteMonteCarloResultsCSV"
"axlWriteMonteCarloResultsCSV
t_session
t_historyName
[ ?testName t_testName ]
[ ?cornerName t_cornerName ]
[ ?outputName t_outputPath ]
)
=> t / nil"
"Writes the results of the given Monte Carlo run history in CSV format. ADE XL saves the results for each corner in a separate .csv file.")
("axlAddJobPolicy"
"axlAddJobPolicy( 
t_jobPolicyName 
t_selectedPath
l_jobPolicyProperties
) 
=> t / nil"
"Adds or saves a job policy at the specified location.")
("axlAttachJobPolicy"
"axlAttachJobPolicy( 
t_sessionName
t_jobPolicyName
t_toolName
l_jobPolicyProperties 
[ t_testName ]
) 
=> t / nil"
"Adds and attaches a job policy to the ADE XL setup.")
("axlDeleteJobPolicy"
"axlDeleteJobPolicy( 
t_jobPolicyName 
) 
=> t / nil"
"Deletes the named job policy from the setup.")
("axlDetachJobPolicy"
"axlDetachJobPolicy(
t_sessionName
t_jobType
t_testName
=> t / nil"
"Detaches a job policy from the specified test.")
("axlJobIntfcDebugPrintf"
"axlJobIntfcDebugPrintf(
t_formatString
[g_arg1 ... g_argn]
)
=> t / nil"
"Formats and writes output to the log if interface debugging is enabled.")
("axlJobIntfcDebugToFile"
"axlJobIntfcDebugToFile(
t_file_name
)
=> t / nil"
"Enables the interface job debugging and sets the output to a file.")
("axlJobIntfcDebugp"
"axlJobIntfcDebugp(
)
=> t / nil"
"Specifies whether interface debugging is enabled.")
("axlJobIntfcExitMethod"
"axlJobIntfcExitMethod(
g_inst
)
=> nil"
"Job Interface member function used to exit a job. ADE XL usually attempts to call exit(0) on remote job cleanup the job's resources properly. However, if this fails or if ADE XL is forced to kill all jobs, the exit method will be called on every remote job. This method may be called after the job has already exited. This job can also be called multiple times.")
("axlJobIntfcHealthMethod"
"axlJobIntfcHealthMethod(
g_inst
S_currentHealth
)
=> S_newHealth"
"Job Interface member function used to return the current health of the job. ADE XL calls this function regularly (currently, every 5 seconds) on each job in order to recognize health changes. The available health types are: unknown, alive, or dead. If the job Interface detects that the process is still pending, return unknown. If the Job Interface detects that the job has launched, return alive. Otherwise, ADE XL will eventually receive a start message from the remote job and automatically change the current health of the job to alive. If the Job Interface detects that the job has exited, return dead. Otherwise, ADE XL will eventually recognize that remote communication has failed and automatically change the current health of the job to dead.Once marked dead, the health will not be queried, dead is a terminal state. If no change is detected, the current state should be returned.")
("axlJobIntfcSetDebug"
"axlJobIntfcSetDebug(
g_enable
)
=> t / nil"
"Enables or disables printing of the job interface diagnostics to the CIW.")
("axlJobIntfcStartMethod"
"axlJobIntfcStartMethod(
g_inst
)
=> t / nil"
"Job Interface member function to start a job. For each new job ID, a new instance of the selected interface class will be created. After some basic properties are set on the instance, it will be passed to the start method of the class.")
("axlJPGUICustDiffer"
"axlJPGUICustDiffer(
g_inst
l_propList1
l_propList2
)
=> t / nil"
"Job Policy GUI Customization member function that determines whether l_propList1 and l_propList2 differ. The Job Policy GUI uses this method to determine if the GUI settings differ from those already attached to ADE XL.")
("axlJPGUICustHIFields"
"axlJPGUICustHIFields(
g_inst
x_offset
)
=> l_fields"
"Job Policy GUI Customization member function to create the HI field displayed for a particular JP GUI customization. The Job Policy GUI calls this method once during initialization. If no customizations are desired, the function does not need to be specialized.")
("axlJPGUICustOffset"
"axlJPGUICustOffset(
g_inst
)
=> x_offset"
"Job policy GUI customization member function to return the y size of the HI field customizations provided with the axlJPGUICustHIFields method. The value is obtained by adding 10 to the y position of the last HI element. The Job Policy GUI uses this value as the y offset for the form elements underneath the customization area.")
("axlJPGUICusReadFromForm"
"axlJPGUICustReadFromForm(
g_inst
g_form
l_dataDpl
)
=> nil"
"Job Policy GUI Customization member function to read any HI customization into a property list that will be saved as a job policy.")
("axlJPGUICustSelected"
"axlJPGUICustSelected(
g_inst
g_form
g_enabled
)
=> nil"
"Job Policy GUI Customization member function to enable/disable any HI customizations. The Job Policy GUI calls this function every time the job policy type is changed.")
("axlRegisterJobIntfc"
"axlRegisterJobIntfc(
s_displayName
s_className
[ ?isInitializedFun u_isInitFun ]
[ ?displayInGUI g_shouldDisplay ]
)
=> t"
"Registers a job interface class into ADE XL. Job interfaces should be registered before use, preferably during virtuoso initialization.")
("axlJPGUICustWriteToForm"
"axlJPGUICustWriteToForm(
g_inst
g_form
l_dataDpl
)
=> nil"
"Job Policy GUI Customization member function to load a property list that is saved as a job policy into HI customizations.")
("axlRegisteredJobIntfcNames"
"axlRegisteredJobIntfcNames(
)
=> l_names / nil"
"Retrieve the registered job interfaces.")
("axlRegisteredJPGUICust"
"axlRegisteredJPGUICust(
S_name
g_inst
)
=> t"
"Job Policy GUI Customization member function to register a customization into the Job Policy GUI.  Any registered customizations will appear the next time the job policy GUI is displayed.")
("axlGetAttachedJobPolicy"
"axlGetAttachedJobPolicy( 
[ t_sessionName ]
[ t_toolType ]
[ t_testName ]
) 
=> l_jobPolicyProperties / nil"
"Returns the current job policy attached to the setup or to the given test.")
("axlGetJobPolicy"
"axlGetJobPolicy( 
t_jobPolicyName 
) 
=> l_jobPolicyProperties / nil"
"Returns a disembodied property list containing property-value pairs for the job policy.")
("axlGetJobPolicyTypes"
"axlGetJobPolicyTypes( 
) 
=> l_jobPolicyNames / nil"
"Returns a list containing names of all available job policies.")
("axlIsICRPProcess"
"axlIsICRPProcess( 
) 
=> t / nil"
"Returns t if the code is currently running in a remote child process for ADE XL. You can use this function in your .cdsinit file or in custom SKILL code.")
("axlSaveJobPolicy"
"axlSaveJobPolicy( 
t_policyName
[t_targetDirectory]
) 
=> t / nil"
"Saves the policy given by policyName.")
("axlSetJobPolicyProperty"
"axlSetJobPolicyProperty( 
t_jobPolicyName 
t_jobPropertyName 
t_jobPropertyValue 
) 
=> t / nil"
"Sets a property name-value pair for the specified job policy. You can use this function to update the properties of an existing policy. To apply the updated properties to all the ADE XL sessions, set the updated policy as the default policy for ADE XL by using the defaultJobPolicy environment variable.")
("axlStopAllJobs"
"axlStopAllJobs( 
[ t_sessionName ]
[ g_forceFlag ]
) 
=> t / nil"
"Stops all the ICRPs jobs present in the system.")
("axlStopJob"
"axlStopJob( 
t_sessionName
x_jobId
[ g_forceFlag ]
) 
=> t / nil"
"Stops a job.")