;SKILL Language Functions
("absImportGDS"
"absImportGDS(
)
=> 0 / 1"
"Creates cellviews from GDSII layout data.")
("absImportOasis"
"absImportOasis(
)
=> 0 / 1"
"Creates cellviews from OASIS data.")
("absImportLogical"
"absImportLogical(
)
=> 0 / 1"
"Creates cellviews from existing logical information, typically represented in LIB or Verilog formats.")
("absImportLEF"
"absImportLEF(
)
=> 0 / 1"
"Creates cellviews from LEF data.")
("absImportDEF"
"absImportDEF(
)
=> 0 / 1"
"Creates cellviews from DEF data.")
("absImportCTLF"
"absImportCTLF(
)
=> 0 / 1"
"Creates cellviews from CTLF logical data.")
("absImportVerilog"
"absImportVerilog(
)
=> 0 / 1"
"Creates cellviews from Verilog logical data.")
("absImportOptions"
"absImportOptions(
)
=> 0 / 1"
"Loads a previous session's saved options file from the specified location.")
("absExportLEF"
"absExportLEF(
)
=> 0 / 1"
"Generates LEF files for cells in one or more bins. All exported LEF data is contained in the LEF filename.")
("absExportReport"
"absExportReport(
)
=> 0 / 1"
"Outputs a summary of the cells in your library to a report file.")
("absExportOptions"
"absExportOptions(
)
=> 0 / 1"
"Save the options settings for the current session to a specified location.")
("absGetLibrary"
"absGetLibrary(
)
=> library_name"
"Returns the name of the current library.")
("absSetLibrary"
"absSetLibrary(
name
)
=> t / nil"
"Specifies the library that you want to process through Abstract Generator. This involves either creating a new library and setting into it or setting into an existing library.")
("absAttachTechLib"
"absAttachTechLib(
name
)
=> t / nil"
"Attaches the named technology library to the current library.")
("absSelect"
"absSelect(
)
=> 0 / 1"
"Selects cells according to the specified options.")
("absSelectAllBins"
"absSelectAllBins(
)
=> integer"
"Selects all the bins in the current library.")
("absSelectCells"
"absSelectCells(
)
=> integer"
"Selects all cells in the selected bins.")
("absSelectBin"
"absSelectBin(
name
)
=> 0 / 1"
"Selects the named bin. This makes the specified bin current for use with other functions.")
("absSelectBinFrom"
"absSelectBinFrom(
from
to
)
=> integer"
"Selects a range of bins. The selection is made from top to bottom starting from the from bin. The from bin should be above the to bin the Bins pane, otherwise all bins listed after from are selected.")
("absSelectCell"
"absSelectCell(
name
)
=> 0 / 1"
"Selects a single named cell.")
("absGetSelectedCells"
"absGetSelectedCells(
)
=> string"
"Returns the list of cells selected in the Cell pane. The cells might belong to different bins.")
("absSelectCellFrom"
"absSelectCellFrom(
from
to
)
=> integer"
"Selects a range of cells. The selection is made from top to bottom starting from the from cell. The from cell should be above the to cell the Cell pane, otherwise all cells listed after from are selected.")
("absSelectCellsInList"
"absSelectCellsInList(
cellNameList
)
=> integer"
"Selects a list of cells that are not adjacent to each other in the Cell pane.")
("absDeselectAllBins"
"absDeselectAllBins(
)
=> integer"
"Deselects all currently selected bins.")
("absDeselectCells"
"absDeselectCells(
)
=> integer"
"Deselects all cells in the current bins.")
("absDeselectBin"
"absDeselectBin(
name
)
=> 0 / 1"
"Deselects a named bin.")
("absDeselectBinFrom"
"absDeselectBinFrom(
from
to
)
=> integer"
"Deselects a range of bins. The deselection is done from top to bottom starting from the from bin. The from bin should be above the to bin the Bin pane, otherwise all bins listed after from are deselected.")
("absDeselectCell"
"absDeselectCell(
name
)
=> 0 / 1"
"Deselects a named cell.")
("absDeselectCellFrom"
"absDeselectCellFrom(
from
to
)
=> integer"
"Deselects a range of cells. The deselection is done from top to bottom starting from the from cell. The from cell should be above the to cell the Cell pane, otherwise all cells listed after from are deselected.")
("absDeselectCellsInList"
"absDeselectCellsInList(
cellNameList
)
=> integer"
"Deselects a list of cells that are not adjacent to each other in the Cell pane.")
("absGetBins"
"absGetBins(
)
=> string"
"Displays the list of available bins. The list returned includes the five system bins as well as the user bins, if any.")
("absGetBinType"
"absGetBinType(
name
)
=> string"
"Returns the type of the bin passed as an argument. Both system and user bins can be specified as arguments.")
("absGetSelectedBins"
"absGetSelectedBins(
)
=> string"
"Returns the list of bins selected in the Bin pane. The order of the bins in the list matches the order in which they appear in the Bin pane.")
("absMoveSelectedCellsToBin"
"absMoveSelectedCellsToBin(
name
)
=> integer"
"Moves any currently selected cells to a named bin. This can be one of the five system bins or a user-defined bin.")
("absRenameBin"
"absRenameBin(
name
new_name
)
=> t / nil"
"Renames a previously created user bin.")
("absNewBin"
"absNewBin(
name
{ Core | IO | Corner | Block | Ignore }
)
=> t / nil"
"Creates a new user bin to store library cells.")
("absDeleteBin"
"absDeleteBin(
name
)
=> t / nil"
"Deletes the named user bin. You cannot delete a system bin.")
("absDeleteBinMoveCellsTo"
"absDeleteBinMoveCellsTo(
name
{ Core | IO | Corner | Block | Ignore | user_bin_name }
)
=> t / nil"
"Deletes a named user bin and moves any cells in that bin to another specified bin.")
("absCopyBinOptions"
"absCopyBinOptions(
from_bin { Core | IO | Corner | Block | Ignore | user_bin_name }
to_bin { Core | IO | Corner | Block | Ignore | user_bin_name }
)
=> t / nil"
"Copies bin option settings from one bin to another.")
("absGetOption"
"absGetOption(
name
)
=> string"
"Returns the value of the specified global option.")
("absSetOption"
"absSetOption(
name
value
)
=> 0 / 1"
"Sets values for all abstract generator global options. The SKILL function to apply the absSetOption settings is run after the absSetOption function has been set.")
("absGetBinOption"
"absGetBinOption(
bin
option
)
=> string"
"Returns the value of a specified option in a given bin.")
("absSetBinOption"
"absSetBinOption(
bin
option
value
)
=> t / nil"
"Sets a value for a specified option in a specified bin.")
("absPins"
"absPins(
)
=> 0 / 1"
"Runs the Pins step for the selected cells and creates a pins view for those cells based on options set using absSetBinOption.")
("absExtract"
"absExtract(
)
=> 0 / 1"
"Runs the Extract step for the selected cells and creates an extracted view for those cells based on the options set using absSetBinOption.")
("absAbstract"
"absAbstract(
)
=> 0 / 1"
"Runs the Abstract step for selected cells and creates an abstract view for those cells based on the options set using absSetBinOption.")
("absVerify"
"absVerify(
)
=> 0 / 1"
"Runs the Verify step for selected cells and creates a verify view for those cells based on the options set using absSetBinOption.")
("absGetCellProp"
"absGetCellProp(
cell
{ prCellClass | symmetry }
)
=> string"
"Returns the specified property value for a cell.")
("absSetCellProp"
"absSetCellProp(
cell
{ prCellClass | symmetry }
value
)
=> 0 / 1"
"Specifies a property value for a cell. The variables you can use for the value parameter depend on the property.")
("absGetTerminalProp"
"absGetTerminalProp(
cell
terminal
property { direction | termType | shape | netExpr | suppSensitivity | groundSensitivity }
)
=> string"
"Returns the value of the specified property for the specified terminal. Specify only cells that have already been processed by absPins. The Pins step generates the cell terminals.")
("absSetTerminalProp"
"absSetTerminalProp(
cell
terminal
property { direction | termType | shape | netExpr | suppSensitivity | groundSensitivity }
value
)
=> 0 / 1"
"Specifies a terminal value for a cell. The variables you can use for the value parameter depend on the property setting.")
("absDisableUpdate"
"absDisableUpdate(
)
=> t / nil"
"Both the absDisableUpdate and absEnableUpdate functions are used to control whether or not the graphical user interface updates in response to changes in, for example, bin selection. This ensures that the GUI does not update unnecessarily when several events in a row are processed. This is inserted by Abstract Generator into the record file.")
("absDistributeCells"
"absDistributeCells(
)
=> t / nil"
"Distributes cells between bins according to the options set.")
("absEnableUpdate"
"absEnableUpdate(
)
=> t / nil"
"Both the absEnableUpdate and absDisableUpdate functions are used to control whether or not the graphical user interface updates in response to changes in, for example, bin selection. This ensures that the GUI does not update unnecessarily when several events in a row are processed. This is inserted by Abstract Generator into the record file.")
("absExit"
"absExit(
)
=> void"
"Closes Abstract Generator.")
("absRevalidateSelectedCells"
"absRevalidateSelectedCells(
)
=> 0 / 1"
"Revalidates all invalid views for cells selected in the Cell pane. If the view has an error or warning, this remains. The view status is no longer grayed out.")
("absSort"
"absSort(
)
=> t / nil"
"Sets sort criteria for those cells in the current bin.")
("absVersion"
"absVersion(
)
=> string"
"Returns version, build, and operating system information.")
("iagCreateMenuItem"
"iagCreateMenuItem(
)
=> t / nil"
"Creates a custom menu item with the user-specified name and adds it to the integrated Abstract Generator. The menu is created if it is not already available, and the menu item is added under it. Function name is the callback procedure for the menu item.")
("iagGenAbstract"
"iagGenAbstract(
t_libName
l_cellNames
t_viewName
t_binName
t_optionsFilePath
)
=> t / nil"
"Runs Integrated Abstract Generator on the specified cellviews with the given settings.")